<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 23906aa9f613d0f67538e4292b220cebf624d5f2 Maintainer: tmn Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="function.set-error-handler" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>set_error_handler</refname>
  <refpurpose>
   Устанавливает пользовательский обработчик ошибок
  </refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type class="union"><type>callable</type><type>null</type></type><methodname>set_error_handler</methodname>
   <methodparam><type class="union"><type>callable</type><type>null</type></type><parameter>callback</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>error_levels</parameter><initializer><constant>E_ALL</constant></initializer></methodparam>
  </methodsynopsis>
  <para>
   Функция устанавливает пользовательскую <parameter>callback</parameter>-функцию
   для обработки ошибок, которые возникают в скрипте.
  </para>
  <para>
   Функция определяет пользовательские обработчики ошибок, которые возникают во время выполнения кода.
   Обработчики устанавливают в приложениях, которым требуется
   очистить файлы или данные при критичной для приложения ошибке или при ошибке,
   которую сгенерировали функцией <function>trigger_error</function> в ответ на конкретные условия.
  </para>
  <para>
   Важно помнить: PHP-движок передаст ошибки, типы которых указали
   в параметре <parameter>error_levels</parameter>, в стандартный обработчик ошибок,
   только если callback-функция вернёт значение &false;. Движок вызовет пользовательский
   обработчик ошибок, даже если уровень ошибки не соответствует настройкам,
   которые установили функцией <function>error_reporting</function>.
   При этом текущее значение директивы <link linkend="ini.error-reporting">error_reporting</link>
   остаётся доступным для чтения, чтобы выполнить операции, которые соответствуют ситуации.
  </para>

  <para>
   Обратите также внимание, за остановку выполнения скрипта функцией <function>exit</function>,
   когда требуется, отвечает пользовательский обработчик.
   Выполнение скрипта продолжится со следующей инструкции после той, которая вызвала ошибку,
   если функция обработки ошибок вернёт управление.
  </para>
  <para>
   Пользовательской функцией невозможно обработать ошибки следующих типов:
   <constant>E_ERROR</constant>, <constant>E_PARSE</constant>,
   <constant>E_CORE_ERROR</constant>, <constant>E_CORE_WARNING</constant>,
   <constant>E_COMPILE_ERROR</constant>,
   <constant>E_COMPILE_WARNING</constant> независимо от места, в котором возникла ошибка,
   и бо́льшую часть ошибок уровня <constant>E_STRICT</constant>, которые возникли в файле вызова
   функции <function>set_error_handler</function>.
  </para>
  <para>
   Пользовательский обработчик ошибок регистрируется при выполнении скрипта.
   Операции наподобие загрузки файлов начинаются до запуска скрипта,
   поэтому невозможно зарегистрировать и вызвать обработчик для таких ошибок.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>callback</parameter></term>
     <listitem>
      <para>
       При передаче значения &null; обработчик сбрасывается в состояние по умолчанию,
       иначе обработчиком становится callback-функция со следующей сигнатурой:
      </para>
      <para>
       <methodsynopsis>
        <type>bool</type><methodname><replaceable>handler</replaceable></methodname>
        <methodparam><type>int</type><parameter>errno</parameter></methodparam>
        <methodparam><type>string</type><parameter>errstr</parameter></methodparam>
        <methodparam choice="opt"><type>string</type><parameter>errfile</parameter></methodparam>
        <methodparam choice="opt"><type>int</type><parameter>errline</parameter></methodparam>
        <methodparam choice="opt"><type>array</type><parameter>errcontext</parameter></methodparam>
       </methodsynopsis>
       <variablelist>
        <varlistentry>
         <term><parameter>errno</parameter></term>
         <listitem>
          <simpara>
           В первый параметр — <parameter>errno</parameter> передаётся целое число,
           которое указывает на уровень ошибки.
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><parameter>errstr</parameter></term>
         <listitem>
          <simpara>
           Во второй параметр — <parameter>errstr</parameter> передаётся строка
           с сообщением об ошибке.
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><parameter>errfile</parameter></term>
         <listitem>
          <simpara>
           В третий параметр — <parameter>errfile</parameter> передаётся
           строка с названием файла, в котором возникла ошибка, если параметр
           определили в функции обратного вызова.
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><parameter>errline</parameter></term>
         <listitem>
          <simpara>
           В четвёртный параметр — <parameter>errline</parameter> передаётся
           целочисленный номер строки, в которой возникла ошибка, если параметр
           определили в функции обратного вызова.
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><parameter>errcontext</parameter></term>
         <listitem>
          <simpara>
           В пятый параметр — <parameter>errcontext</parameter> передаётся
           массив, который указывает на активную таблицу символов в точке,
           в которой возникла ошибка, если параметр определили в функции обратного вызова.
           Другими словами, параметр <parameter>errcontext</parameter>
           будет содержать массив переменных той области действия, в которой возникла ошибка.
           Контекст ошибки не модифицируют в пользовательском обработчике ошибок,
           чтобы при возврате управления сохранить согласованность данных.
          </simpara>
          <warning xmlns="http://docbook.org/ns/docbook">
           <simpara>
            С PHP 7.2.0 параметр <emphasis>УСТАРЕЛ</emphasis>,
            а в PHP 8.0.0 параметр <emphasis>УДАЛИЛИ</emphasis>. Обработчик выдаст ошибку
            "too few arguments", если в callback-функции параметр определили,
            но не установили значение по умолчанию.
           </simpara>
          </warning>
         </listitem>
        </varlistentry>
       </variablelist>
      </para>
      <para>
       При возврате из функции значения &false; управление передаётся стандартному
       обработчику ошибок.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>error_levels</parameter></term>
     <listitem>
      <para>
       Параметр устанавливает маску уровней ошибок,
       при которых сработает <parameter>callback</parameter>-функция.
       Параметр управляет срабатыванием пользовательского обработчика ошибок
       так же, как ini-настройка <link linkend="ini.error-reporting">error_reporting</link>
       управляет отображением ошибок. Без установки маски движок вызывает
       <parameter>callback</parameter>-функцию для каждой ошибки
       и игнорирует настройку директивы <link linkend="ini.error-reporting">error_reporting</link>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Функция возвращает предыдущий обработчик ошибок, если такой обработчик определили,
   или значение &null;, если за текущую обработку ошибок отвечает встроенный обработчик.
   Функция вернёт индексный массив с классом и названием метода,
   если предыдущий обработчик ошибок зарегистрировали как метод класса.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>8.0.0</entry>
       <entry>
        Параметр <parameter>errcontext</parameter> удалили. Контекст ошибки больше не передаётся
        в пользовательскую callback-функцию.
       </entry>
      </row>
      <row>
       <entry>7.2.0</entry>
       <entry>
        Параметр <parameter>errcontext</parameter> устарел. При определении параметра
        в пользовательском обработчике функция выдаст ошибку уровня <constant>E_DEPRECATED</constant>.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>
     Обработка ошибок функциями <function>set_error_handler</function>
     и <function>trigger_error</function>
    </title>
    <para>
     Пример ниже демонстрирует обработку внутренних исключений путём
     вызова ошибок разных типов и их обработки пользовательской функцией:
    </para>
    <programlisting role="php">
<![CDATA[
<?php

// Функция обработки ошибок
function myErrorHandler($errno, $errstr, $errfile, $errline)
{
    if (!(error_reporting() & $errno)) {
        // Директива error_reporting не включает этот код ошибки,
        // поэтому пусть ошибку обрабатывает стандартный обработчик ошибок PHP
        return false;
    }

    // Переменной $errstr требуется экранирование:
    $errstr = htmlspecialchars($errstr);

    switch ($errno) {
        case E_USER_ERROR:
            echo "<b>Пользовательская ОШИБКА</b> [$errno] $errstr<br />\n";
            echo "  Фатальная ошибка в строке $errline файла $errfile";
            echo ", PHP " . PHP_VERSION . " (" . PHP_OS . ")<br />\n";
            echo "Завершение работы...<br />\n";
            exit(1);

        case E_USER_WARNING:
            echo "<b>Пользовательское ПРЕДУПРЕЖДЕНИЕ</b> [$errno] $errstr<br />\n";
            break;

        case E_USER_NOTICE:
            echo "<b>Пользовательское УВЕДОМЛЕНИЕ</b> [$errno] $errstr<br />\n";
            break;

        default:
            echo "Неизвестная ошибка: [$errno] $errstr<br />\n";
            break;
    }

    /* Не запускаем внутренний обработчик ошибок PHP */
    return true;
}

// Функция тестирования обработчика ошибок
function scale_by_log($vect, $scale)
{
    if (!is_numeric($scale) || $scale <= 0) {
        trigger_error("log(x) для x <= 0 не определён, вы используете: scale = $scale", E_USER_ERROR);
    }

    if (!is_array($vect)) {
        trigger_error("Некорректный входной вектор, пропущен массив значений", E_USER_WARNING);
        return null;
    }

    $temp = array();
    foreach ($vect as $pos => $value) {
        if (!is_numeric($value)) {
            trigger_error("Значение на позиции $pos не относится к числу, присваиваем значение 0 (ноль)", E_USER_NOTICE);
            $value = 0;
        }
        $temp[$pos] = log($scale) * $value;
    }

    return $temp;
}

// Переключаемся на пользовательский обработчик
$old_error_handler = set_error_handler("myErrorHandler");

// Вызовем ряд ошибок, и вначале определим смешанный массив с нечисловым элементом
echo "vector a\n";
$a = array(2, 3, "foo", 5.5, 43.3, 21.11);
print_r($a);

// Теперь создадим ещё один массив
echo "----\nvector b - a notice (b = log(PI) * a)\n";
/* Значение на позиции $pos не относится к числу, присваиваем 0 (ноль)*/
$b = scale_by_log($a, M_PI);
print_r($b);

// Проблема, вместо массива передали строку
echo "----\nvector c - a warning\n";
/* Некорректный входной вектор, ожидается массив значений */
$c = scale_by_log("not array", 2.3);
var_dump($c); // NULL

// Критическая ошибка, логарифм нуля или отрицательного числа не определён
echo "----\nvector d - fatal error\n";
/* log(x) для x <= 0 не определён, передали: scale = $scale */
$d = scale_by_log($a, -2.5);

var_dump($d); // До этого места никогда не дойдём

?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
vector a
Array
(
    [0] => 2
    [1] => 3
    [2] => foo
    [3] => 5.5
    [4] => 43.3
    [5] => 21.11
)
----
vector b - a notice (b = log(PI) * a)
<b>Пользовательское УВЕДОМЛЕНИЕ</b> [1024] Значение на позиции 2 не относится к числу, присваиваем значение 0 (ноль)<br />
Array
(
    [0] => 2.2894597716988
    [1] => 3.4341896575482
    [2] => 0
    [3] => 6.2960143721717
    [4] => 49.566804057279
    [5] => 24.165247890281
)
----
vector c - a warning
<b>Пользовательское ПРЕДУПРЕЖДЕНИЕ</b> [512] Некорректный входной вектор, пропущен массив значений<br />
NULL
----
vector d - fatal error
<b>Пользовательская ОШИБКА</b> [256] log(x) для x &lt;= 0 не определён, вы используете: scale = -2.5<br />
  Фатальная ошибка в строке 44 файла /in/IYIBO, PHP 7.4.33 (Linux)<br />
Завершение работы...<br />
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><classname>ErrorException</classname></member>
    <member><function>error_reporting</function></member>
    <member><function>restore_error_handler</function></member>
    <member><function>trigger_error</function></member>
    <member><link linkend="errorfunc.constants">Константы уровней ошибок</link></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
