<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: a0ae28d3bc85f927c22649ebd9a590b921534b7d Maintainer: rjhdby Status: ready -->
<!-- Reviewed: no -->

<refentry xmlns="http://docbook.org/ns/docbook" xml:id="function.session-regenerate-id">
 <refnamediv>
  <refname>session_regenerate_id</refname>
  <refpurpose>
   Генерирует и обновляет идентификатор текущей сессии
  </refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>session_regenerate_id</methodname>
   <methodparam choice="opt"><type>bool</type><parameter>delete_old_session</parameter><initializer>&false;</initializer></methodparam>
  </methodsynopsis>
  <para>
   Функция <function>session_regenerate_id</function> генерирует новый идентификатор сессии
   и заменяет идентификатор текущей сессии новым. При этом функция сохраняет информацию о текущей сессии.
  </para>
  <para>
   При включённой опции <link linkend="ini.session.use-trans-sid">session.use_trans_sid</link>
   начинать вывод данных требуется после вызова функции <function>session_regenerate_id</function>,
   иначе механизм управления сессиями будет использовать старый идентификатор сессии.
  </para>
  <warning>
   <para>
    Функции <function>session_regenerate_id</function>
    плохо работает с нестабильными сетями, к которым относятся мобильные и Wi-Fi-сети. Поэтому
    при вызове функции <function>session_regenerate_id</function> не исключается потеря сессии.
   </para>
   <para>
    Данные старой сессии не нужно уничтожать сразу. Лучше
    сохранять метку времени уничтожения сессии в переменной сессии и контролировать доступ к старому
    идентификатору сессии. При уничтожении данных старой сессии параллельный доступ к странице повысит риск
    нарушения согласованности состояния, потери сессии или вызовет состояние гонки на стороне
    клиента (браузера) и напрасно создаст серию ненужных идентификаторов
    сессии. Немедленное удаление данных сессии также отключает
    обнаружение и предотвращение атак с перехватом сессии.
   </para>
  </warning>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>delete_old_session</parameter></term>
     <listitem>
      <para>
       Параметр определяет, удалять ли старый файл сессии.
       От удаления старой сессии отказываются, чтобы избежать гонок,
       которые вызвало удаление, или когда требуется обнаруживать или избегать атак,
       которые совершают путём перехвата сессии.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Пример использования функции <function>session_regenerate_id</function></title>
    <programlisting role="php">
<![CDATA[
<?php

// ЗАМЕЧАНИЕ: Это не рабочий код, а только пример!

session_start();

// Проверяем метку времени уничтожения сессии
if (isset($_SESSION['destroyed']) && $_SESSION['destroyed'] < time() - 300) {
    // В норме так делать не нужно, поскольку это провоцирует атаки или увеличивает риск потери сессии из-за нестабильности сети.
    // Функция удаляет статус аутентификации текущей сессии пользователя
    remove_all_authentication_flag_from_active_sessions($_SESSION['userid']);
    throw new DestroyedSessionAccessException();
}

$old_sessionid = session_id();

// Устанавливаем временну́ю метку уничтожения сессии
$_SESSION['destroyed'] = time(); // Функция session_regenerate_id() сохраняет данные старой сессии

// Простой вызов функции session_regenerate_id() может вызвать потерю сессии и т. д.
// Смотрите следующий пример
session_regenerate_id();

// Новой сессии не требуется временна́я метка удаления сессии
unset($_SESSION['destroyed']);

$new_sessionid = session_id();

echo "Старая сессия: $old_sessionid<br />";
echo "Новая сессия: $new_sessionid<br />";

print_r($_SESSION);

?>
]]>
    </programlisting>
   </example>
  </para>

  <para>
   Текущий модуль сессии плохо справляется с нестабильной сетью.
   Управление идентификатором сессии помогает избегать потери сессии
   при вызове функции <function>session_regenerate_id</function>.
  </para>

  <para>
   <example>
    <title>
     Пример кода, который избегает потери сессии
     при вызове функции <function>session_regenerate_id</function>
    </title>
    <programlisting role="php">
<![CDATA[
<?php

// ЗАМЕЧАНИЕ: Это не рабочий код, а только пример!
// Функции my_session_start() и my_session_regenerate_id() избегают потери
// сессий из-за нестабильной сети. Код дополнительно помогает предотвратить
// эксплуатацию сессии, которую украли злоумышленники.

function my_session_start()
{
    session_start();

    if (isset($_SESSION['destroyed'])) {
        if ($_SESSION['destroyed'] < time() - 300) {
            // В норме так делать не нужно, поскольку это провоцирует атаки или увеличивает риск потери сессии из-за нестабильности сети.
            // Функция удаляет статус аутентификации текущей сессии пользователя
            remove_all_authentication_flag_from_active_sessions($_SESSION['userid']);
            throw new DestroyedSessionAccessException();
        }

        if (isset($_SESSION['new_session_id'])) {
            // Срок действия ещё не полностью истёк. Блок данных cookie может потеряться из-за нестабильной сети.
            // Попробуем ещё раз установить правильный cookie с идентификатором сессии.
            // ЗАМЕЧАНИЕ: Новый идентификатор сессии не устанавливают, если требуется
            // удалить флаг аутентификации
            session_commit();
            session_id($_SESSION['new_session_id']);

            // До вызова этой функции требуется создать новый идентификатор сессии
            session_start();
            return;
        }
    }
}

function my_session_regenerate_id()
{
    // Новый идентификатор сессии требуется для установки правильного идентификатора сессии,
    // если идентификатор сессии не установился прежде из-за нестабильной сети
    $new_session_id = session_create_id();
    $_SESSION['new_session_id'] = $new_session_id;

    // Устанавливаем временну́ю метку удаления сессии
    $_SESSION['destroyed'] = time();

    // Записываем и закрываем текущую сессию
    session_write_close();

    // Начинаем сессию с новым идентификатором
    session_id($new_session_id);
    ini_set('session.use_strict_mode', 0);
    session_start();
    ini_set('session.use_strict_mode', 1);

    // Новой сессии не требуются эти переменные
    unset($_SESSION['destroyed']);
    unset($_SESSION['new_session_id']);
}

?>
]]>
    </programlisting>
   </example>
  </para>

 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>session_id</function></member>
    <member><function>session_create_id</function></member>
    <member><function>session_start</function></member>
    <member><function>session_destroy</function></member>
    <member><function>session_reset</function></member>
    <member><function>session_name</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
