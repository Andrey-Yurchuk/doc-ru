<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 1ef9c7a76700b3e72844050d75e6ed1b870f9ca7 Maintainer: sergey Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="imagick.morphology" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>Imagick::morphology</refname>
  <refpurpose>Применяет к изображению ядро, предоставленное пользователем, в соответствии с заданным методом морфологии</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>bool</type><methodname>Imagick::morphology</methodname>
   <methodparam><type>int</type><parameter>morphologyMethod</parameter></methodparam>
   <methodparam><type>int</type><parameter>iterations</parameter></methodparam>
   <methodparam><type>ImagickKernel</type><parameter>ImagickKernel</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>channel</parameter><initializer>Imagick::CHANNEL_DEFAULT</initializer></methodparam>
  </methodsynopsis>
  <para>
   Применяет к изображению ядро, предоставленное пользователем, в соответствии с заданным методом морфологии.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>morphologyMethod</parameter></term>
    <listitem>
     <para>
      Какой метод морфологии использовать: одна из констант \Imagick::MORPHOLOGY_*.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>iterations</parameter></term>
    <listitem>
     <para>
      Количество итераций для применения морфологической функции. Значение -1 означает цикл до тех пор, пока не будет найдено никаких изменений.
      Как это применяется, может зависеть от метода морфологии. Обычно это значение равно 1.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>ImagickKernel</parameter></term>
    <listitem>
     <para>

     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>channel</parameter></term>
    <listitem>
     <para>

     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &imagick.return.success;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Пример использования метода Convolve <function>Imagick::morphology</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$imagick = $this->getCharacter();
$kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_GAUSSIAN, "5,1");
$imagick->morphology(\Imagick::MORPHOLOGY_CONVOLVE, 2, $kernel);
header("Content-Type: image/png");
echo $imagick->getImageBlob();

?>
]]>
    </programlisting>
   </example>

   <example>
    <title>Пример использования метода Correlate <function>Imagick::morphology</function></title>
    <programlisting role="php">
<![CDATA[
<?php
// Верхний левый пиксель должен быть чёрным.
// Нижний правый пиксель должен быть белым
// На остальное нам всё равно.

$imagick = $this->getCharacterOutline();
$kernel = \ImagickKernel::fromMatrix(self::$correlateMatrix, [2, 2]);
$imagick->morphology(\Imagick::MORPHOLOGY_CORRELATE, 1, $kernel);
header("Content-Type: image/png");
echo $imagick->getImageBlob();

?>
]]>
    </programlisting>
   </example>

   <example>
    <title>Пример использования метода Erode <function>Imagick::morphology</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$canvas = $this->getCharacterOutline();
$kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_OCTAGON, "3");
$canvas->morphology(\Imagick::MORPHOLOGY_ERODE, 2, $kernel);
header("Content-Type: image/png");
echo $canvas->getImageBlob();

?>
]]>
    </programlisting>
   </example>

   <example>
    <title>Пример использования метода Erode Intensity <function>Imagick::morphology</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$canvas = $this->getCharacter();
$kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_OCTAGON, "1");
$canvas->morphology(\Imagick::MORPHOLOGY_ERODE_INTENSITY, 2, $kernel);
header("Content-Type: image/png");
echo $canvas->getImageBlob();

?>
]]>
    </programlisting>
   </example>

   <example>
    <title>Пример использования метода Dilate <function>Imagick::morphology</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$canvas = $this->getCharacterOutline();
$kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_OCTAGON, "3");
$canvas->morphology(\Imagick::MORPHOLOGY_DILATE, 4, $kernel);
header("Content-Type: image/png");
echo $canvas->getImageBlob();

?>
]]>
    </programlisting>
   </example>

   <example>
    <title>Пример использования метода Dilate intensity <function>Imagick::morphology</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$canvas = $this->getCharacter();
$kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_OCTAGON, "1");
$canvas->morphology(\Imagick::MORPHOLOGY_DILATE_INTENSITY, 4, $kernel);
header("Content-Type: image/png");
echo $canvas->getImageBlob();

?>
]]>
    </programlisting>
   </example>

   <example>
    <title>Пример использования метода Distance с ядром Chebyshev <function>Imagick::morphology</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$canvas = $this->getCharacterOutline();
$kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_CHEBYSHEV, "3");
$canvas->morphology(\Imagick::MORPHOLOGY_DISTANCE, 3, $kernel);
$canvas->autoLevelImage();
header("Content-Type: image/png");
echo $canvas->getImageBlob();

?>
]]>
    </programlisting>
   </example>

   <example>
    <title>Пример использования метода Distance с ядром Manhattan <function>Imagick::morphology</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$canvas = $this->getCharacterOutline();
$kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_MANHATTAN, "5");
$canvas->morphology(\Imagick::MORPHOLOGY_DISTANCE, 3, $kernel);
$canvas->autoLevelImage();
header("Content-Type: image/png");
echo $canvas->getImageBlob();

?>
]]>
    </programlisting>
   </example>

   <example>
    <title>Пример использования метода Distance с ядром ocatagonal <function>Imagick::morphology</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$canvas = $this->getCharacterOutline();
$kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_OCTAGONAL, "5");
$canvas->morphology(\Imagick::MORPHOLOGY_DISTANCE, 3, $kernel);
$canvas->autoLevelImage();
header("Content-Type: image/png");
echo $canvas->getImageBlob();

?>
]]>
    </programlisting>
   </example>

   <example>
    <title>Пример использования метода Distance с ядром Euclidean <function>Imagick::morphology</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$canvas = $this->getCharacterOutline();
$kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_EUCLIDEAN, "4");
$canvas->morphology(\Imagick::MORPHOLOGY_DISTANCE, 3, $kernel);
$canvas->autoLevelImage();
header("Content-Type: image/png");
echo $canvas->getImageBlob();

?>
]]>
    </programlisting>
   </example>

   <example>
    <title>Пример использования метода Edge <function>Imagick::morphology</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$canvas = $this->getCharacterOutline();
$kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_OCTAGON, "3");
$canvas->morphology(\Imagick::MORPHOLOGY_EDGE, 1, $kernel);
header("Content-Type: image/png");
echo $canvas->getImageBlob();

?>
]]>
    </programlisting>
   </example>

   <example>
    <title>Пример использования метода Open <function>Imagick::morphology</function></title>
    <programlisting role="php">
<![CDATA[
<?php
// В результате вы увидите, что "Open" сглаживает контур, округляя все острые точки, и удаляет все части, которые меньше используемой формы.
// Он также отключит или откроет любые тонкие мосты.
$canvas = $this->getCharacterOutline();
$kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_DISK, "6");
$canvas->morphology(\Imagick::MORPHOLOGY_OPEN, 1, $kernel);
header("Content-Type: image/png");
echo $canvas->getImageBlob();

?>
]]>
    </programlisting>
   </example>

   <example>
    <title>Пример использования метода Open intensity <function>Imagick::morphology</function></title>
    <programlisting role="php">
<![CDATA[
<?php
// В результате вы увидите, что "Open" сглаживает контур, округляя все острые точки, и удаляет все части, которые меньше используемой формы.
// Он также отключит или откроет любые тонкие мосты.

$canvas = $this->getCharacter();
$kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_DISK, "6");
$canvas->morphology(\Imagick::MORPHOLOGY_OPEN_INTENSITY, 1, $kernel);
header("Content-Type: image/png");
echo $canvas->getImageBlob();

?>
]]>
    </programlisting>
   </example>

   <example>
    <title>Пример использования метода Close <function>Imagick::morphology</function></title>
    <programlisting role="php">
<![CDATA[
<?php
// Основное использование метода "Close" - уменьшить или удалить любые дыры или пробелы в размере Структурного элемента ядра.
// Это "близкие" части фона примерно такого размера.
$canvas = $this->getCharacterOutline();
$kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_DISK, "6");
$canvas->morphology(\Imagick::MORPHOLOGY_CLOSE, 1, $kernel);
header("Content-Type: image/png");
echo $canvas->getImageBlob();

?>
]]>
    </programlisting>
   </example>

   <example>
    <title>Пример использования метода Close Intensity <function>Imagick::morphology</function></title>
    <programlisting role="php">
<![CDATA[
<?php
// Основное использование метода "Close" - уменьшить или удалить любые дыры или пробелы в размере Структурного элемента ядра.
// Это "близкие" части фона примерно такого размера.
$canvas = $this->getCharacter();
$kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_DISK, "6");
$canvas->morphology(\Imagick::MORPHOLOGY_CLOSE_INTENSITY, 1, $kernel);
header("Content-Type: image/png");
echo $canvas->getImageBlob();

?>
]]>
    </programlisting>
   </example>

   <example>
    <title>Пример использования метода Smooth <function>Imagick::morphology</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$canvas = $this->getCharacterOutline();
$kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_OCTAGON, "3");
$canvas->morphology(\Imagick::MORPHOLOGY_SMOOTH, 1, $kernel);
header("Content-Type: image/png");
echo $canvas->getImageBlob();

?>
]]>
    </programlisting>
   </example>

   <example>
    <title>Пример использования метода Edge in <function>Imagick::morphology</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$canvas = $this->getCharacterOutline();
$kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_OCTAGON, "3");
$canvas->morphology(\Imagick::MORPHOLOGY_EDGE_IN, 1, $kernel);
header("Content-Type: image/png");
echo $canvas->getImageBlob();

?>
]]>
    </programlisting>
   </example>

   <example>
    <title>Пример использования метода Edge out <function>Imagick::morphology</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$canvas = $this->getCharacterOutline();
$kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_OCTAGON, "3");
$canvas->morphology(\Imagick::MORPHOLOGY_EDGE_OUT, 1, $kernel);
header("Content-Type: image/png");
echo $canvas->getImageBlob();

?>
]]>
    </programlisting>
   </example>

   <example>
    <title>
     Метод "TopHat", или, точнее, "White TopHat", возвращает пиксели, которые были удалены открытием фигуры, то есть пиксели,
     которые были удалены для округления точек, и соединение, соединённое мостом между фигурами. <function>Imagick::morphology</function>
    </title>
    <programlisting role="php">
<![CDATA[
<?php
$canvas = $this->getCharacterOutline();
$kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_DISK, "5");
$canvas->morphology(\Imagick::MORPHOLOGY_TOP_HAT, 1, $kernel);
header("Content-Type: image/png");
echo $canvas->getImageBlob();

?>
]]>
    </programlisting>
   </example>

   <example>
    <title>
     Метод "TopHat", или, точнее, "Black TopHat", возвращает пиксели, которые были удалены закрытием фигуры, то есть пиксели,
     которые использовались для заполнения дыр, зазоров и мостов. <function>Imagick::morphology</function>
    </title>
    <programlisting role="php">
<![CDATA[
<?php

$canvas = $this->getCharacterOutline();
$kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_DISK, "5");
$canvas->morphology(\Imagick::MORPHOLOGY_BOTTOM_HAT, 1, $kernel);
header("Content-Type: image/png");
echo $canvas->getImageBlob();

?>
]]>
    </programlisting>
   </example>

   <example>
    <title>Пример использования метода Hit и Miss <function>Imagick::morphology</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$canvas = $this->getCharacterOutline();
// Находит все пиксели с 3 пикселями правого края
$matrix = [[1, false, false, 0]];
$kernel = \ImagickKernel::fromMatrix(
    $matrix,
    [0, 0]
);
$canvas->morphology(\Imagick::MORPHOLOGY_HIT_AND_MISS, 1, $kernel);
header("Content-Type: image/png");
echo $canvas->getImageBlob();

?>
]]>
    </programlisting>
   </example>

   <example>
    <title>Пример использования метода Thinning <function>Imagick::morphology</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$canvas = $this->getCharacterOutline();
$leftEdgeKernel = \ImagickKernel::fromMatrix([[0, 1]], [1, 0]);
$rightEdgeKernel = \ImagickKernel::fromMatrix([[1, 0]], [0, 0]);
$leftEdgeKernel->addKernel($rightEdgeKernel);

$canvas->morphology(\Imagick::MORPHOLOGY_THINNING, 3, $leftEdgeKernel);
header("Content-Type: image/png");
echo $canvas->getImageBlob();

?>
]]>
    </programlisting>
   </example>

   <example>
    <title>Пример использования метода Thicken <function>Imagick::morphology</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$canvas = $this->getCharacterOutline();
$leftEdgeKernel = \ImagickKernel::fromMatrix([[0, 1]], [1, 0]);
$rightEdgeKernel = \ImagickKernel::fromMatrix([[1, 0]], [0, 0]);
$leftEdgeKernel->addKernel($rightEdgeKernel);

$canvas->morphology(\Imagick::MORPHOLOGY_THICKEN, 3, $leftEdgeKernel);
header("Content-Type: image/png");
echo $canvas->getImageBlob();

?>
]]>
    </programlisting>
   </example>

   <example>
    <title>Пример использования метода Thick для создания выпуклой оболочки <function>Imagick::morphology</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$canvas = $this->getCharacterOutline();
$diamondKernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_DIAMOND, "1");
$convexKernel =  \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_CONVEX_HULL, "");

// Утолщённая морфология не справляется с небольшими зазорами.
// Закрываем их близкой морфологией.
$canvas->morphology(\Imagick::MORPHOLOGY_CLOSE, 1, $diamondKernel);
$canvas->morphology(\Imagick::MORPHOLOGY_THICKEN, -1, $convexKernel);
$canvas->morphology(\Imagick::MORPHOLOGY_CLOSE, 1, $diamondKernel);

header("Content-Type: image/png");
echo $canvas->getImageBlob();

?>
]]>
    </programlisting>
   </example>

   <example>
    <title>Пример использования метода Iterative morphology <function>Imagick::morphology</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$canvas = $this->getCharacterOutline();
$kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_DISK, "2");
$canvas->morphology(\Imagick::MORPHOLOGY_ITERATIVE, 3, $kernel);
$canvas->autoLevelImage();
header("Content-Type: image/png");
echo $canvas->getImageBlob();

?>
]]>
    </programlisting>
   </example>

   <example>
    <title>Пример использования вспомогательной функции для получения силуэта изображения <function>Imagick::morphology</function></title>
    <programlisting role="php">
<![CDATA[
<?php

function getCharacterOutline() {
    $imagick = new \Imagick(realpath("./images/character.png"));
    $character = new \Imagick();
    $character->newPseudoImage(
        $imagick->getImageWidth(),
        $imagick->getImageHeight(),
        "canvas:white"
    );
    $canvas = new \Imagick();
    $canvas->newPseudoImage(
        $imagick->getImageWidth(),
        $imagick->getImageHeight(),
        "canvas:black"
    );

    $character->compositeimage(
        $imagick,
        \Imagick::COMPOSITE_COPYOPACITY,
        0, 0
    );
    $canvas->compositeimage(
        $character,
        \Imagick::COMPOSITE_ATOP,
        0, 0
    );
    $canvas->setFormat('png');

    return $canvas;
}
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
