<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 78d17c25eeecc78cb7098b1a01d42391e36af2c1 Maintainer: aur Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="function.eval" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>eval</refname>
  <refpurpose>Оценивает строку как PHP-код</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>mixed</type><methodname>eval</methodname>
   <methodparam><type>string</type><parameter>code</parameter></methodparam>
  </methodsynopsis>
  <para>
   Языковая конструкция оценивает строку <parameter>code</parameter> как PHP-код.
  </para>
  <para>
   Код, который оценивает конструкция, наследует
   <link linkend="language.variables.scope">область видимости переменных</link> той строки,
   на которой вызвали языковую конструкцию <function>eval</function>.
   Каждая переменная, доступная на этой строке, будет доступна для чтения
   или изменения в строке кода, которую оценивает языковая конструкция.
   При этом функции и классы, которые определяют в строке кода,
   определяются в глобальной области видимости. Компилятор рассматривает вычисляемый код так,
   как если бы код <link linkend="function.include">подключили</link> отдельным файлом.
  </para>
  <caution>
   <para>
    Языковая конструкция <function>eval</function> представляет <emphasis>серьёзную опасность</emphasis>,
    поскольку разрешает выполнять произвольный PHP-код.
    <emphasis>Поэтому не рекомендуется пользоваться этой языковой конструкцией</emphasis>.
    Если после тщательной проверки выяснилось, что альтернатив конструкции нет,
    внимательно проверяют, чтобы без правильной предварительной проверки в языковую конструкцию
    <emphasis>не передавались пользовательские данные</emphasis>.
   </para>
  </caution>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>code</parameter></term>
     <listitem>
      <para>
       Корректный PHP-код для оценки и выполнения.
      </para>
      <para>
       Код нельзя оборачивать открывающим и закрывающим
       <link linkend="language.basic-syntax.phpmode">PHP-тегами</link>,
       поэтому потребует передать строку <literal>'echo "Привет!";'</literal>,
       а не <literal>'&lt;?php echo "Привет!"; &gt;'</literal>.
       По-прежнему разрешается переключаться между режимами PHP- и HTML-кода, например:
       <literal>'echo "Код PHP!"; ?&gt;Код HTML&lt;?php echo "Снова код PHP!";'</literal>.
      </para>
      <para>
       Конструкция выполнит только корректный PHP-код,
       потому каждую инструкцию кода потребуется правильно завершить точкой с запятой.
       Строка <literal>'echo "Привет!"'</literal> сгенерирует ошибку синтаксиса,
       а строка <literal>'echo "Привет!";'</literal> сработает.
      </para>
      <para>
       Инструкция <literal>return</literal> немедленно прекратит вычисление кода.
      </para>
      <para>
       Код выполнится в области видимости кода, который вызывал конструкцию <function>eval</function>.
       Поэтому переменные, которые определили или изменили в вызове <function>eval</function>,
       сохранят видимость после завершения вызова конструкции.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Языковая конструкция <function>eval</function> возвращает значение &null;,
   если только в вычисляемом коде не вызывается инструкция <literal>return</literal>.
   Начиная с PHP 7 конструкция <function>eval</function> выбрасывает ошибку <classname>ParseError</classname>,
   если в вычисляемом коде допустили синтаксическую ошибку.
   До PHP 7 в таких случаях <function>eval</function> возвращала логическое значение &false;,
   а следующий код выполнялся в обычном режиме. Невозможно отловить синтаксическую ошибку
   в конструкции <function>eval</function> функцией <function>set_error_handler</function>.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>
     Пример выполнения строки PHP-кода языковой конструкцией <function>eval</function> — простое слияние текста
    </title>
    <programlisting role="php">
<![CDATA[
<?php

$string = 'чашка';
$name = 'кофе';

$str = 'Это — $string $name.';

echo $str. "\n";

eval("\$str = \"$str\";");

echo $str. "\n";

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Это — $string $name.
Это — чашка кофе.
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;

  &note.language-construct;

  &tip.ob-capture;
  <note>
   <para>
    Весь скрипт завершает работу, если в вычисляемом коде возникла фатальная ошибка.
   </para>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>call_user_func</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
