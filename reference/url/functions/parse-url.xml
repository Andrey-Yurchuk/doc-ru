<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 4266e03897e77751a6cf7d15f9556c92124d8df3 Maintainer: aur Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="function.parse-url" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>parse_url</refname>
  <refpurpose>Разбирает URL-адрес и возвращает компоненты адреса</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type class="union"><type>int</type><type>string</type><type>array</type><type>null</type><type>false</type></type><methodname>parse_url</methodname>
   <methodparam><type>string</type><parameter>url</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>component</parameter><initializer>-1</initializer></methodparam>
  </methodsynopsis>
  <para>
   Функция разбирает URL-адрес и возвращает ассоциативный массив, который содержит
   компоненты URL-адреса, которые адрес представляет.
   Значения элементов массива <emphasis>не</emphasis> URL-декодируются.
  </para>
  <para>
   Функция <emphasis role="strong">не</emphasis> проверяет корректность URL-адреса,
   а только разбивает адрес на части. Функция <function> parse_url</function>
   также принимает неполные и недопустимые URL-адреса
   и попытается их разобрать.
  </para>
  <caution>
   <para>
    Функция иногда даёт неправильные результаты для относительных или недействительных URL-адресов,
    и результаты иногда даже не соответствуют стандартному поведению HTTP-клиентов.
    При разборе URL-адресов из ненадежных входных данных требуется дополнительная проверка
    наподобие той, которая проводится функцией
    <function>filter_var</function> с фильтром <constant>FILTER_VALIDATE_URL</constant>.
   </para>
  </caution>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>url</parameter></term>
     <listitem>
      <para>
       URL-адрес, который требуется разобрать.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
   <variablelist>
    <varlistentry>
     <term><parameter>component</parameter></term>
     <listitem>
      <para>
       Константы из следующего списка помогают получить только конкретный компонент
       URL-адреса в виде строки (<type>string</type>):
       <constant>PHP_URL_SCHEME</constant>, <constant>PHP_URL_HOST</constant>,
       <constant>PHP_URL_PORT</constant>, <constant>PHP_URL_USER</constant>,
       <constant>PHP_URL_PASS</constant>, <constant>PHP_URL_PATH</constant>,
       <constant>PHP_URL_QUERY</constant> или <constant>PHP_URL_FRAGMENT</constant>.
       Исключение — константа <constant>PHP_URL_PORT</constant>, с которой значение
       возврата будет принадлежать типу <type>int</type>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   При разборе неправильных URL-адресов, в формате которых допустили серьёзные ошибки,
   функция <function>parse_url</function> иногда возвращает значение &false;.
  </para>
  <para>
   Функция вернёт ассоциативный массив (<type>array</type>), если параметр
   <parameter>component</parameter> опустили. Массив представит по крайней мере один элемент.
   Ключи, которые будет содержать массив, если функция обнаружит в URL-адресе компоненты,
   которые соответствуют названиям ключей:
   <itemizedlist>
    <listitem>
     <simpara>
      <varname remap="structfield">scheme</varname> — схема наподобие <literal>http</literal>
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <varname remap="structfield">host</varname>
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <varname remap="structfield">port</varname>
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <varname remap="structfield">user</varname>
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <varname remap="structfield">pass</varname>
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <varname remap="structfield">path</varname>
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <varname remap="structfield">query</varname> — часть адреса после знака вопроса <literal>?</literal>,
      но до символа решетки
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <varname remap="structfield">fragment</varname> — часть адреса после символа <literal>#</literal> —
      идентификатора фрагмента или якоря
     </simpara>
    </listitem>
   </itemizedlist>
  </para>
  <para>
   С параметром <parameter>component</parameter> функция
   <function>parse_url</function> вернёт вместо массива (<type>array</type>) строку (<type>string</type>),
   или число (<type>int</type>), если указали константу <constant>PHP_URL_PORT</constant>.
   Функция вернёт значение &null;, если URL-адрес не содержит компонент, который запросили.
   Начиная с PHP 8.0.0 функция <function>parse_url</function> различает запросы и фрагменты,
   которые не содержатся в адресе или оказались пустыми:
  </para>
  <para>
   <informalexample>
    <screen>
<![CDATA[
http://example.com/foo → query = null, fragment = null
http://example.com/foo? → query = "",   fragment = null
http://example.com/foo# → query = null, fragment = ""
http://example.com/foo?# → query = "",   fragment = ""
]]>
    </screen>
   </informalexample>
  </para>
  <para>
   Раньше в каждом случае запрос и фрагмент равнялись &null;.
  </para>
  <para>
   Обратите внимание, что управляющие символы в компонентах заменяются подчёркиванием — <literal>_</literal>.
   Подробнее об управляющих символах рассказывает описание функции <function>ctype_cntrl</function>.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>8.0.0</entry>
      <entry>
       Функция <function>parse_url</function> теперь различит запросы и фрагменты,
       которые не содержатся в адресе или пусты.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Пример разбора URL-адреса функцией <function>parse_url</function></title>
    <programlisting role="php">
<![CDATA[
<?php

$url = 'http://username:password@hostname:9090/path?arg=value#anchor';

var_dump(parse_url($url));
var_dump(parse_url($url, PHP_URL_SCHEME));
var_dump(parse_url($url, PHP_URL_USER));
var_dump(parse_url($url, PHP_URL_PASS));
var_dump(parse_url($url, PHP_URL_HOST));
var_dump(parse_url($url, PHP_URL_PORT));
var_dump(parse_url($url, PHP_URL_PATH));
var_dump(parse_url($url, PHP_URL_QUERY));
var_dump(parse_url($url, PHP_URL_FRAGMENT));

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
array(8) {
  ["scheme"]=>
  string(4) "http"
  ["host"]=>
  string(8) "hostname"
  ["port"]=>
  int(9090)
  ["user"]=>
  string(8) "username"
  ["pass"]=>
  string(8) "password"
  ["path"]=>
  string(5) "/path"
  ["query"]=>
  string(9) "arg=value"
  ["fragment"]=>
  string(6) "anchor"
}
string(4) "http"
string(8) "username"
string(8) "password"
string(8) "hostname"
int(9090)
string(5) "/path"
string(9) "arg=value"
string(6) "anchor"
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>Пример разбора функцией <function>parse_url</function> URL-адреса без схемы</title>
    <programlisting role="php">
<![CDATA[
<?php

$url = '//www.example.com/path?googleguy=googley';

// До 5.4.7 функция показывала элемент path как "//www.example.com/path"
var_dump(parse_url($url));

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
array(3) {
  ["host"]=>
  string(15) "www.example.com"
  ["path"]=>
  string(5) "/path"
  ["query"]=>
  string(17) "googleguy=googley"
}
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    Функцию разработали только для разбора URL-адресов, а не URI-идентификаторов,
    но чтобы соответствовать требованиям обратной совместимости PHP, функция делает
    исключение для схемы <literal>file://</literal>, в которой допускаются тройные слеши —
    <literal>file:///...</literal>. Для любой другой схемы это недопустимо.
   </para>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>pathinfo</function></member>
    <member><function>parse_str</function></member>
    <member><function>http_build_query</function></member>
    <member><function>dirname</function></member>
    <member><function>basename</function></member>
    <member><link xlink:href="&url.rfc;3986">Стандарт RFC 3986</link></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
