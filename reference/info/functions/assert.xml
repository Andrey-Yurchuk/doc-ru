<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: bfabdf420fa4c710ec5995480dd7cbc17abdbada Maintainer: rjhdby Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="function.assert" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>assert</refname>
  <refpurpose>Проверяет утверждение</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>assert</methodname>
   <methodparam><type>mixed</type><parameter>assertion</parameter></methodparam>
   <methodparam choice="opt"><type class="union"><type>Throwable</type><type>string</type><type>null</type></type><parameter>description</parameter><initializer>&null;</initializer></methodparam>
  </methodsynopsis>
  <para>
   <function>assert</function> - это не функция, а языковая конструкция.
   Позволяет определять ожидания: утверждения, которые вступают в силу в средах разработки и тестирования,
   но оптимизированы так, что в производственной среде имеют нулевую стоимость.
  </para>
  <para>
   Утверждения следует использовать только в качестве отладочной функции.
   Один из вариантов их использования - проверка на вменяемость предварительных условий,
   которые всегда должны быть &true; и если они не выполняются,
   это указывает на ошибки программирования.
   Другой случай использования - убедиться в наличии определённых возможностей,
   например, функций модуля или определённых ограничений и возможностей системы.
  </para>
  <para>
   Поскольку утверждения могут быть настроены на отказ от них,
   их <emphasis>не</emphasis> следует использовать для обычных операций во время выполнения,
   таких как проверка входных параметров.
   Как правило, код должен вести себя так, как ожидается, даже если проверка утверждений отключена.
  </para>
  <para>
   <function>assert</function> проверяет, что ожидание, заданное в параметре <parameter>assertion</parameter>, выполняется.
   Если нет, и результат будет значение &false;, то будет предпринято соответствующее действие
   в зависимости от того, как была настроена конструкция <function>assert</function>.
  </para>

  <para>
   Поведение конструкции <function>assert</function> определяется следующими настройками INI:
   <table>
    <title>&ConfigureOptions; конструкции assert</title>
    <tgroup cols="4">
     <thead>
      <row>
       <entry>&Name;</entry>
       <entry>&Default;</entry>
       <entry>&Description;</entry>
       <entry>&Changelog;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry><link linkend="ini.zend.assertions">zend.assertions</link></entry>
       <entry><literal>1</literal></entry>
       <entry>
        <simplelist>
         <member>
          <literal>1</literal>: генерирует и выполняет код (режим разработки)
         </member>
         <member>
          <literal>0</literal>: генерирует код, но перепрыгивает через него во время выполнения
         </member>
         <member>
          <literal>-1</literal>: не генерирует код (рабочий режим)
         </member>
        </simplelist>
       </entry>
       <entry/>
      </row>
      <row>
       <entry><link linkend="ini.assert.active">assert.active</link></entry>
       <entry>&true;</entry>
       <entry>
        Если &false;, <function>assert</function> не проверяет ожидание
        и возвращает &true;, безоговорочно.
       </entry>
       <entry/>
      </row>
      <row>
       <entry><link linkend="ini.assert.callback">assert.callback</link></entry>
       <entry>&null;</entry>
       <entry>
        Определяемая пользователем функция, вызываемая в случае неудачной проверки утверждения.
        Её сигнатура должна быть следующей:
        <methodsynopsis role="procedural">
         <type>void</type><methodname>assert_callback</methodname>
         <methodparam><type>string</type><parameter>file</parameter></methodparam>
         <methodparam><type>int</type><parameter>line</parameter></methodparam>
         <methodparam><type>null</type><parameter>assertion</parameter></methodparam>
         <methodparam choice="opt"><type>string</type><parameter>description</parameter></methodparam>
        </methodsynopsis>
       </entry>
       <entry>
        До PHP 8.0.0 сигнатура callback-функции должна быть:
        <methodsynopsis role="procedural">
         <type>void</type><methodname>assert_callback</methodname>
         <methodparam><type>string</type><parameter>file</parameter></methodparam>
         <methodparam><type>int</type><parameter>line</parameter></methodparam>
         <methodparam><type>string</type><parameter>assertion</parameter></methodparam>
         <methodparam choice="opt"><type>string</type><parameter>description</parameter></methodparam>
        </methodsynopsis>
       </entry>
      </row>
      <row>
       <entry><link linkend="ini.assert.exception">assert.exception</link></entry>
       <entry>&true;</entry>
       <entry>
        Если &true;, будет выброшена ошибка <classname>AssertionError</classname>
        в случае неудачной проверки утверждения.
       </entry>
       <entry/>
      </row>
      <row>
       <entry><link linkend="ini.assert.bail">assert.bail</link></entry>
       <entry>&false;</entry>
       <entry>
        Если &true;, выполнение PHP-скрипта прервётся в случае неудачной проверки утверждении.
       </entry>
       <entry/>
      </row>
      <row>
       <entry><link linkend="ini.assert.warning">assert.warning</link></entry>
       <entry>&true;</entry>
       <entry>
        Если &true;, будет выдана ошибка уровня <constant>E_WARNING</constant> в случае неудачной проверки утверждения.
        Эта INI-настройка неэффективна, если включена <link linkend="ini.assert.exception">assert.exception</link>.
       </entry>
       <entry/>
      </row>
     </tbody>
    </tgroup>
   </table>

   Опции, начинающиеся с <literal>assert.</literal>, могут быть настроены с помощью
   функции <function>assert_options</function>. Однако это не рекомендуется.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>assertion</parameter></term>
     <listitem>
      <para>
       Любое выражение, возвращающее значение, которое будет выполнено,
       а результат используется для указания того, удалась или не удалась проверка утверждения.
      </para>

      <warning>
       <para>
        До версии PHP 8.0.0, если параметр <parameter>assertion</parameter> представлял
        собой строку (<type>string</type>), он интерпретировался как PHP-код
        и выполнялся с помощью функции <function>eval</function>.
        Эта строка передавалась в callback-функцию в качестве третьего аргумента.
        Это поведение <emphasis>УСТАРЕЛО</emphasis> в PHP 7.2.0 и <emphasis>УДАЛЕНО</emphasis> в PHP 8.0.0.
       </para>
      </warning>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>description</parameter></term>
     <listitem>
      <para>
       Если параметр <parameter>description</parameter> является экземпляром
       класса <classname>Throwable</classname>, он будет выброшен только в том случае,
       если проверка утверждения <parameter>assertion</parameter> не удастся.
       <note>
        <para>
         Начиная с PHP 8.0.0, это делается <emphasis>до</emphasis>
         вызова потенциально определённой callback-функции утверждения.
        </para>
       </note>
       <note>
        <para>
         Начиная с PHP 8.0.0, объект (&object;) будет выброшен независимо от конфигурации параметра
         <link linkend="ini.assert.exception">assert.exception</link>.
        </para>
       </note>
       <note>
        <para>
         Начиная с PHP 8.0.0, параметр <link linkend="ini.assert.bail">assert.bail</link>
         не имеет никакого эффекта в этом случае.
        </para>
       </note>
      </para>
      <para>
       Если параметр <parameter>description</parameter> является строкой (&string;),
       это сообщение будет использоваться в случае выбрасывания исключения или предупреждения.
       Необязательное описание, которое будет включено в сообщение,
       если проверка утверждения <parameter>assertion</parameter> не удастся.
      </para>
      <para>
       Если параметр <parameter>description</parameter> опущен.
       Во время компиляции создаётся описание по умолчанию,
       равное исходному коду для вызова <function>assert</function>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Возвращает &false;, если проверка провалена, &true; в противном случае.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>8.0.0</entry>
       <entry>
        <function>assert</function> больше не будет оценивать строковые аргументы,
        вместо этого они будут рассматриваться как любой другой аргумент.
        Вместо <code>assert($a == $b)</code> следует использовать <code>assert('$a == $b')</code>.
        Директива <literal>assert.quiet_eval</literal> &php.ini; и константа <constant>ASSERT_QUIET_EVAL</constant>
        также были удалены, поскольку они больше не будут иметь никакого эффекта.
       </entry>
      </row>
      <row>
       <entry>8.0.0</entry>
       <entry>
        Если параметр <parameter>description</parameter> является экземпляром класса <classname>Throwable</classname>,
        объект выбрасывается в случае неудачной проверки утверждения,
        независимо от значения <link linkend="ini.assert.exception">assert.exception</link>.
       </entry>
      </row>
      <row>
       <entry>8.0.0</entry>
       <entry>
        Если параметр <parameter>description</parameter> является экземпляром класса <classname>Throwable</classname>,
        пользовательская callback-функция не вызывается, даже если она установлена.
       </entry>
      </row>
      <row>
       <entry>8.0.0</entry>
       <entry>
        Объявление функции с именем <literal>assert()</literal> внутри пространства имён
        больше не допускается и выдаёт ошибку уровня <constant>E_COMPILE_ERROR</constant>.
       </entry>
      </row>
      <row>
       <entry>7.3.0</entry>
       <entry>
        Объявление функции <literal>assert()</literal> внутри пространства имён устарело.
        Такое объявление теперь выдаёт ошибку уровня <constant>E_DEPRECATED</constant>.
       </entry>
      </row>
      <row>
       <entry>7.2.0</entry>
       <entry>
        Использование строки (<type>string</type>) в качестве <parameter>assertion</parameter>
        устарело. Теперь оно выдаёт ошибку уровня <constant>E_DEPRECATED</constant>,
        когда значение и <link linkend="ini.assert.active">assert.active</link> и
        <link linkend="ini.zend.assertions">zend.assertions</link> равно <literal>1</literal>.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <refsect2>
   <title>Ожидания</title>
   <example>
    <programlisting role="php">
<![CDATA[
<?php
assert(true == false);
echo 'Привет!';
?>
]]>
    </programlisting>
    <para>
     Если <link linkend="ini.zend.assertions">zend.assertions</link> установить значение 0,
     то приведённый выше пример выведет:
    </para>
    <screen>
<![CDATA[
Привет!
]]>
    </screen>
    <para>
     Если <link linkend="ini.zend.assertions">zend.assertions</link> установить значение 1,
     а <link linkend="ini.assert.exception">assert.exception</link> установить значение 0,
     то приведённый выше пример выведет:
    </para>
    <screen>
<![CDATA[
Warning: assert(): assert(true == false) failed in - on line 2
Привет!
]]>
    </screen>
    <para>
     Если <link linkend="ini.zend.assertions">zend.assertions</link> установить значение 1,
     а <link linkend="ini.assert.exception">assert.exception</link> установить значение 1,
     то приведённый выше пример выведет:
    </para>
    <screen>
<![CDATA[
Fatal error: Uncaught AssertionError: assert(true == false) in -:2
Stack trace:
#0 -(2): assert(false, 'assert(true == ...')
#1 {main}
  thrown in - on line 2
]]>
    </screen>
   </example>
   <example>
    <title>Ожидания при использовании пользовательского исключения</title>
    <programlisting role="php">
<![CDATA[
<?php
class CustomError extends AssertionError {}

assert(true == false, new CustomError('True не является false!'));
echo 'Привет!';
?>
]]>
    </programlisting>
    <para>
     Если <link linkend="ini.zend.assertions">zend.assertions</link> установить значение 0,
     то приведённый выше пример выведет:
    </para>
    <screen>
<![CDATA[
Привет!
]]>
    </screen>
    <para>
     Если <link linkend="ini.zend.assertions">zend.assertions</link> установить значение 1,
     а <link linkend="ini.assert.exception">assert.exception</link> установить значение 0,
     то приведённый выше пример выведет:
    </para>
    <screen>
<![CDATA[
Warning: assert(): CustomError: True не является false! in -:4
Stack trace:
#0 {main} failed in - on line 4
Привет!
]]>
    </screen>
    <para>
     Если <link linkend="ini.zend.assertions">zend.assertions</link> установить значение 1,
     а <link linkend="ini.assert.exception">assert.exception</link> установить значение 1,
     то приведённый выше пример выведет:
    </para>
    <screen>
<![CDATA[
Fatal error: Uncaught CustomError: True не является false! in -:4
Stack trace:
#0 {main}
  thrown in - on line 4
]]>
    </screen>
   </example>
  </refsect2>
  <refsect2>
   <title>Оцениваемые утверждения кода (только для PHP 7)</title>

   <para>
    При использовании оцениваемых утверждений callback-функции <function>assert</function>
    могут быть особенно полезны, поскольку код, использованный для утверждения,
    передаётся callback-функции вместе с информацией о том, где было выполнено утверждение.
   </para>
   <para>
    <example>
     <title>Обработка неудачной проверки утверждения с помощью пользовательского обработчика</title>
     <programlisting role="php">
<![CDATA[
<?php
// Активируйте утверждение и отключите error_reporting
assert_options(ASSERT_ACTIVE, 1);
assert_options(ASSERT_WARNING, 0);
assert_options(ASSERT_QUIET_EVAL, 1);

// Создайте функцию-обработчик
function my_assert_handler($file, $line, $code)
{
    echo "<hr>Утверждение не выполнено:
        Файл '$file'<br />
        Строка '$line'<br />
        Код '$code'<br /><hr />";
}

// Настройте callback-функцию
assert_options(ASSERT_CALLBACK, 'my_assert_handler');

// Создайте утверждение, которое должно потерпеть неудачу
$array = [];
assert('count($array);');
?>
]]>
     </programlisting>
     &example.outputs.72;
     <screen>
<![CDATA[
Deprecated: assert(): Calling assert() with a string argument is deprecated in test.php on line 21
<hr>Утверждение не выполнено:
        Файл 'test.php'<br />
        Строка '21'<br />
        Код 'count($array);'<br /><hr />
]]>
     </screen>
     &example.outputs.71;
     <screen>
<![CDATA[
<hr>Утверждение не выполнено:
        Файл 'test.php'<br />
        Строка '21'<br />
        Код 'count($array);'<br /><hr />
]]>
     </screen>
    </example>
   </para>
   <para>
    <example>
     <title>Использование пользовательского обработчика для вывода описания</title>
     <programlisting role="php">
<![CDATA[
<?php
// Активируйте утверждение и отключите error_reporting
assert_options(ASSERT_ACTIVE, 1);
assert_options(ASSERT_WARNING, 0);
assert_options(ASSERT_QUIET_EVAL, 1);

// Создайте функцию-обработчик
function my_assert_handler($file, $line, $code, $desc = null)
{
    echo "Утверждение не выполнено в $file:$line: $code";
    if ($desc) {
        echo ": $desc";
    }
    echo "\n";
}

// Настройте callback-функцию
assert_options(ASSERT_CALLBACK, 'my_assert_handler');

// Создайте утверждение, которое должно потерпеть неудачу
assert('2 < 1');
assert('2 < 1', 'Два меньше, чем один');
?>
]]>
     </programlisting>
     &example.outputs.72;
     <screen>
<![CDATA[
Deprecated: assert(): Calling assert() with a string argument is deprecated in test.php on line 21
Утверждение не выполнено в test.php:21: 2 < 1

Deprecated: assert(): Calling assert() with a string argument is deprecated in test.php on line 22
Утверждение не выполнено в test.php:22: 2 < 1: Два меньше, чем один
]]>
     </screen>
     &example.outputs.71;
     <screen>
<![CDATA[
Утверждение не выполнено в test.php:21: 2 < 1
Утверждение не выполнено в test.php:22: 2 < 1: Два меньше, чем один
]]>
     </screen>
    </example>
   </para>
  </refsect2>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>assert_options</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
