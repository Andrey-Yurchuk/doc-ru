<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 66fffcdfbb9d97a1618b9e47f9be19a83f80e32b Maintainer: evvc Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="function.sqlsrv-prepare" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>sqlsrv_prepare</refname>
  <refpurpose>Подготавливает запрос к исполнению</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>mixed</type><methodname>sqlsrv_prepare</methodname>
   <methodparam><type>resource</type><parameter>conn</parameter></methodparam>
   <methodparam><type>string</type><parameter>sql</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>params</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>options</parameter></methodparam>
  </methodsynopsis>
  <para>
   Подготавливает запрос к исполнению. Функция идеально подходит для подготовки запроса,
   который будет выполняться несколько раз с разными значениями параметров.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>conn</parameter></term>
     <listitem>
      <para>
       Ресурс подключения, возвращаемый <function>sqlsrv_connect</function>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>sql</parameter></term>
     <listitem>
      <para>
       Строка, определяющая запрос, который нужно подготовить и выполнить.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>params</parameter></term>
     <listitem>
      <para>
       Массив, определяющий информацию о параметрах при выполнении запроса.
       Элементы массива могут быть любыми из следующих:
       <simplelist>
        <member>Строковое значение</member>
        <member>Переменная PHP</member>
        <member>Массив с такой структурой:
         array($value [, $direction [, $phpType [, $sqlType]]])</member>
       </simplelist>
       В следующей таблице описаны элементы в структуре массива выше:
      </para>
      <table>
       <title>Структура массива</title>
       <tgroup cols="2">
        <thead>
         <row>
          <entry>Элемент</entry>
          <entry>Описание</entry>
         </row>
        </thead>
        <tbody>
         <row>
          <entry>$value</entry>
          <entry>
           Строковое значение, переменная PHP или переменная PHP, переданная по ссылке.
          </entry>
         </row>
         <row>
          <entry>$direction (необязательный)</entry>
          <entry>
           Одна из следующих констант SQLSRV, используемых для указания направления параметра:
           SQLSRV_PARAM_IN, SQLSRV_PARAM_OUT, SQLSRV_PARAM_INOUT.
           Значение по умолчанию - SQLSRV_PARAM_IN.
          </entry>
         </row>
         <row>
          <entry>$phpType (необязательный)</entry>
          <entry>
           Константа SQLSRV_PHPTYPE_*, указывающая тип данных PHP возвращаемого значения.
          </entry>
         </row>
         <row>
          <entry>$sqlType (необязательный)</entry>
          <entry>
           Константа SQLSRV_SQLTYPE_*, указывающая тип данных SQL Server входного значения.
          </entry>
         </row>
        </tbody>
       </tgroup>
      </table>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>options</parameter></term>
     <listitem>
      <para>
       Массив, определяющий параметры свойств запроса.
       Поддерживаемые ключи описаны в следующей таблице:
      </para>
      <table>
       <title>Опции запроса</title>
       <tgroup cols="3">
        <thead>
         <row>
          <entry>Ключ</entry>
          <entry>Значения</entry>
          <entry>Описание</entry>
         </row>
        </thead>
        <tbody>
         <row>
          <entry>QueryTimeout</entry>
          <entry>Положительное целочисленное значение.</entry>
          <entry>
           Устанавливает время ожидания запроса в секундах.
           По умолчанию драйвер будет ожидать результатов бесконечно.
          </entry>
         </row>
         <row>
          <entry>SendStreamParamsAtExec</entry>
          <entry>&true; или &false; (по умолчанию &true;)</entry>
          <entry>
           Настраивает драйвер для отправки всех данных потока при выполнении (&true;) или для отправки данных потока частями (&false;).
           По умолчанию установлено значение &true;.
           Для получения дополнительной информации смотрите <function>sqlsrv_send_stream_data</function>.
          </entry>
         </row>
         <row>
          <entry>Scrollable</entry>
          <entry>SQLSRV_CURSOR_FORWARD, SQLSRV_CURSOR_STATIC, SQLSRV_CURSOR_DYNAMIC,
           или SQLSRV_CURSOR_KEYSET</entry>
          <entry>Смотрите <link xlink:href="&url.sqlsrv.specify.cursortype;">Указание типа курсора и выбор строк</link>
           в документации Microsoft SQLSRV.</entry>
         </row>
        </tbody>
       </tgroup>
      </table>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Возвращает ресурс оператора в случае успешного выполнения или &false; в случае возникновения ошибки.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Пример использования <function>sqlsrv_prepare</function></title>
    <para>
     В этом примере показано, как подготовить оператор с помощью <function>sqlsrv_prepare</function>
     и повторно выполнить его несколько раз (с разными значениями параметров) с помощью <function>sqlsrv_execute</function>.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$serverName = "serverName\sqlexpress";
$connectionInfo = array( "Database"=>"dbName", "UID"=>"username", "PWD"=>"password");
$conn = sqlsrv_connect( $serverName, $connectionInfo);
if( $conn === false) {
    die( print_r( sqlsrv_errors(), true));
}

$sql = "UPDATE Table_1
        SET OrderQty = ?
        WHERE SalesOrderID = ?";

// Инициализация параметров и подготовка запроса.
// Переменные $qty и $id связаны с оператором $stmt.
$qty = 0; $id = 0;
$stmt = sqlsrv_prepare( $conn, $sql, array( &$qty, &$id));
if( !$stmt ) {
    die( print_r( sqlsrv_errors(), true));
}

// Настройка информации SalesOrderDetailID и OrderQty.
// Этот массив сопоставляет идентификатор заказа с количеством заказа в парах ключ => значение.
$orders = array( 1=>10, 2=>20, 3=>30);

// Выполнение запроса для каждого заказа.
foreach( $orders as $id => $qty) {
    // Поскольку $id и $qty привязаны к $stmt1,
    // их обновлённые значения используются при каждом выполнении запроса.
    if( sqlsrv_execute( $stmt ) === false ) {
          die( print_r( sqlsrv_errors(), true));
    }
}
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <para>
   Когда вы подготавливаете запрос, который использует переменные в качестве параметров,
   переменные привязываются к оператору. Это означает, что если вы обновите значения переменных,
   в следующий раз, когда вы выполните запрос, он будет работать с обновлёнными значениями параметров.
   Для операторов, которые вы планируете выполнить только один раз, используйте <function>sqlsrv_query</function>.
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>sqlsrv_execute</function></member>
    <member><function>sqlsrv_query</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
