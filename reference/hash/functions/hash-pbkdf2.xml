<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 5bc68add3da3cd18c40f851e944b15095d3a26aa Maintainer: rjhdby Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="function.hash-pbkdf2" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>hash_pbkdf2</refname>
  <refpurpose>Генерирует PBKDF2-ключ на основе исходного пароля</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>hash_pbkdf2</methodname>
   <methodparam><type>string</type><parameter>algo</parameter></methodparam>
   <methodparam><modifier role="attribute">#[\SensitiveParameter]</modifier><type>string</type><parameter>password</parameter></methodparam>
   <methodparam><type>string</type><parameter>salt</parameter></methodparam>
   <methodparam><type>int</type><parameter>iterations</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>length</parameter><initializer>0</initializer></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>binary</parameter><initializer>&false;</initializer></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>options</parameter><initializer>[]</initializer></methodparam>
  </methodsynopsis>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>algo</parameter></term>
     <listitem>
      <para>
       Название выбранного алгоритма хеширования (то есть md5, sha256, haval160,4 и т. д.).
       Список поддерживаемых алгоритмов даёт описание функции <function>hash_algos</function>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>password</parameter></term>
     <listitem>
      <para>
       Пароль для деривации.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>salt</parameter></term>
     <listitem>
      <para>
       Соль для формирования ключа. Требуется сгенерировать случайное значение.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>iterations</parameter></term>
     <listitem>
      <para>
       Количество внутренних итераций для преобразования исходного пароля в хеш-ключ.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>length</parameter></term>
     <listitem>
      <para>
       Длина строки вывода. Если параметр
       <parameter>binary</parameter> задали как &true;, значение этого параметра
       соответствует длине ключа в байтах, если для параметра
       <parameter>binary</parameter> установили значение &false; —
       соответствует удвоенной длине ключа в байтах, поскольку каждый
       байт ключа возвращается в виде двух шестнадцатеричных символов.
      </para>
      <para>
       Если задали значение <literal>0</literal>, функция вернёт весь вывод
       заданного алгоритма.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>binary</parameter></term>
     <listitem>
      <para>
       Если значение параметра равно &true;, выводятся необработанные двоичные данные.
       Если &false; — выводятся шестнадцатеричные строчные буквы в нижнем регистре.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>options</parameter></term>
     <listitem>
      <para>
       Массив опций для алгоритмов хеширования.
       Пока вариантами функций хеширования MurmurHash поддерживается только параметр <literal>"seed"</literal>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues"><!-- {{{ -->
  &reftitle.returnvalues;
  <para>
   Функция возвращает строку, которая содержит сформированный ключ в виде
   строки шестнадцатеричных чисел в нижнем регистре, если только для параметра
   <parameter>binary</parameter> не установили значение &true;,
   тогда возвращаются необработанные двоичные данные.
  </para>
 </refsect1><!-- }}} -->

 <refsect1 role="errors"><!-- {{{ -->
  &reftitle.errors;
  <para>
   Функция выбрасывает исключение <classname>ValueError</classname>,
   если алгоритм неизвестен, параметр
   <parameter>iterations</parameter> меньше или равен
   <literal>0</literal>, параметр <parameter>length</parameter>
   меньше <literal>0</literal> или параметр <parameter>salt</parameter>
   чрезмерно длинный (больше значения выражения <constant>INT_MAX</constant><literal> - 4</literal>).
  </para>
 </refsect1><!-- }}} -->

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>8.0.0</entry>
       <entry>
        Теперь выбрасывается исключение <classname>ValueError</classname>, если возникла ошибка;
        раньше функция возвращала &false; и выдавала ошибку уровня <constant>E_WARNING</constant>.
       </entry>
      </row>
      <row>
       <entry>7.2.0</entry>
       <entry>
        Запретили некриптографические хеш-функции (adler32, crc32, crc32b, fnv132, fnv1a32, fnv164, fnv1a64, joaat).
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Пример базового использования функции <function>hash_pbkdf2</function></title>
    <programlisting role="php">
<![CDATA[
<?php

$password = "password";
$iterations = 600000;

// Создаём криптографически безопасную случайную соль функцией random_bytes()
$salt = random_bytes(16);

$hash = hash_pbkdf2("sha256", $password, $salt, $iterations, 20);
var_dump($hash);

// Для необработанного двоичного файла параметр $length требуется уменьшить вдвое, чтобы получить аналогичные результаты
$hash = hash_pbkdf2("sha256", $password, $salt, $iterations, 10, true);
var_dump(bin2hex($hash));

?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
string(20) "120fb6cffcf8b32c43e7"
string(20) "120fb6cffcf8b32c43e7"
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <caution>
   <para>
    Метод PBKDF2 может использовать для хеширования паролей в
    целях хранения. Однако следует отметить, что функция <function>password_hash</function>
    или функция <function>crypt</function> с типом хеша <constant>CRYPT_BLOWFISH</constant>
    лучше для хранения паролей.
   </para>
  </caution>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>password_hash</function></member>
    <member><function>hash_hkdf</function></member>
    <member><function>sodium_crypto_pwhash</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
