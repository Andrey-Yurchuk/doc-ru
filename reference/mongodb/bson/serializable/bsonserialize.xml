<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: a5eca06ae7725b4c35eefecbb0d722a3e198ff21 Maintainer: sergey Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="mongodb-bson-serializable.bsonserialize" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>MongoDB\BSON\Serializable::bsonSerialize</refname>
  <refpurpose>Сериализует данные как BSON-массив или BSON-документ</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>abstract</modifier> <modifier>public</modifier> <type class="union"><type>array</type><type>stdClass</type><type>MongoDB\BSON\Document</type><type>MongoDB\BSON\PackedArray</type></type><methodname>MongoDB\BSON\Serializable::bsonSerialize</methodname>
   <void />
  </methodsynopsis>
  <para>
   Метод вызывается во время сериализации объекта в BSON-формат. По условиям интерфейса
   метод возвращает массив (<type>array</type>), экземпляр класса <classname>stdClass</classname>,
   <classname>MongoDB\BSON\Document</classname>
   или <classname>MongoDB\BSON\PackedArray</classname>.
  </para>
  <para>
   Корневые документы наподобие объектов класса, который реализует
   интерфейс <interfacename>MongoDB\BSON\Serializable</interfacename> и который передали
   в метод <methodname>MongoDB\BSON\Document::fromPHP</methodname>, сериализуются
   как BSON-документ. Для значений полей ассоциативные массивы
   и экземпляры класса <classname>stdClass</classname> метод сериализует как BSON-документ,
   а последовательные массивы — массивы с последовательными числовыми индексами, которые начинаются
   с <literal>0</literal> — как BSON-массив.
  </para>
  <para>
   При возврате данных для корневого BSON-документа
   пользователям рекомендуют включать в данные возврата свойство <property>_id</property>.
   Часто идентификатор инициализируют в конструкторе при инициализации объекта
   <classname>MongoDB\BSON\ObjectId</classname>, который включают в данные возврата как значение идентификатора.
   В отсутствие свойства <property>_id</property> модуль сгенерирует
   значение <classname>MongoDB\BSON\ObjectId</classname> для операций вставки,
   а сервер для операций обновления или вставки.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  &no.function.parameters;
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Метод возвращает массив (<type>array</type>), объект класса
   <classname>stdClass</classname>, <classname>MongoDB\BSON\Document</classname>
   или <classname>MongoDB\BSON\PackedArray</classname>, который сериализует
   как BSON-массив или BSON-документ.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>PECL-модуль mongodb 1.17.0</entry>
       <entry>
        <para>
         Изменили тип возврата <type class="union"><type>array</type><type>object</type></type>.
         Вместо типа <type>object</type> теперь возвращается тип <classname>stdClass</classname>.
         Классы, которые реализуют этот интерфейс, требуется изменить, чтобы методы больше
         не объявляли тип возврата <type>object</type>. Поскольку тип возврата
         объявляется заранее, в PHP 8.1 или более новых версиях при несовпадении типов возврата
         PHP выдаёт предупреждение об устаревании.
        </para>
        <para>
         В дополнение к изменениям, которые описал предыдущий параграф, теперь модуль также поддерживает
         возврат экземпляров классов <classname>MongoDB\BSON\Document</classname>
         и <classname>MongoDB\BSON\PackedArray</classname>. Обратите внимание,
         экземпляры класса <classname>MongoDB\BSON\PackedArray</classname>, которые возвращает метод,
         при сохранении в качестве корневых документов автоматически преобразовываются в объекты,
         а при сохранении в виде значения встроенного поля — в массивы.
        </para>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>


 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>
    Пример возврата методом <function>MongoDB\BSON\Serializable::bsonSerialize</function>
    ассоциативного массива для корневого документа
   </title>
   <programlisting role="php">
<![CDATA[
<?php

class MyDocument implements MongoDB\BSON\Serializable
{
    private $id;

    function __construct()
    {
        $this->id = new MongoDB\BSON\ObjectId;
    }

    function bsonSerialize(): array
    {
        return ['_id' => $this->id, 'foo' => 'bar'];
    }
}

echo MongoDB\BSON\Document::fromPHP(new MyDocument())->toRelaxedExtendedJSON(), "\n";

?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
{ "_id" : { "$oid" : "56cccdcada14d8755a58c591" }, "foo" : "bar" }
]]>
   </screen>
  </example>

  <example>
   <title>
    Пример возврата методом <function>MongoDB\BSON\Serializable::bsonSerialize</function>
    последовательного массива для корневого документа
   </title>
   <programlisting role="php">
<![CDATA[
<?php

class MyArray implements MongoDB\BSON\Serializable
{
    function bsonSerialize(): array
    {
        return [1, 2, 3];
    }
}

echo MongoDB\BSON\Document::fromPHP(new MyArray())->toRelaxedExtendedJSON(), "\n";

?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
{ "0" : 1, "1" : 2, "2" : 3 }
]]>
   </screen>
  </example>

  <example>
   <title>
    Пример возврата методом <function>MongoDB\BSON\Serializable::bsonSerialize</function>
    ассоциативного массива для поля документа
   </title>
   <programlisting role="php">
<![CDATA[
<?php

class MyDocument implements MongoDB\BSON\Serializable
{
    function bsonSerialize(): array
    {
        return ['foo' => 'bar'];
    }
}

$value = ['document' => new MyDocument];
echo MongoDB\BSON\Document::fromPHP($value)->toRelaxedExtendedJSON(), "\n";

?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
{ "document" : { "foo" : "bar" } }
]]>
   </screen>
  </example>

  <example>
   <title>
    Пример возврата методом <function>MongoDB\BSON\Serializable::bsonSerialize</function>
    последовательного массива для поля документа
   </title>
   <programlisting role="php">
<![CDATA[
<?php

class MyArray implements MongoDB\BSON\Serializable
{
    function bsonSerialize(): array
    {
        return [1, 2, 3];
    }
}

$value = ['array' => new MyArray];
echo MongoDB\BSON\Document::fromPHP($value)->toRelaxedExtendedJSON(), "\n";

?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
{ "array" : [ 1, 2, 3 ] }
]]>
   </screen>
  </example>
 </refsect1>


 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member><function>MongoDB\BSON\Unserializable::bsonUnserialize</function></member>
   <member><interfacename>MongoDB\BSON\Persistable</interfacename></member>
   <member><xref linkend="mongodb.persistence"/></member>
  </simplelist>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
