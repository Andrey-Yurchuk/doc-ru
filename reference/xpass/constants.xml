<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 505ee6ad7881f1d6999752a20008eb9134e0fdd8 Maintainer: malferov Status: ready -->
<!-- Reviewed: no -->
<appendix xml:id="xpass.constants" xmlns="http://docbook.org/ns/docbook">
 &reftitle.constants;
 &extension.constants;

 <simpara>
  Модуль Xpass предоставляет набор констант:
  константы семейства <constant>CRYPT_PREFIX_<replaceable>*</replaceable></constant>,
  которые обозначают методы хеширования для параметра prefix функции <function>crypt_gensalt</function>,
  константы семейства <constant>CRYPT_SALT_<replaceable>*</replaceable></constant> c кодами ошибок,
  которые возвращает функция <function>crypt_checksalt</function>, и константы семейства
  <constant>PASSWORD_<replaceable>*</replaceable></constant>, которые обозначают
  алгоритмы хеширования паролей для параметра algo функции <function>password_hash</function>.
 </simpara>

 <variablelist xml:id="xpass.constants.algo">
  <title>Методы хеширования</title>
  <varlistentry xml:id="constant.crypt-prefix-std-des">
   <term>
    <constant>CRYPT_PREFIX_STD_DES</constant>
    (<type>string</type>)
   </term>
   <listitem>
    <simpara>
     Оригинальный метод хеширования из ОС Unix V7, который работает на основе блочного шифра DES.
     Парольную фразу, которую захешировали методом DES, возможно раскрыть,
     поскольку алгоритм нетребователен к ресурсам оборудования. Простота перебора DES-хешей объясняется тем,
     что метод выдаёт только <literal>4096</literal> возможных солей и 2**56 парольных фраз
     и обрезает до 8 символов.
     Из-за слабости DES-хешей шифром пользуются только при поддержке старых операционных систем, которые не поддерживают
     никаких других алгоритмов генерации хешей.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.crypt-prefix-ext-des">
   <term>
    <constant>CRYPT_PREFIX_EXT_DES</constant>
    (<type>string</type>)
   </term>
   <listitem>
    <simpara>
     Расширение традиционного шифра DES, которое устраняет ограничение длины,
     увеличивает размер соли и разрешает настраивать цену обработки хеша.
     Метод берёт начало в ОС BSD/OS компании BSDI и за счёт библиотеки FreeSec за авторством
     Дэвида Баррена (David Burren) также доступен по крайней мере в системах NetBSD, OpenBSD и FreeBSD.
     Качество этого метода превосходит традиционные алгоритмы DES и bigcrypt,
     но алгоритмом по-прежнему стараются не пользоваться для новых хешей.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.crypt-prefix-md5">
   <term>
    <constant>CRYPT_PREFIX_MD5</constant>
    (<type>string</type>)
   </term>
   <listitem>
    <simpara>
     Хеш работает на основе алгоритма MD5, который первоначально разработал Пол-Хеннинг Камп (Poul-Henning Kamp) для ОС FreeBSD.
     Алгоритм поддерживается большей частью свободных Unix-систем и более новыми версиями ОС Solaris.
     Этот хеш не такой слабый, как хеши на основе алгоритма DES,
     но MD5 настолько дёшев для перебора на современном оборудовании, что им лучше не пользоваться для генерации новых хешей.
     Цена обработки не настраивается.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.crypt-prefix-blowfish">
   <term>
    <constant>CRYPT_PREFIX_BLOWFISH</constant>
    (<type>string</type>)
   </term>
   <listitem>
    <simpara>
     Хеш работает на основе блочного шифра Blowfish, который модифицировали для генерации сверхдорогого расписания ключей.
     Алгоритм первоначально разработали Нильс Провос (Niels Provos) и Дэвид Мазьер (David Mazieres)
     для ОС OpenBSD. Алгоритм также поддерживается в последних версиях ОС FreeBSD и NetBSD,
     в Solaris 10 и новее и в ряде дистрибутивов GNU/*/Linux.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.crypt-prefix-sha256">
   <term>
    <constant>CRYPT_PREFIX_SHA256</constant>
    (<type>string</type>)
   </term>
   <listitem>
    <simpara>
     Хеш работает на основе алгоритма SHA-2 с 256-битным выводом, который первоначально разработал
     Ульрих Дреппер (Ulrich Drepper) для GNU-библиотеки libc. Алгоритм поддерживается в ОС Linux,
     но не получил распространения в других местах. Алгоритм допустим для генерации новых хешей.
     Значение параметра цены обработки по умолчанию равняется <literal>5000</literal>,
     что чрезвычайно мало для современного оборудования.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.crypt-prefix-sha512">
   <term>
    <constant>CRYPT_PREFIX_SHA512</constant>
    (<type>string</type>)
   </term>
   <listitem>
    <simpara>
     Хеш работает на основе алгоритма SHA-2 с 512-битным выводом, который первоначально разработал
     Ульрих Дреппер (Ulrich Drepper) для GNU-библиотеки libc. Алгоритм поддерживается в ОС Linux,
     но не получил распространения в других местах. Алгоритм допустим для генерации новых хешей.
     Значение параметра цены обработки по умолчанию равняется <literal>5000</literal>,
     что чрезвычайно мало для современного оборудования.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.crypt-prefix-scrypt">
   <term>
    <constant>CRYPT_PREFIX_SCRYPT</constant>
    (<type>string</type>)
   </term>
   <listitem>
    <simpara>
     Scrypt — функция выведения ключа на основе пароля, которую создал Колин Персиваль (Colin Percival),
     первоначально для онлайн-сервиса резервного копирования Tarsnap.
     Алгоритм разработали, чтобы сделать дорогостоящим выполнение масштабных атак
     на пользовательское оборудование, требуя больших объёмов памяти.
     В 2016 году совет IETF опубликовал алгоритм scrypt как стандарт RFC 7914.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.crypt-prefix-gost-yescrypt">
   <term>
    <constant>CRYPT_PREFIX_GOST_YESCRYPT</constant>
    (<type>string</type>)
   </term>
   <listitem>
    <simpara>
     Алгоритм Gost-yescrypt использует данные вывода функции yescrypt как входное сообщение для HMAC-кода
     с хеш-функцией межгосударственного криптографического стандарта ГОСТ Р 34.11-2012 — Streebog с 256-битным дайджестом.
     Поэтому криптографические свойства функции yescrypt заменяются свойствами хеш-функции ГОСТа.
     Этот метод хеширования полезен в приложениях, которым требуется современное хеширование парольной фразы,
     но которые вынуждены полагаться на алгоритмы ГОСТа.
     Совет IETF опубликовал хеш-функцию «Стрибог», которую описывает ГОСТ Р 34.11-2012, как стандарт RFC 6986.
     Алгоритм допустим для генерации новых хешей, если требуется.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.crypt-prefix-yescrypt">
   <term>
    <constant>CRYPT_PREFIX_YESCRYPT</constant>
    (<type>string</type>)
   </term>
   <listitem>
    <simpara>
     Yescrypt — масштабируемая схема хеширования парольной фразы, разработка специалиста по безопасности из России
     Александра Песляка по прозвищу Solar Designer, которая основана на функции scrypt Колина Персиваля.
     Хотя стойкость функции yescrypt к атакам подбора пароля обусловлена её алгоритмом,
     криптографическую безопасность функции гарантирует алгоритм SHA-256 на внешнем уровне.
     Хеш-функцию SHA-256 опубликовал институт NIST в стандарте FIPS PUB 180-2
     и его следующих редакциях наподобие FIPS PUB 180-4, и совет IETF как стандарт RFC 4634
     и впоследствии стандарт RFC 6234.
     Алгоритм рекомендуют для генерации новых хешей.
    </simpara>
   </listitem>
  </varlistentry>
 </variablelist>

 <variablelist xml:id="xpass.constants.error">
  <title>Error codes</title>
  <varlistentry xml:id="constant.crypt-salt-ok">
   <term>
    <constant>CRYPT_SALT_OK</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Ошибки не возникали.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.crypt-salt-invalid">
   <term>
    <constant>CRYPT_SALT_INVALID</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Неизвестный метод хеширования или недопустимые параметры.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.crypt-salt-method-disabled">
   <term>
    <constant>CRYPT_SALT_METHOD_DISABLED</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Метод хеширования запретили.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.crypt-salt-method-legacy">
   <term>
    <constant>CRYPT_SALT_METHOD_LEGACY</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Метод хеширования ненадёжен.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.crypt-salt-too-cheap">
   <term>
    <constant>CRYPT_SALT_TOO_CHEAP</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Чрезмерно низкая цена обработки.
    </simpara>
   </listitem>
  </varlistentry>
 </variablelist>

 <variablelist xml:id="xpass.constants.password">
  <title>Парольные алгоритмы</title>
  <varlistentry xml:id="constant.password-sha512">
   <term>
    <constant>PASSWORD_SHA512</constant>
    (<type>string</type>)
   </term>
   <listitem>
    <simpara>
     Константа <constant>PASSWORD_SHA512</constant> помогает создавать новые хеши
     паролей по алгоритму <constant>CRYPT_SHA512</constant>.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.password-yescrypt">
   <term>
    <constant>PASSWORD_YESCRYPT</constant>
    (<type>string</type>)
   </term>
   <listitem>
    <simpara>
     Константа <constant>PASSWORD_YESCRYPT</constant> помогает создавать новые хеши
     паролей по алгоритму <constant>CRYPT_YESCRYPT</constant>.
    </simpara>
   </listitem>
  </varlistentry>
 </variablelist>
</appendix>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
