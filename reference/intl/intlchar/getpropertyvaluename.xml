<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 1976eae0d815797af97a1e16c5cd90ffc2868395 Maintainer: rjhdby Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="intlchar.getpropertyvaluename" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>IntlChar::getPropertyValueName</refname>
  <refpurpose>Получает значения свойства Юникода</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis role="IntlChar">
   <modifier>public</modifier> <modifier>static</modifier> <type class="union"><type>string</type><type>false</type></type><methodname>IntlChar::getPropertyValueName</methodname>
   <methodparam><type>int</type><parameter>property</parameter></methodparam>
   <methodparam><type>int</type><parameter>value</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>type</parameter><initializer>IntlChar::LONG_PROPERTY_NAME</initializer></methodparam>
  </methodsynopsis>
  <para>
   Метод возвращает значение свойства Юникода, как значение указали
   в файле базы данных Юникода — PropertyValueAliases.txt.
  </para>
  <note>
   <para>
    Отдельные названия значений свойств из файла PropertyValueAliases.txt извлекаются только
    через флаг <constant>IntlChar::PROPERTY_GENERAL_CATEGORY_MASK</constant>,
    а не <constant>IntlChar::PROPERTY_GENERAL_CATEGORY</constant>.
    К таким значениям относятся следующие категории символов (список приводит короткое и длинное название
    категории, а также сокращённое описание):
    <simplelist>
     <member>
      "C" / "Other" — прочие символы (управлящие, форматирования, суррогаты, частные и зарезервированные неназначенные
      кодовые точки и несимвольные коды)
     </member>
     <member>"L" / "Letter" — буквы</member>
     <member>
      "LC" / "Cased_Letter" — категория регистровых букв, которая объединяет категории:
      заглавных букв — Lu, строчных букв — Ll и категорию букв титульного регистра — Lt,
      в которую входят диграфы — символы, которые состоят из двух букв, которые закодировали
      как один символ, первый из которых — заглавный, например U+01F2 LATIN CAPITAL LETTER D WITH SMALL LETTER Z
     </member>
     <member>"M" / "Mark" — метки</member>
     <member>"N" / "Number" — числа</member>
     <member>"P" / "Punctuation" — символы пунктуации</member>
     <member>"S" / "Symbol" — символы (математические, валют, диакритические и прочие)</member>
     <member> "Z" / "Separator" — символы-разделители</member>
    </simplelist>
   </para>
  </note>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>property</parameter></term>
    <listitem>
     &intl.property.parameter;
     <para>
      Метод вернёт &false;, если свойство выходит за пределы допустимого диапазона
      или метод не работает с заданным значением.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>value</parameter></term>
    <listitem>
     <para>
      Селектор для значения свойства. Метод вернёт &false;, если значение выходит за пределы допустимого диапазона.
     </para>
     <para>
      Как правило, допустимый диапазон значений лежит в пределах от <literal>0</literal> до некоторого максимума.
      Отдельные значения составляют ряд исключений:
      <simplelist>
       <member>
        Значения <constant>IntlChar::PROPERTY_BLOCK</constant> начинаются с ненулевого значения
        <constant>IntlChar::BLOCK_CODE_BASIC_LATIN</constant>
       </member>
       <member>
        Значения <constant>IntlChar::PROPERTY_CANONICAL_COMBINING_CLASS</constant> не непрерывны
        и лежат в диапазоне 0..240.
       </member>
      </simplelist>
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>type</parameter></term>
    <listitem>
     <para>
      Селектор, который определяет, какое имя требуется получить.
      Метод вернёт &false; для селекторов вне допустимого диапазона.
     </para>
     <para>
      Длинное имя есть у каждого значения. У большей части значений есть короткие имена, но не у каждого.
      Юникод разрешает дополнительные имена; если значению присвоили короткое название,
      метод вернёт значение <constant>IntlChar::LONG_PROPERTY_NAME</constant> с добавлением 1, 2 и т. д.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Метод возвращает имя или &false;, если значение свойства <parameter>property</parameter>
   или типа имени <parameter>type</parameter> выходит за рамки допустимого диапазона.
   Метод возвращает &null;, если возникла ошибка.
  </para>
  <para>
   Если тип названия <parameter>type</parameter> возвращает &false;, все бо́льшие значения
   типа названия <parameter>type</parameter> также вернут &false;, с одним исключением: если
   для <constant>IntlChar::SHORT_PROPERTY_NAME</constant> вернётся &false;,
   то <constant>IntlChar::LONG_PROPERTY_NAME</constant> и выше всё ещё смогут вернуть значения,
   которые будут отличаться от &false;.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>&intl.property.example;</title>
   <programlisting role="php">
<![CDATA[
<?php

var_dump(IntlChar::getPropertyValueName(IntlChar::PROPERTY_BLOCK, IntlChar::BLOCK_CODE_GREEK));
var_dump(IntlChar::getPropertyValueName(IntlChar::PROPERTY_BLOCK, IntlChar::BLOCK_CODE_GREEK, IntlChar::SHORT_PROPERTY_NAME));
var_dump(IntlChar::getPropertyValueName(IntlChar::PROPERTY_BLOCK, IntlChar::BLOCK_CODE_GREEK, IntlChar::LONG_PROPERTY_NAME));
var_dump(IntlChar::getPropertyValueName(IntlChar::PROPERTY_BLOCK, IntlChar::BLOCK_CODE_GREEK, IntlChar::LONG_PROPERTY_NAME + 1));

?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
string(16) "Greek_And_Coptic"
string(5) "Greek"
string(16) "Greek_And_Coptic"
bool(false)
]]>
   </screen>
  </example>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
