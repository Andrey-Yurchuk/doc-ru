<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: d715365c098db000eaf7dcd987ee6093f6e83091 Maintainer: sergey Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="function.json-validate" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>json_validate</refname>
  <refpurpose>Проверяет, содержит ли строка допустимые данные в JSON-формате</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>json_validate</methodname>
   <methodparam><type>string</type><parameter>json</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>depth</parameter><initializer>512</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>flags</parameter><initializer>0</initializer></methodparam>
  </methodsynopsis>
  <para>
   Функция проверяет, соответствует ли синтаксис входной строки (&string;) формату JSON, и возвращает результат.
   Если функция <function>json_validate</function> вернёт &true;, функция <function>json_decode</function>
   успешно декодирует входную строку при передаче тех же аргументов
   <parameter>depth</parameter> и <parameter>flags</parameter>.
  </para>
  <para>
   Функции <function>json_last_error</function> и <function>json_last_error_msg</function>
   укажут причину, если функция <function>json_validate</function> вернёт &false;.
  </para>
  <para>
   Функция <function>json_validate</function> использует меньше памяти,
   чем функция <function>json_decode</function>, поскольку
   функции <function>json_validate</function> не нужно декодировать полезную нагрузку JSON
   или создавать структуру массива или объекта, которая содержит полезную нагрузку.
  </para>
  <caution>
   <para>
    Вызов функции <function>json_validate</function> непосредственно
    перед функцией <function>json_decode</function> приведёт к ненужному двойному
    разбору строки, поскольку функция <function>json_decode</function> неявно
    выполняет такую проверку при декодировании.
   </para>
   <para>
    Функцию <function>json_validate</function> вызывают только в случае,
    когда данные декодирования полезной нагрузки JSON не нужны немедленно,
    и требуется знать, содержит ли строка допустимый JSON.
   </para>
  </caution>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>json</parameter></term>
     <listitem>
      <para>
       Строка для проверки.
      </para>
      <para>
       Функция работает только со строками в кодировке UTF-8.
      </para>
      &json.implementation.superset;
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>depth</parameter></term>
     <listitem>
      <para>
       Максимальная глубина вложенности структуры,
       которую будет декодировать функция.
       Значение должно быть больше <literal>0</literal> и меньше или равно <literal>2 147 483 647</literal>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>flags</parameter></term>
     <listitem>
      <para>
       Пока принимается только
       константа <constant>JSON_INVALID_UTF8_IGNORE</constant>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Функция возвращает &true;, если входная строка — синтаксически допустимый JSON,
   иначе &false;.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Выбрасывается исключение <classname>ValueError</classname>,
   если значение параметра <parameter>depth</parameter> выходит за пределы допустимого диапазона.
  </para>
  <para>
   Если значение параметра <parameter>flags</parameter> — недопустимый флаг,
   выбрасывается исключение <classname>ValueError</classname>.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Пример использования функции <function>json_validate</function></title>
    <programlisting role="php">
<![CDATA[
<?php

var_dump(json_validate('{ "test": { "foo": "bar" } }'));
var_dump(json_validate('{ "": "": "" } }'));

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
bool(true)
bool(false)
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>json_decode</function></member>
    <member><function>json_last_error</function></member>
    <member><function>json_last_error_msg</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
