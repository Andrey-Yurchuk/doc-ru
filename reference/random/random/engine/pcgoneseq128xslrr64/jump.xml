<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 826073522514072830b63bee2b6135dc675ea45d Maintainer: sergey Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="random-engine-pcgoneseq128xslrr64.jump" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>Random\Engine\PcgOneseq128XslRr64::jump</refname>
  <refpurpose>Эффективное перемещение движка вперёд на несколько шагов</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis role="Random\\Engine\\PcgOneseq128XslRr64">
   <modifier>public</modifier> <type>void</type><methodname>Random\Engine\PcgOneseq128XslRr64::jump</methodname>
   <methodparam><type>int</type><parameter>advance</parameter></methodparam>
  </methodsynopsis>
  <para>
   Перемещает состояние алгоритма вперёд на количество шагов, заданное параметром <parameter>advance</parameter>,
   как если бы функция <function>Random\Engine\PcgOneseq128XslRr64::generate</function> была вызвана столько раз.
  </para>

 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>advance</parameter></term>
    <listitem>
     <para>
      Количество шагов для продвижения вперёд; должно быть <literal>0</literal> или больше.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.void;
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <itemizedlist>
   <listitem>
    <simpara>
     Если параметр <parameter>advance</parameter> меньше <literal>0</literal>,
     будет выброшено исключение <classname>ValueError</classname>.
    </simpara>
   </listitem>
  </itemizedlist>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Пример использования <function>Random\Engine\PcgOneseq128XslRr64::jump</function></title>
   <programlisting role="php">
<![CDATA[
<?php
$a = new \Random\Engine\PcgOneseq128XslRr64(0);
$b = clone $a;

for ($i = 0; $i < 1_000; $i++) {
    $a->generate();
}
$b->jump(1_000);

echo "A: ", bin2hex($a->generate()), "\n";
echo "B: ", bin2hex($b->generate()), "\n";
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
A: e6d0d5813913a424
B: e6d0d5813913a424
]]>
   </screen>
  </example>
  <example>
   <title>Методы Randomizer могут вызывать движок более одного раза</title>
   <programlisting role="php">
<![CDATA[
<?php
$a = new \Random\Randomizer(new \Random\Engine\PcgOneseq128XslRr64(42659));
$b = new \Random\Randomizer(clone $a->engine);

$a->getInt(1, 1572864); // Выполняет два вызова generate().
$a->getInt(1, 1572864);

$b->engine->jump(2);

// Потому что первый вызов ->getInt() вызвал ->generate() дважды
// движки не совпадают после выполнения ->jump(2).
echo "A: ", bin2hex($a->engine->generate()), "\n";
echo "B: ", bin2hex($b->engine->generate()), "\n";

// Теперь движок B соответствует движку A.
echo "B: ", bin2hex($b->engine->generate()), "\n";
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
A: 1e9f3107d56653d0
B: a156c0086dd79d44
B: 1e9f3107d56653d0
]]>
   </screen>
  </example>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
