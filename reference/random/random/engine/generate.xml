<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 43756e54fb34ece9b83559ccdde98864b9c3fb5c Maintainer: sergey Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="random-engine.generate" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>Random\Engine::generate</refname>
  <refpurpose>Создаёт случайную последовательность</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis role="Random\\Engine">
   <modifier>public</modifier> <type>string</type><methodname>Random\Engine::generate</methodname>
   <void/>
  </methodsynopsis>
  <para>
   Возвращает случайную последовательность и передвигает состояние алгоритма на один шаг.
  </para>
  <para>
   Случайная последовательность представлена двоичной строкой, содержащей случайные байты.
   Такое представление позволяет однозначно интерпретировать случайные биты, генерируемые алгоритмом,
   например, для адаптации различных размеров вывода, используемых различными алгоритмами.
  </para>
  <para>
   Алгоритмы, которые изначально оперируют целыми значениями, должны возвращать
   целое число в порядке little-endian байтов, например, используя функцию <function>pack</function>
   с кодом формата <literal>P</literal>. Высокоуровневый интерфейс, предоставляемый классом <classname>Random\Randomizer</classname>,
   будет интерпретировать возвращаемые случайные байты как целые числа без знака с малым порядком возрастания,
   если требуется числовое представление.
  </para>
  <para>
   Настоятельно рекомендуется, чтобы каждый бит возвращаемой строки был выбран равномерно и независимо,
   поскольку некоторые приложения требуют для корректной работы случайности на уровне битов.
   Например, линейные конгруэнтные генераторы часто генерируют менее качественную случайную последовательность
   для младших битов возвращаемого целого значения и поэтому не подходят для приложений,
   требующих случайной последовательности на уровне битов.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  &no.function.parameters;
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>

  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Пример использования <function>Random\Engine::generate</function></title>
   <programlisting role="php">
<![CDATA[
<?php
/**
 * Реализует линейный конгруэнтный генератор с модулем 65536,
 * множителем 61 и инкрементом 17, возвращающий 8-битное целое число.
 *
 * Примечание: Движок предназначен только для демонстрационных целей.
 *       Линейные конгруэнтные генераторы обычно генерируют случайность низкого
 *       качества, а данная конкретная реализация имеет
 *       очень короткий 16-битный период, который не подходит практически
 *       ни для одного реального случая использования.
 */
final class LinearCongruentialGenerator implements \Random\Engine
{
    private int $state;

    public function __construct(?int $seed = null)
    {
        if ($seed === null) {
            $seed = random_int(0, 0xffff);
        }

        $this->state = $seed & 0xffff;
    }

    public function generate(): string
    {
        $this->state = (61 * $this->state + 17) & 0xffff;

        return pack('C', $this->state >> 8);
    }
}

$r = new \Random\Randomizer(
    new LinearCongruentialGenerator(seed: 1)
);

echo "Счастливое число: ", $r->getInt(0, 99), "\n";
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Счастливое число: 4
]]>
   </screen>
  </example>
 </refsect1>


</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
