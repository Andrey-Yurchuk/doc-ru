<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: e8df7102cc38808bd5e559580ef20424c4861ac6 Maintainer: countzero Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="function.socket-recv" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>socket_recv</refname>
  <refpurpose>Получает данные из подключённого сокета</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type class="union"><type>int</type><type>false</type></type><methodname>socket_recv</methodname>
   <methodparam><type>Socket</type><parameter>socket</parameter></methodparam>
   <methodparam><type class="union"><type>string</type><type>null</type></type><parameter role="reference">data</parameter></methodparam>
   <methodparam><type>int</type><parameter>length</parameter></methodparam>
   <methodparam><type>int</type><parameter>flags</parameter></methodparam>
  </methodsynopsis>
  <para>
   Функция <function>socket_recv</function> получает из сокета <parameter>socket</parameter>
   данные длиной до заданного параметром <parameter>length</parameter> количества байтов,
   а затем заполняет данными буфер <parameter>data</parameter>. Функция <function>socket_recv</function>
   умеет собирать данные из сокетов, с которыми установили соединение.
   Поведение функции изменяют флагами.
  </para>
  <para>
   Параметр <parameter>data</parameter> — ссылка, поэтому
   значение в списке аргументов указывают как переменную. Функция <function>socket_recv</function>
   вернёт данные, которые прочитает из сокета <parameter>socket</parameter>,
   в параметр <parameter>data</parameter>.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>socket</parameter></term>
     <listitem>
      <para>
       Параметр <parameter>socket</parameter> принимает экземпляр класса <classname>Socket</classname>,
       который создали функцией <function>socket_create</function>.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><parameter>data</parameter></term>
     <listitem>
      <para>
       Функция извлечёт данные и заполнит ими параметр <parameter>data</parameter>.
       Функция установит для параметра <parameter>data</parameter> значение &null;,
       если возникла ошибка, сбросилось соединение или данные оказались недоступны.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><parameter>length</parameter></term>
     <listitem>
      <para>
       Параметр <parameter>length</parameter> определяет длину данных в байтах,
       до которой функция будет получать данные с удалённого хоста.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><parameter>flags</parameter></term>
     <listitem>
      <para>
       Параметр <parameter>flags</parameter> принимает произвольную комбинацию следующих флагов,
       которые соединили двоичным оператором ИЛИ — <literal>|</literal>.
      </para>

      <table>
       <title>Значения флагов, которые принимает параметр <parameter>flags</parameter></title>
       <tgroup cols="2">
        <thead>
         <row>
          <entry>Флаг</entry>
          <entry>Описание</entry>
         </row>
        </thead>
        <tbody>
         <row>
          <entry><constant>MSG_OOB</constant></entry>
          <entry>
           Обрабатывать внеполосные (out-of-band) данные.
          </entry>
         </row>
         <row>
          <entry><constant>MSG_PEEK</constant></entry>
          <entry>
           Получать данные из начала очереди получения
           без удаления данных из очереди.
          </entry>
         </row>
         <row>
          <entry><constant>MSG_WAITALL</constant></entry>
          <entry>
           Функция блокируется, пока не получит
           хотя бы <parameter>length</parameter> байтов.
           Однако в таких случаях, если сигнал перехватился или удалённый хост отключился,
           функция вернёт меньше данных.
          </entry>
         </row>
         <row>
          <entry><constant>MSG_DONTWAIT</constant></entry>
          <entry>
           С этим флагом функция вернёт ответ, даже если обычно
           она бы заблокировалась.
          </entry>
         </row>
        </tbody>
       </tgroup>
      </table>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Функция <function>socket_recv</function> возвращает количество байтов, которые получила,
   или &false;, если возникла ошибка. Код ошибки получают
   функцией <function>socket_last_error</function>, а текстовое описание ошибки —
   функцией <function>socket_strerror</function>.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     &sockets.changelog.socket-param;
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Пример получения данных из подключенного сокета функцией <function>socket_recv</function></title>
    <para>
     Этот пример — просто переработка первого примера из статьи
     «<xref linkend="sockets.examples"/>», чтобы показать работу функции
     <function>socket_recv</function>.
    </para>
    <programlisting role="php">
<![CDATA[
<?php

error_reporting(E_ALL);

echo "<h2>Соединение по протоколу TCP/IP</h2>\n";

/* Получаем порт WWW-сервиса */
$service_port = getservbyname('www', 'tcp');

/* Получаем IP-адрес целевого хоста */
$address = gethostbyname('www.example.com');

/* Создаём сокет по протоколу TCP/IP. */
$socket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);
if ($socket === false) {
    echo "Не удалось выполнить функцию socket_create(): причина: " . socket_strerror(socket_last_error()) . "\n";
} else {
    echo "OK.\n";
}

echo "Попытка соединиться с хостом '$address' на порте '$service_port'... ";
$result = socket_connect($socket, $address, $service_port);
if ($result === false) {
    echo "Не получилось выполнить функцию socket_connect().\nПричина: ($result) " . socket_strerror(socket_last_error($socket)) . "\n";
} else {
    echo "OK.\n";
}

$in = "HEAD / HTTP/1.1\r\n";
$in .= "Host: www.example.com\r\n";
$in .= "Connection: Close\r\n\r\n";
$out = '';

echo "Отправка HTTP-запроса с заголовком HEAD...";
socket_write($socket, $in, strlen($in));
echo "OK.\n";

echo "Чтение ответа:\n\n";
$buf = 'Это мой буфер.';

if (false !== ($bytes = socket_recv($socket, $buf, 2048, MSG_WAITALL))) {
    echo "Количество байтов, которое прочитала функции socket_recv(): {$bytes}. Закрываем сокет... ";
} else {
    echo "Не получилось выполнить socket_recv(); причина: " . socket_strerror(socket_last_error($socket)) . "\n";
}
socket_close($socket);

echo $buf . "\n";
echo "OK.\n\n";

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
<h2>Соединение по протоколу TCP/IP</h2>
OK.
Попытка соединиться с хостом '208.77.188.166' на порте '80'... OK.
Отправка HTTP-запроса с заголовком HEAD... OK.
Получение ответа:

Количество байтов, которое прочитала функция socket_recv(): 14. Закрываем сокет... HTTP/1.1 200 OK
Date: Mon, 14 Sep 2009 08:56:36 GMT
Server: Apache/2.2.3 (Red Hat)
Last-Modified: Tue, 15 Nov 2005 13:24:10 GMT
ETag: "b80f4-1b6-80bfd280"
Accept-Ranges: bytes
Content-Length: 438
Connection: close
Content-Type: text/html; charset=UTF-8

OK.
]]>
    </screen>
   </example>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
