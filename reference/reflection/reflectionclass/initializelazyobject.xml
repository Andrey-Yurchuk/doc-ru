<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: c0fa5077c8862405942d8aac7360c5169558b59b Maintainer: malferov Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="reflectionclass.initializelazyobject" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>ReflectionClass::initializeLazyObject</refname>
  <refpurpose>Принудительно инициализирует ленивый объект</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis role="ReflectionClass">
   <modifier>public</modifier> <type>object</type><methodname>ReflectionClass::initializeLazyObject</methodname>
   <methodparam><type>object</type><parameter>object</parameter></methodparam>
  </methodsynopsis>
  <simpara>
   Метод принудительно инициализирует ленивый объект <parameter>object</parameter>.
   Метод не подействует, если в аргументе передали не ленивый объект или объект
   уже инициализировали, иначе инициализация продолжается так, как описывает секция
   «<link linkend="language.oop5.lazy-objects.initialization-sequence">Последовательность
   инициализации</link>».
  </simpara>

  <note>
   <simpara>
    В большей части случаев вызывать метод не потребуется, поскольку ленивые объекты
    инициализируются автоматически, при начале отслеживания состояния
    или изменении ленивого объекта.
   </simpara>
  </note>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>object</parameter></term>
    <listitem>
     <simpara>
      Объект, который требуется инициализировать.
     </simpara>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <simpara>
   Метод возвращает реальный экземпляр объекта,
   если объект <parameter>object</parameter> оказался ленивым прокси,
   иначе возвращает сам <parameter>object</parameter>.
  </simpara>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Базовый пример принудительной инициализации ленивого объекта</title>
   <programlisting role="php">
<![CDATA[
<?php

class Example
{
    public function __construct(public int $prop) {}
}

$reflector = new ReflectionClass(Example::class);

$object = $reflector->newLazyGhost(function ($object) {
    echo "Initializer called\n";
    $object->__construct(1);
});

var_dump($object);

$reflector->initializeLazyObject($object);

var_dump($object);

?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
lazy ghost object(Example)#3 (0) {
  ["prop"]=>
  uninitialized(int)
}
Initializer called
object(Example)#3 (1) {
  ["prop"]=>
  int(1)
}
]]>
   </screen>
  </example>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member><link linkend="language.oop5.lazy-objects">Ленивые объекты</link></member>
   <member><methodname>ReflectionClass::newLazyGhost</methodname></member>
   <member><methodname>ReflectionClass::markLazyObjectAsInitialized</methodname></member>
   <member><methodname>ReflectionClass::isUninitializedLazyObject</methodname></member>
  </simplelist>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
