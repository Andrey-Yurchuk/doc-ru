<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 30c3c56047bd7f33648e0be887eab7f7403dacb7 Maintainer: mch Status: ready -->
<!-- Reviewed: no -->
<phpdoc:classref xml:id="class.regexiterator" xmlns:phpdoc="http://php.net/ns/phpdoc" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">
 <title>Класс RegexIterator</title>
 <titleabbrev>RegexIterator</titleabbrev>

 <partintro>

  <!-- {{{  intro -->
  <section xml:id="regexiterator.intro">
   &reftitle.intro;
   <para>
    Этот итератор может быть использован для фильтрации другого итератора на основе регулярных выражений.
   </para>
  </section>
  <!-- }}} -->

  <section xml:id="regexiterator.synopsis">
   &reftitle.classsynopsis;

<!-- {{{ Synopsis -->
   <classsynopsis>
    <ooclass>
     <classname>RegexIterator</classname>
    </ooclass>

    <classsynopsisinfo>
     <ooclass>
      <classname>RegexIterator</classname>
     </ooclass>

     <ooclass>
      <modifier>extends</modifier>
      <classname>FilterIterator</classname>
     </ooclass>
    </classsynopsisinfo>

    <classsynopsisinfo role="comment">&Constants;</classsynopsisinfo>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="regexiterator.constants.use-key">RegexIterator::USE_KEY</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="regexiterator.constants.invert-match">RegexIterator::INVERT_MATCH</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="regexiterator.constants.match">RegexIterator::MATCH</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="regexiterator.constants.get-match">RegexIterator::GET_MATCH</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="regexiterator.constants.all-matches">RegexIterator::ALL_MATCHES</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="regexiterator.constants.split">RegexIterator::SPLIT</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="regexiterator.constants.replace">RegexIterator::REPLACE</varname>
    </fieldsynopsis>

    <classsynopsisinfo role="comment">&Properties;</classsynopsisinfo>
    <fieldsynopsis>
     <modifier>public</modifier>
     <type class="union"><type>string</type><type>null</type></type>
     <varname linkend="regexiterator.props.replacement">replacement</varname>
     <initializer>null</initializer>
    </fieldsynopsis>

    <classsynopsisinfo role="comment">&Methods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.regexiterator')/db:refentry/db:refsect1[@role='description']/descendant::db:constructorsynopsis[not(@role='procedural')])">
     <xi:fallback/>
    </xi:include>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.regexiterator')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[not(@role='procedural')])">
     <xi:fallback/>
    </xi:include>

    <classsynopsisinfo role="comment">&InheritedMethods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.filteriterator')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[not(@role='procedural')])">
     <xi:fallback/>
    </xi:include>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.iteratoriterator')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[not(@role='procedural')])">
     <xi:fallback/>
    </xi:include>
   </classsynopsis>

  </section>

  <section xml:id="regexiterator.constants">
   &reftitle.constants;
   <section xml:id="regexiterator.constants.operation-modes">
    <title>Режимы работы RegexIterator</title>
    <variablelist>

     <varlistentry xml:id="regexiterator.constants.all-matches">
      <term><constant>RegexIterator::ALL_MATCHES</constant></term>
      <listitem>
       <para>
        Возвращать все совпадения для текущий записи
        (смотрите <function>preg_match_all</function>).
       </para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="regexiterator.constants.get-match">
      <term><constant>RegexIterator::GET_MATCH</constant></term>
      <listitem>
       <para>
        Возвращать первое совпадение для текущей записи
        (смотрите <function>preg_match</function>).
       </para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="regexiterator.constants.match">
      <term><constant>RegexIterator::MATCH</constant></term>
      <listitem>
       <para>
        Только выполнение сравнения (фильтра) для текущей записи
        (смотрите <function>preg_match</function>).
       </para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="regexiterator.constants.replace">
      <term><constant>RegexIterator::REPLACE</constant></term>
      <listitem>
       <para>
        Заменить текущую запись
        (смотрите <function>preg_replace</function>; Полностью пока не реализовано)
       </para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="regexiterator.constants.split">
      <term><constant>RegexIterator::SPLIT</constant></term>
      <listitem>
       <para>
        Возвращать разделённые значения для текущей записи (смотрите <function>preg_split</function>).
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </section>
   <section xml:id="regexiterator.constants.flags">
    <title>Флаги RegexIterator</title>
    <variablelist>
     <varlistentry xml:id="regexiterator.constants.use-key">
      <term><constant>RegexIterator::USE_KEY</constant></term>
      <listitem>
       <para>
        Специальный флаг: Сравнивать ключ записи вместо значения записи.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="regexiterator.constants.invert-match">
      <term><constant>RegexIterator::INVERT_MATCH</constant></term>
      <listitem>
       <para>
        Инвертирует возвращаемое значение <methodname>RegexIterator::accept</methodname>.
       </para>
      </listitem>
     </varlistentry>

    </variablelist>
   </section>
  </section>

  <section xml:id="regexiterator.props">
   &reftitle.properties;
   <variablelist>
    <varlistentry xml:id="regexiterator.props.replacement">
     <term>
      <varname>replacement</varname>
     </term>
     <listitem>
      <para/>
     </listitem>
    </varlistentry>
   </variablelist>
  </section>

 </partintro>

 &reference.spl.entities.regexiterator;

</phpdoc:classref>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
