<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 86e6094e86b84a51d00ab217ac50ce8dde33d82a Maintainer: sergey Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="luasandbox.pauseusagetimer" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>LuaSandbox::pauseUsageTimer</refname>
  <refpurpose>Приостанавливает таймер использования процессора</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>bool</type><methodname>LuaSandbox::pauseUsageTimer</methodname>
   <void />
  </methodsynopsis>
  <para>
   Приостанавливает таймер использования процессора.
  </para>
  <para>
   Имеет значение только при вызове из callback-функции Lua. Когда выполнение возвращается в Lua,
   таймер автоматически возобновляет работу. Если будет сделан новый вызов в Lua,
   таймер будет возобновлён на время этого вызова.
  </para>
  <para>
   Если callback-функция PHP снова вызывает Lua с не приостановленным таймером,
   а затем эта функция Lua снова вызывает PHP, второй вызов PHP не сможет приостановить таймер.
   Логика заключается в том, что даже если второй вызов PHP не учитывает использование процессора
   в соответствии с ограничением, первый вызов все равно его считает.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  &no.function.parameters;
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Возвращает логическое значение (<type>bool</type>), указывающее, приостановлен ли таймер.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Управление таймером использования</title>
    <programlisting role="php">
<![CDATA[
<?php

// создание нового LuaSandbox и установка лимита процессора
$sandbox = new LuaSandbox();
$sandbox->setCPULimit( 1 );

function doWait( $t ) {
    $end = microtime( true ) + $t;
    while ( microtime( true ) < $end ) {
        // waste CPU cycles
    }
}

// регистрация новой callback-функции PHP
$sandbox->registerLibrary( 'php', [
    'test' => function () use ( $sandbox ) {
        $sandbox->pauseUsageTimer();
        doWait( 5 );

        $sandbox->unpauseUsageTimer();
        doWait( 0.1 );
    },
    'test2' => function () use ( $sandbox ) {
        $sandbox->pauseUsageTimer();
        $sandbox->unpauseUsageTimer();
        doWait( 1.1 );
    }
] );

echo "Это не должно истекать...\n";
$sandbox->loadString( 'php.test()' )->call();

echo "Это должно истекать.\n";
try {
    $sandbox->loadString( 'php.test2()' )->call();
    echo "Это не так?\n";
} catch ( LuaSandboxTimeoutError $ex ) {
    echo "Это так! " . $ex->getMessage() . "\n";
}

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Это не должно истекать...
Это должно истекать.
Это так! The maximum execution time for this script was exceeded
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><methodname>LuaSandbox::setCPULimit</methodname></member>
    <member><methodname>LuaSandbox::unpauseUsageTimer</methodname></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
