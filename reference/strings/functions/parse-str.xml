<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: e35fbbaa52702ebf45c5e7284351e136ed67f3bb Maintainer: shein Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="function.parse-str" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>parse_str</refname>
  <refpurpose>Разбирает строку на переменные</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>void</type><methodname>parse_str</methodname>
   <methodparam><type>string</type><parameter>string</parameter></methodparam>
   <methodparam><type>array</type><parameter role="reference">result</parameter></methodparam>
  </methodsynopsis>
  <para>
   Функция разбирает аргумент <parameter>string</parameter> как строку запроса,
   которую передали в URL-адресе, и устанавливает переменные в текущей
   области видимости, или заносит переменные в массив, если указали параметр <parameter>result</parameter>.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>string</parameter></term>
     <listitem>
      <para>
       Входная строка.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>result</parameter></term>
     <listitem>
      <para>
       При вызове с двумя аргументами функция вместо присваивания переменных в текущей
       области видимости сохраняет переменные как элементы массива
       в параметре <parameter>result</parameter>.
      </para>
      <warning>
       <para>
        Вызывать функцию без параметра <parameter>result</parameter>
        настоятельно <emphasis>НЕ РЕКОМЕНДУЮТ</emphasis>, такой вызов
        <emphasis>УСТАРЕЛ</emphasis> начиная с PHP 7.2.
        С PHP 8.0.0 параметр <parameter>result</parameter> стал <emphasis>обязательным</emphasis>.
       </para>
      </warning>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.void;
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
      <entry>8.0.0</entry>
      <entry>
       Параметр <parameter>result</parameter> сделали обязательным.
      </entry>
     </row>
      <row>
       <entry>7.2.0</entry>
       <entry>
        Вызов функции <function>parse_str</function> без второго параметра теперь
        выдаёт ошибку уровня <constant>E_DEPRECATED</constant>.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Пример разбора строки на переменный функцией <function>parse_str</function></title>
    <programlisting role="php">
<![CDATA[
<?php

$str = "first=value&arr[]=foo+bar&arr[]=baz";

// Рекомендуется
parse_str($str, $output);
echo $output['first'];  // value
echo $output['arr'][0]; // foo bar
echo $output['arr'][1]; // baz

// НЕ РЕКОМЕНДУЕТСЯ
parse_str($str);
echo $first;  // value
echo $arr[0]; // foo bar
echo $arr[1]; // baz

?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   Поскольку в PHP названия переменных не содержат точек и пробелов,
   такие символы преобразовываются в символ подчёркивания. Эти же правила
   относятся к названиям ключей в массиве
   <parameter>result</parameter>, при вызове с функции с двумя аргументами.
   <example>
    <title>Пример искажения названий переменных и ключей функцией <function>parse_str</function></title>
    <programlisting role="php">
<![CDATA[
<?php

parse_str("My Value=Something");
echo $My_Value; // Выводит Something

parse_str("My Value=Something", $output);
echo $output['My_Value']; // Выводит Something

?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>
 <refsect1 role="notes">
  &reftitle.notes;

  <note>
   <para>
    Каждая переменная, которую функция создаёт, и каждое значение, которое возвращается
    в массиве при вызове со вторым аргументом, обрабатывается функцией <function>urldecode</function>.
   </para>
  </note>
  <note>
   <para>
    Текущая строка запроса <literal>QUERY_STRING</literal>
    доступна в переменной <varname>$_SERVER['QUERY_STRING']</varname>.
    Рекомендуется также прочитать раздел
    <link linkend="language.variables.external">о переменных из внешних источников</link>.
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>parse_url</function></member>
    <member><function>pathinfo</function></member>
    <member><function>http_build_query</function></member>
    <member><function>urldecode</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
