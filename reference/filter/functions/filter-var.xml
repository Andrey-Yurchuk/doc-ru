<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 18a59d257ac885abb0646b2646fb82b35b90ef56 Maintainer: shein Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="function.filter-var" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>filter_var</refname>
  <refpurpose>Фильтрует переменную</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>mixed</type><methodname>filter_var</methodname>
   <methodparam><type>mixed</type><parameter>value</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>filter</parameter><initializer><constant>FILTER_DEFAULT</constant></initializer></methodparam>
   <methodparam choice="opt"><type class="union"><type>array</type><type>int</type></type><parameter>options</parameter><initializer>0</initializer></methodparam>
  </methodsynopsis>

 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>value</parameter></term>
     <listitem>
      <para>
       Значение, которое требуется отфильтровать. Обратите внимание, что перед фильтрацией скалярные
       значения внутренне <link linkend="language.types.string.casting">преобразовываются в строку</link>.
      </para>
     </listitem>
    </varlistentry>
    &filter.param.filter;
    <varlistentry>
     <term><parameter>options</parameter></term>
     <listitem>
      <para>
       Ассоциативный массив параметров или флаги через побитовое ИЛИ.
       Если фильтр принимает параметры, флаги можно указать
       в массиве в элементе "flags". Для фильтра "callback" требуется передать
       значение с типом <type>callable</type>. Фильтр "callback" должен
       принимать один аргумент, значение для фильтрации и возвращать
       значение после фильтрации или очистки.
      </para>
      <para>
       <programlisting role="php">
<![CDATA[
<?php

// Формат для фильтров, которые принимают параметры
$options = array(
    'options' => array(
        'default' => 3, // Значение, которое вернётся при сбое фильтрации
        // Другие параметры
        'min_range' => 0
    ),
    'flags' => FILTER_FLAG_ALLOW_OCTAL,
);

$var = filter_var('0755', FILTER_VALIDATE_INT, $options);

// Для фильтров, которые принимают только флаги, флаги разрешается передавать напрямую
$var = filter_var('oops', FILTER_VALIDATE_BOOLEAN, FILTER_NULL_ON_FAILURE);

// Для фильтров, которые принимает только флаги, флаги также разрешается передавать как массив
$var = filter_var(
    'oops',
    FILTER_VALIDATE_BOOLEAN,
    array('flags' => FILTER_NULL_ON_FAILURE)
);

// Callback-функция фильтра валидации
function foo($value)
{
    // Ожидаемый формат: Фамилия, Имена
    if (strpos($value, ", ") === false) {
        return false;
    }

    list($surname, $givennames) = explode(", ", $value, 2);

    $empty = (empty($surname) || empty($givennames));
    $notstrings = (!is_string($surname) || !is_string($givennames));

    if ($empty || $notstrings) {
        return false;
    } else {
        return $value;
    }
}

$var = filter_var('Doe, Jane Sue', FILTER_CALLBACK, array('options' => 'foo'));

?>
]]>
       </programlisting>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Функция возвращает отфильтрованные данные или &false;, если фильтрация не удалась.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Пример использования функции <function>filter_var</function></title>
    <programlisting role="php">
<![CDATA[
<?php

var_dump(filter_var('bob@example.com', FILTER_VALIDATE_EMAIL));
var_dump(filter_var('http://example.com', FILTER_VALIDATE_URL, FILTER_FLAG_PATH_REQUIRED));

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
string(15) "bob@example.com"
bool(false)
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>Пример фильтрации массива</title>
    <programlisting role="php">
<![CDATA[
<?php

$emails = [
    "bob@example.com",
    "test@example.local",
    "invalidemail"
];

var_dump(filter_var($emails, FILTER_VALIDATE_EMAIL, FILTER_REQUIRE_ARRAY));

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
array(3) {
  [0]=>
  string(15) "bob@example.com"
  [1]=>
  string(18) "test@example.local"
  [2]=>
  bool(false)
}
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>filter_var_array</function></member>
    <member><function>filter_input</function></member>
    <member><function>filter_input_array</function></member>
    <member><xref linkend="filter.filters"/></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
