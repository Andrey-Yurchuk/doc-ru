<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 1d8068ecb070fdc360d750e0c1f3f15796e61ec0 Maintainer: shein Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="memcached.get" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>Memcached::get</refname>
  <refpurpose>Получает элемент</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis role="Memcached">
   <modifier>public</modifier> <type>mixed</type><methodname>Memcached::get</methodname>
   <methodparam><type>string</type><parameter>key</parameter></methodparam>
   <methodparam choice="opt"><type class="union"><type>callable</type><type>null</type></type><parameter>cache_cb</parameter><initializer>&null;</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>get_flags</parameter><initializer>0</initializer></methodparam>
  </methodsynopsis>
  <para>
   Метод <function>Memcached::get</function> возвращает элемент, который до этого сохранили
   под ключом <parameter>key</parameter>. Если метод нашёл элемент
   и для параметра <parameter>get_flags</parameter> задали флаг <constant>Memcached::GET_EXTENDED</constant>,
   метод также вернёт для элемента значение токена CAS.
   Метод <methodname>Memcached::cas</methodname> описывает, как использовать
   CAS-токены. <link linkend="memcached.callbacks">Callback-функции кеша со сквозным чтением</link>
   устанавливают через параметр <parameter>cache_cb</parameter>.
  </para>
  <para>
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>key</parameter></term>
     <listitem>
      <para>
       Ключ элемента, который требуется получить.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>cache_cb</parameter></term>
     <listitem>
      <para>
       Callback-функция кеширования со сквозным чтением или &null;.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>get_flags</parameter></term>
     <listitem>
      <para>
       Флаги для управления результатом, который вернёт метод.
       Метод также вернёт CAS-токен, если установили
       константу <constant>Memcached::GET_EXTENDED</constant>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Метод возвращает значение, которое хранится в кеше, иначе &false;.
   Если для параметра <parameter>get_flags</parameter> установили флаг <constant>Memcached::GET_EXTENDED</constant>,
   возвращается массив, который содержит значение и токен CAS вместо единственного значения.
   Метод <methodname>Memcached::getResultCode</methodname> возвращает значение константы
   <constant>Memcached::RES_NOTFOUND</constant>, если ключ, который передали, не существует.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>PECL memcached 3.0.0</entry>
      <entry>
       Удалили параметр <parameter role="reference">cas_token</parameter>.
       Вместо параметра добавили параметр <parameter>get_flags</parameter>, в который
       передаётся значение <constant>Memcached::GET_EXTENDED</constant>,
       чтобы метод вернул CAS-токен.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Пример использования метода <function>Memcached::get</function> #1</title>
    <programlisting role="php">
<![CDATA[
<?php

$m = new Memcached();
$m->addServer('localhost', 11211);

$m->set('foo', 100);
var_dump($m->get('foo'));

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
int(100)
]]>
    </screen>
   </example>
   <example>
    <title>Пример использования <function>Memcached::get</function> #2</title>
    <programlisting role="php">
<![CDATA[
<?php
$m = new Memcached();
$m->addServer('localhost', 11211);

if (!($ip = $m->get('ip_block'))) {
    if ($m->getResultCode() == Memcached::RES_NOTFOUND) {
        $ip = array();
        $m->set('ip_block', $ip);
    } else {
        /* log error */
        /* ...       */
    }
}
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><methodname>Memcached::getByKey</methodname></member>
    <member><methodname>Memcached::getMulti</methodname></member>
    <member><methodname>Memcached::getDelayed</methodname></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
