<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 7ad99aeafea66a1562f668aa3cb11dcc9d9cb951 Maintainer: sergey Status: ready -->
<!-- Reviewed: no -->
<chapter xml:id="outcontrol.user-level-output-buffers" xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude">
 <title>Пользовательские буферы вывода</title>
 <para>
  Пользовательские буферы вывода разрешено запускать, манипулировать ими
  и завершать из PHP-кода.
  Каждый из этих буферов состоит из буфера вывода
  и связанной с ним функции обработчика вывода.
 </para>

 <section xml:id="outcontrol.what-output-is-buffered">
  <title>Какой вывод буферизуется?</title>
  <para>
   Пользовательские буферы вывода PHP после запуска полностью буферизуют вывод
   до тех пор, пока не отключатся или скрипт не завершит работу.
   Вывод в контексте пользовательского PHP-буфера вывода —
   это всё, что PHP отобразил или отправил обратно в браузер.
   С практической точки зрения, вывод — это данные ненулевой длины, которые:
   <itemizedlist>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('outputcontrol.what-is-output')/*)"><xi:fallback/></xi:include>
   </itemizedlist>
  </para>
  <note>
   <simpara>
    Данные, которые записываются сразу в поток вывода (<literal>stdout</literal>)
    или передаются в функцию SAPI с похожей функциональностью,
    не будут захвачены пользовательскими буферами вывода.
    В это включена
    запись данных в стандартный поток вывода (<literal>stdout</literal>) функцией <function>fwrite</function>
    или отправка заголовков функциями <function>header</function>
    или <function>setcookie</function>.
   </simpara>
  </note>
 </section>

 <section>
  <title>Включение буферизации вывода</title>
  <para>
   Буферизацию вывода включают вызовом функции
   <function>ob_start</function>
   или установкой в файле &php.ini; параметров директивам
   <link linkend="ini.output-buffering">output_buffering</link>
   и <link linkend="ini.output-handler">output_handler</link>.
   Хотя оба способа умеют создавать буферы вывода,
   функция <function>ob_start</function> гибче,
   поскольку принимает в качестве обработчиков вывода пользовательские функции
   и умеет задавать операции, разрешенные для буфера (сброс, очистка, удаление).
   Буферы, которые запустили функцией <function>ob_start</function>, будут активны
   с той строки, на которой вызвали функцию,
   тогда как те, которые запустили
   директивой <link linkend="ini.output-buffering">output_buffering</link>,
   будут буферизовать вывод начиная с первой строки скрипта.
  </para>
  <para>
   PHP также поставляется со встроенным обработчиком вывода <literal>URL-Rewriter</literal>,
   который запускает свой буфер вывода и разрешает
   запускать одновременно до двух его экземпляров
   (один для перезаписи URL-адресов на уровне пользователя
   и ещё один для поддержки прозрачного идентификатора сессии).
   Эти буферы запускают вызовом функции
   <function>output_add_rewrite_var</function>
   и (или) включением
   директивы <link linkend="ini.session.use-trans-sid">session.use_trans_sid</link>
   в файле &php.ini;.
  </para>
  <para>
   В модуль <literal>zlib</literal>, который входит в комплект PHP, интегрировали свой
   буфер вывода, который включают директивой
   <link linkend="ini.zlib.output-compression">zlib.output_compression</link>
   в файле &php.ini;.
  </para>
  <note>
   <simpara>
    Хотя обработчик <literal>URL-Rewriter</literal> и выделяется тем,
    что разрешает запускать одновременно только до двух своих экземпляров,
    пользовательские буферы вывода работают с теми же базовыми буферами,
    которые использует функция <function>ob_start</function>,
    а их функциональность реализуется пользовательской функцией обработчика вывода.
    Поэтому их функциональность в состоянии сымитировать пользовательский код.
   </simpara>
  </note>
 </section>

 <section xml:id="outcontrol.nesting-output-buffers">
  <title>Вложенные буферы вывода</title>
  <para>
   Новый буфер вкладывается внутрь предыдущего активного буфера,
   если при запуске нового буфера активен другой буфер вывода.
   Внутренний буфер будет вести себя точно как внешний,
   но вывод, который буферизовал внутренний буфер, не буферизуется внешним.
   Внешним буфером буферизуется только тот вывод внутреннего, который внутренний буфер сбросил.
  </para>
  <para>
   Бо́льшая часть функций семейства <literal>ob_<replaceable>*</replaceable></literal> работает
   только с активным буфером вывода (который запустили последним),
   поэтому только активный буфер получится сбросить, очистить или отключить.
   К функциям, которые работают с другими буферами, относятся —
   функция <function>ob_list_handlers</function>,
   которая возвращает список активных обработчиков вывода,
   и функция <function>ob_get_status</function>,
   которая умеет возвращать информацию только об активном буфере
   или обо всех буферах.
  </para>
  <para>
   Вызов функций <function>ob_get_level</function>
   или <function>ob_get_status</function> вернёт
   уровень вложенности активного буфера вывода.
  </para>
  <caution>
   <simpara>
    Функции <function>ob_get_level</function> и <function>ob_get_status</function>
    по-разному оценивают один и тот же уровень вложенности; значение отклонено на единицу.

    Для функции <function>ob_get_level</function>
    первый уровень — это <literal>1</literal>.
    Тогда как для функции <function>ob_get_status</function>
    первый уровень — это <literal>0</literal>.
   </simpara>
  </caution>
 </section>

 <section xml:id="outcontrol.buffer-size">
  <title>Размер буфера</title>
  <para>
   Размеры буфера выражаются целыми числами
   и представляют количество байтов, которые буфер в состоянии хранить без сброса.
   Когда размер вывода в буфере превышает размер буфера,
   содержимое буфера отправляется в обработчик вывода,
   возвращаемое обработчиком значение сбрасывается, а буфер очищается.
  </para>
  <para>
   За исключением обработчика перезаписи URL-адресов <literal>URL-Rewriter</literal>,
   размер буферов вывода, если нужно, устанавливают при запуске буфера.
   Буфер вывода ограничивается только размером доступной языку PHP памяти,
   если установили значение <literal>0</literal>.
   Буфер будет сбрасываться после каждого блока кода, который даёт вывод ненулевой длины,
   если установили значение <literal>1</literal>.
  </para>
  <para>
   Размер буферов вывода получают вызовом функции
   <function>ob_get_status</function>.
  </para>
  <para>
   Размеры буферов вывода, которые запустили функцией <function>ob_start</function>,
   будут равны целочисленному значению, которое передали
   во второй параметр функции <parameter>chunk_size</parameter>.
   Если параметр не задан, установится значение <literal>0</literal>.
  </para>
  <para>
   Размеру буфера вывода, который запустила
   директива <link linkend="ini.output-buffering">output_buffering</link>
   со значением <literal>«On»</literal>, устанавливается значение 0.
   Если задано целое число, размер буфера будет соответствовать этому числу.
  </para>
  <para>
   Размеру буфера <literal>URL-Rewriter</literal> установили значение <literal>0</literal>,
   поэтому размер ограничивается объёмом доступной языку PHP памяти.
  </para>
  <para>
   Размером буфера вывода модуля <literal>zlib</literal> управляет
   директива <link linkend="ini.zlib.output-compression">zlib.output_compression</link>
   файла &php.ini;.
   Размер буфера будет равен <literal>"16K"</literal>, или <literal>16 384</literal> байтам,
   если для директивы установили значение <literal>"On"</literal>.
   Если установили целое число, размер буфера будет соответствовать этому числу в байтах.
  </para>
 </section>

 <section xml:id="outcontrol.operations-on-buffers">
  <title>Операции, разрешённые для буферов</title>
  <para>
   Операциями, разрешенными для буферов, управляют через передачу
   <link linkend="outcontrol.constants.buffer-control-flags">флагов управления буфером</link>
   в третий параметр функции <function>ob_start</function> — <parameter>flags</parameter>.
   По умолчанию разрешаются все операции, если параметр не задали.
   Если вместо этого задали значение <literal>0</literal>,
   буфер нельзя будет сбросить, очистить или удалить,
   но содержимое буфера по-прежнему будет доступно.
  </para>
  <para>
   Флаг <constant>PHP_OUTPUT_HANDLER_CLEANABLE</constant> разрешает
   функции <function>ob_clean</function> очищать содержимое буфера.
  </para>
  <warning>
   <simpara>
    Отсутствие флага <constant>PHP_OUTPUT_HANDLER_CLEANABLE</constant>
    не помешает функции <function>ob_end_clean</function>
    или <function>ob_get_clean</function> очистить содержимое буфера.
   </simpara>
  </warning>
  <para>
   Флаг <constant>PHP_OUTPUT_HANDLER_FLUSHABLE</constant> разрешает
   функции <function>ob_flush</function> сбрасывать содержимого буфера.
  </para>
  <warning>
   <simpara>
    Отсутствие флага <constant>PHP_OUTPUT_HANDLER_FLUSHABLE</constant>
    не помешает функции <function>ob_end_flush</function>
    или <function>ob_get_flush</function> сбросить содержимое буфера.
   </simpara>
  </warning>
  <para>
   Флаг <constant>PHP_OUTPUT_HANDLER_REMOVABLE</constant> разрешает
   функциям <function>ob_end_clean</function>, <function>ob_end_flush</function>,
   <function>ob_get_clean</function> и <function>ob_get_flush</function>
   отключать буфер.
  </para>
  <para>
   Флаг <constant>PHP_OUTPUT_HANDLER_STDFLAGS</constant> —
   комбинация трёх флагов, которая разрешает выполнять с буфером каждую из трёх операций.
  </para>
 </section>

 <section>
  <title>Сброс, доступ и очистка содержимого буфера</title>
  <para>
   Сброс отправляет и удаляет содержимое активного буфера.
   Буферы вывода сбрасываются, когда размер вывода
   превышает размер буфера, скрипт завершает работу
   или вызываются функции <function>ob_flush</function>, <function>ob_end_flush</function>
   или <function>ob_get_flush</function>.
  </para>
  <caution>
   <simpara>
    Вызов функций <function>ob_end_flush</function>
    или <function>ob_get_flush</function> отключит активный буфер.
   </simpara>
  </caution>
  <caution>
   <simpara>
    Сброс буферов также сбросит возвращаемое обработчиком вывода значение,
    которое обработчик вывода умеет изменять,
    и если так, значение будет отличаться от содержимого буфера.
    Например, передача в обработчик вывода функции <function>ob_gzhandler</function> приведёт
    к сжатию данных вывода и сбросу сжатого вывода.
   </simpara>
  </caution>
  <para>
   Содержимое активного буфера получают вызовом
   функций <function>ob_get_contents</function>, <function>ob_get_clean</function>
   или <function>ob_get_flush</function>.
  </para>
  <para>
   Если нужен только размер содержимого буфера,
   функции <function>ob_get_length</function> или <function>ob_get_status</function>
   вернут размер содержимого в байтах.
  </para>
  <caution>
   <simpara>
    Вызов функций <function>ob_get_clean</function>
    или <function>ob_get_flush</function> отключит активный буфер
    после возврата его содержимого.
   </simpara>
  </caution>
  <para>
   Содержимое активного буфера очищают вызовом функций
   <function>ob_clean</function>, <function>ob_end_clean</function>
   или <function>ob_get_clean</function>.
  </para>
  <caution>
   <simpara>
    Вызов функций <function>ob_end_clean</function>
    или <function>ob_get_clean</function> отключит активный буфер вывода.
   </simpara>
  </caution>
 </section>

 <section>
  <title>Отключение буферов</title>
  <para>
   Буферы вывода отключают вызовом функций
   <function>ob_end_clean</function>, <function>ob_end_flush</function>,
   <function>ob_get_flush</function> или <function>ob_get_clean</function>.
  </para>
  <warning>
   <simpara>
    Буферы вывода, которые запустили без флага
    <constant>PHP_OUTPUT_HANDLER_REMOVABLE</constant>,
    нельзя отключить, а попытка удалить такие буферы выдаст ошибку уровня <constant>E_NOTICE</constant>.
   </simpara>
  </warning>
  <para>
   Каждый буфер вывода, который не закрыли до конца скрипта
   или вызовом конструкции <function>exit</function>, сбросит
   и отключит процесс завершения работы PHP.
   Буферы сбрасываются и отключаются
   в порядке, обратном их запуску.
   Буфер, который запустили последним, будет первым,
   а буфер, который запустили первым, сбросится и отключится в последнюю очередь.
  </para>
  <caution>
   <simpara>
    Пользовательский обработчик вывода активируют,
    чтобы предотвратить сброс буфера вывода при завершении работы PHP,
    если сброс содержимого буферов не нужен.
   </simpara>
  </caution>
 </section>

 <section xml:id="outcontrol.output-handlers">
  <title>Обработчики вывода</title>
  <para>
   Обработчики вывода — <type>callable</type>-выражения, которые связаны с буферами вывода,
   которые запускаются вызовом функций <function>ob_clean</function>,
   <function>ob_flush</function>, <function>ob_end_flush</function>,
   <function>ob_get_flush</function>, <function>ob_end_clean</function>,
   <function>ob_get_clean</function> или при завершении работы PHP.
  </para>
  <note>
   <simpara>
    Процесс завершения работы сбросит возвращаемое значение обработчика.
   </simpara>
  </note>
  <para>
   Если при запуске буфера вывода обработчик не задали или значение равно &null;,
   активируется внутренний обработчик вывода <literal>default output handler</literal>,
   который при вызове возвращает неизменённое содержимое буфера.
   Обработчиками вывода пользуются для возврата измененной версии содержимого
   буфера и (или) или получения побочных эффектов (например, отправки заголовков).
  </para>
  <para>
   PHP поставляется с двумя внутренними обработчиками вывода:
   <literal>default output handler</literal>
   и <literal>URL-Rewriter</literal> (который интегрировали в собственный
   буфер вывода и только до двух экземпляров которого разрешается запускать).
  </para>
  <para>
   Модули, которые входят в комплект PHP, включают четыре дополнительные обработчика вывода:
   <function>mb_output_handler</function>, <function>ob_gzhandler</function>,
   <function>ob_iconv_handler</function>, <function>ob_tidyhandler</function>.
  </para>
 </section>

 <section xml:id="outcontrol.working-with-output-handlers">
  <title>Работа с обработчиками вывода</title>
  <para>
   При вызове обработчикам вывода передаётся содержимое буфера
   и битовая маска, которая указывает состояние буферизации вывода.
  </para>
  <para>
   <methodsynopsis>
    <type>string</type>
    <methodname>
     <replaceable>handler</replaceable>
    </methodname>
    <methodparam>
     <type>string</type>
     <parameter>buffer</parameter>
    </methodparam>
    <methodparam choice="opt">
     <type>int</type>
     <parameter>phase</parameter>
    </methodparam>
   </methodsynopsis>
   <variablelist>
    <varlistentry>
     <term><parameter>buffer</parameter></term>
     <listitem>
      <simpara>
       Содержимое буфера вывода.
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>phase</parameter></term>
     <listitem>
      <simpara>
       Битовая маска
       <link linkend="constant.php-output-handler-start">
        <constant>PHP_OUTPUT_HANDLER_<replaceable>*</replaceable></constant>-констант
       </link>.
      </simpara>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
  <warning>
   <simpara>
    Вызов следующих функций из обработчика вывода вызовет фатальную ошибку:
    <function>ob_clean</function>, <function>ob_end_clean</function>,
    <function>ob_end_flush</function>, <function>ob_flush</function>,
    <function>ob_get_clean</function>, <function>ob_get_flush</function>,
    <function>ob_start</function>.
   </simpara>
  </warning>
  <note>
   <simpara>
    Обработчик вывода не запустится вызовом функций
    <function>ob_end_clean</function>, <function>ob_end_flush</function>,
    <function>ob_get_clean</function>, <function>ob_get_flush</function>
    или при завершении работы PHP,
    если установили флаг состояния обработчика <constant>PHP_OUTPUT_HANDLER_DISABLED</constant>.
    Этот флаг не влияет на вызов функции <function>ob_clean</function>
    или <function>ob_flush</function>.
   </simpara>
  </note>
  <note>
   <simpara>
    Функция завершения работы на ряде веб-серверов
    умеет изменять рабочую директорию скрипта,
    например на сервере Apache или встроенном веб-сервере.
   </simpara>
  </note>
 </section>

 <section xml:id="outcontrol.flags-passed-to-output-handlers">
  <title>Флаги, передаваемые обработчикам вывода</title>
  <para>
   Битовая маска, которую передали во второй параметр
   обработчика вывода — <parameter>phase</parameter> даёт информацию о вызове обработчика.
  </para>
  <note>
   <simpara>
    В битовую маску разрешается включать больше одного флага,
    а для проверки того, установлен ли флаг,
    указывают побитовый оператор <literal>&amp;</literal>.
   </simpara>
  </note>
  <warning>
   <simpara>
    Значение флага <constant>PHP_OUTPUT_HANDLER_WRITE</constant> и его псевдонима
    <constant>PHP_OUTPUT_HANDLER_CONT</constant> равно <literal>0</literal>,
    поэтому установили ли значение, определяют только
    <link linkend="language.operators.comparison">операторами равенства</link>
    (<literal>==</literal> или <literal>===</literal>).
   </simpara>
  </warning>
  <para>
   PHP устанавливает следующие флаги на конкретном этапе жизненного цикла обработчика:
   <constant>PHP_OUTPUT_HANDLER_START</constant> —
   при первом вызове обработчика.
   Флаг <constant>PHP_OUTPUT_HANDLER_FINAL</constant>
   или его псевдоним <constant>PHP_OUTPUT_HANDLER_END</constant> —
   при последнем вызове обработчика,
   т. е. он отключается. PHP также установит этот флаг,
   когда буферы выключаются процессом завершения работы PHP.
  </para>
  <para>
   Конкретный вызов обработчика устанавливает следующие флаги:
   <constant>PHP_OUTPUT_HANDLER_FLUSH</constant> —
   при запуске обработчика вызовом функции <function>ob_flush</function>.
   Флаг <constant>PHP_OUTPUT_HANDLER_WRITE</constant>
   или его псевдоним <constant>PHP_OUTPUT_HANDLER_CONT</constant> —
   когда размер содержимого обработчика равен или превышает размер буфера,
   а обработчик вызвали во время автоматической очистки буфера.
   Флаг <constant>PHP_OUTPUT_HANDLER_FLUSH</constant> —
   когда обработчик запустили вызовом функций <function>ob_clean</function>,
   <function>ob_end_clean</function> или <function>ob_get_clean</function>.
   При вызове функции <function>ob_end_clean</function> или <function>ob_get_clean</function>
   также устанавливается флаг <constant>PHP_OUTPUT_HANDLER_FINAL</constant>.
  </para>
  <note>
   <simpara>
    При вызове функции <function>ob_end_flush</function> или <function>ob_get_flush</function>
    флаг <constant>PHP_OUTPUT_HANDLER_FINAL</constant> устанавливается,
    а флаг <constant>PHP_OUTPUT_HANDLER_FLUSH</constant> — нет.
   </simpara>
  </note>
 </section>

 <section xml:id="outcontrol.output-handler-return-values">
  <title>Значения, которые возвращает обработчик вывода</title>
  <para>
   Значение, которое возвращает обработчик вывода, следует стандартной семантике
   PHP-типов и внутренне преобразовывается в строку,
   с двумя исключениями:
   массивы (<type>array</type>) и логические значения (<type>bool</type>).
  </para>
  <para>
   Массивы преобразовываются в строку <literal>"Array"</literal>,
   но предупреждение <literal>Array to string conversion</literal>
   не срабатывает.
  </para>
  <para>
   Если обработчик возвращает значение &false;, возвращается содержимое буфера,
   если возвращает &true;, — пустая строка.
  </para>
  <note>
   <simpara>
    Если обработчик возвращает значение &false; или выбрасывает исключение,
    PHP устанавливает для обработчика флаг состояния <constant>PHP_OUTPUT_HANDLER_DISABLED</constant>.
   </simpara>
  </note>
 </section>

 <section>
  <title>Исключения в обработчиках вывода</title>
  <para>
   Если в обработчике вывода выбрасывается неперехваченное исключение,
   программа завершается, а процесс завершения работы вызывает обработчик,
   затем выводится сообщение об ошибке <literal>Uncaught Exception</literal>.
  </para>
  <para>
   Если в обработчике вывода, который вызвали функцией <function>ob_flush</function>,
   <function>ob_end_flush</function> или <function>ob_get_flush</function>,
   выбрасывается неперехваченное исключение,
   содержимое буфера сбрасывается перед сообщением об ошибке.
  </para>
  <para>
   Если в обработчике вывода неперехваченное исключение выбрасывается при выключении,
   обработчик завершается, ни содержимое буфера,
   ни сообщение об ошибке не сбрасываются.
  </para>
  <note>
   <simpara>
    Если обработчик вывода выбрасывает исключение,
    PHP устанавливает для обработчика флаг состояния <constant>PHP_OUTPUT_HANDLER_DISABLED</constant>.
   </simpara>
  </note>
 </section>

 <section>
  <title>Ошибки в обработчиках вывода</title>
  <para>
   Если в обработчике вывода выдаётся неустранимая ошибка,
   программа продолжает выполняться.
  </para>
  <para>
   Если в обработчике, который вызвали функцией
   <function>ob_flush</function>, <function>ob_end_flush</function>
   или <function>ob_get_flush</function>,
   возникает неустранимая ошибка,
   буфер сбрасывает данные, которые вернул обработчик.
   Если обработчик возвращает значение &false;, сбрасываются буфер и сообщение об ошибке.
   Если возвращает другое значение, возвращаемое обработчиком значение сбрасывается,
   но не сообщение об ошибке.
  </para>
  <note>
   <simpara>
    Если обработчик возвращает значение &false;
    PHP устанавливает для обработчика флаг состояния <constant>PHP_OUTPUT_HANDLER_DISABLED</constant>.
   </simpara>
  </note>
  <para>
   Если в обработчике вывода возникает фатальная ошибка,
   программа завершается, а процесс завершения работы вызывает обработчик,
   затем сбрасывается сообщение об ошибке.
  </para>
  <para>
   Если в обработчике вывода, который вызвали функцией <function>ob_flush</function>,
   <function>ob_end_flush</function> или <function>ob_get_flush</function>,
   возникает фатальная ошибка,
   содержимое буферов сбрасывается перед сообщением об ошибке.
  </para>
  <para>
   Если в обработчике вывода фатальная ошибка возникает при выключении,
   программа завершается без сброса буфера или сообщения об ошибке.
  </para>
 </section>

 <section>
  <title>Вывод обработчиков вывода</title>
  <para>
   При конкретных обстоятельствах выходные данные, которые создаются в обработчике,
   сбрасываются вместе с содержимым буфера. Этот вывод не добавляется
   в буфер и не становится строкой,
   которую возвращает функция <function>ob_get_flush</function>.
  </para>
  <para>
   Если во время операций сброса (при вызове функций <function>ob_flush</function>,
   <function>ob_end_flush</function>, <function>ob_get_flush</function>
   и при завершении работы)
   возвращаемое значение обработчика равно &false;,
   содержимое буфера сбрасывается, а затем идёт вывод.
   Если обработчик не вызывается при завершении работы,
   то обработчик выбрасывает исключение;
   вызов конструкции <function>exit</function>
   ведёт себя так же.
  </para>
  <note>
   <simpara>
    Если обработчик возвращает значение &false;,
    PHP устанавливает для обработчика флаг состояния <constant>PHP_OUTPUT_HANDLER_DISABLED</constant>.
   </simpara>
  </note>
 </section>

 <section>
  <title>Флаги состояния обработчика вывода</title>
  <para>
   PHP устанавливает <link linkend="outcontrol.constants.flags-returned-by-handler">
    флаги состояния обработчика
   </link> битовой маски флагов (<literal>flags</literal>) буфера
   каждый раз при вызове обработчика вывода
   и делает их частью флагов (<literal>flags</literal>), которые возвращает
   функция <function>ob_get_status</function>.
   Если обработчик успешно выполняется и не возвращает значение &false;,
   PHP устанавливает флаги состояния <constant>PHP_OUTPUT_HANDLER_STARTED</constant>
   и <constant>PHP_OUTPUT_HANDLER_PROCESSED</constant>.
   Если обработчик возвращает значение &false; или выбрасывает исключение во время работы,
   PHP устанавливает флаги состояния <constant>PHP_OUTPUT_HANDLER_STARTED</constant>
   и <constant>PHP_OUTPUT_HANDLER_DISABLED</constant>.
  </para>
  <note>
   <simpara>
    Если для обработчика установили значение <constant>PHP_OUTPUT_HANDLER_DISABLED</constant>,
    обработчик не будет запускаться при вызове функций
    <function>ob_end_clean</function>, <function>ob_end_flush</function>,
    <function>ob_get_clean</function>, <function>ob_get_flush</function>
    или при завершении процесса работы PHP.
    Этот флаг не влияет на вызов функций <function>ob_clean</function>
    и <function>ob_flush</function>.
   </simpara>
  </note>
 </section>

</chapter>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
