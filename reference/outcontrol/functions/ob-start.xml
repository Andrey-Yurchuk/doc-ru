<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: da6be21fef84d61cc4c621b3fe1d5fd2c9046c45 Maintainer: mch Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="function.ob-start" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>ob_start</refname>
  <refpurpose>Включает буферизацию вывода</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>ob_start</methodname>
   <methodparam choice="opt"><type class="union"><type>callable</type><type>null</type></type><parameter>callback</parameter><initializer>&null;</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>chunk_size</parameter><initializer>0</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>flags</parameter><initializer><constant>PHP_OUTPUT_HANDLER_STDFLAGS</constant></initializer></methodparam>
  </methodsynopsis>
  <para>
   Функция включает буферизацию вывода. Пока буферизация вывода активна,
   вывод из скрипта не отправляется, вместо этого вывод сохраняется во внутреннем буфере.
   Раздел «<xref linkend="outcontrol.what-output-is-buffered"/>»
   рассказывает, на какой именно вывод это влияет.
  </para>
  <para>
   Буферы вывода помещаются в стек,
   поэтому функцию <function>ob_start</function> разрешается вызывать
   при другом активном буфере.
   Если активировали несколько буферов вывода,
   вывод фильтруется последовательно
   через каждый из буферов в порядке вложенности.
   Подробнее об этом рассказывает раздел «<xref linkend="outcontrol.nesting-output-buffers"/>».
  </para>
  <para>
   Подробное описание буферов вывода даёт раздел «<xref linkend="outcontrol.user-level-output-buffers"/>».
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>callback</parameter></term>
     <listitem>
      <para>
       Можно задать необязательный параметр <parameter>callback</parameter> (<type>callable</type>).
       Чтобы обойти его, передают значение &null;.
      </para>
      <para>
       Параметр <parameter>callback</parameter> вызывается,
       когда буфер вывода сбрасывается (отправляется), очищается
       или когда буфер вывода сбрасывается в конце скрипта.
      </para>
      <para>
       Сигнатура <parameter>callback</parameter>-функции:
      </para>
      <para>
       <methodsynopsis>
        <type>string</type><methodname><replaceable>handler</replaceable></methodname>
        <methodparam><type>string</type><parameter>buffer</parameter></methodparam>
        <methodparam choice="opt"><type>int</type><parameter>phase</parameter></methodparam>
       </methodsynopsis>
       <variablelist>
        <varlistentry>
         <term><parameter>buffer</parameter></term>
         <listitem>
          <simpara>
           Содержимое буфера вывода.
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><parameter>phase</parameter></term>
         <listitem>
          <simpara>
           Битовая маска из семейства констант
           <link linkend="constant.php-output-handler-start">
            <constant>PHP_OUTPUT_HANDLER_<replaceable>*</replaceable></constant>
           </link>.
           Подробнее о флагах рассказывает раздел
           «<xref linkend="outcontrol.flags-passed-to-output-handlers"/>».
          </simpara>
         </listitem>
        </varlistentry>
       </variablelist>
      </para>
      <para>
       Если параметр <parameter>callback</parameter> вернёт &false;,
       возвращается содержимое буфера.
       Подробнее об этом рассказывает раздел
       «<xref linkend="outcontrol.output-handler-return-values"/>».
      </para>
      <warning>
       <simpara>
        Вызов любой из следующих функций из обработчика вывода
        выдаст фатальную ошибку:
        <function>ob_clean</function>, <function>ob_end_clean</function>,
        <function>ob_end_flush</function>, <function>ob_flush</function>,
        <function>ob_get_clean</function>, <function>ob_get_flush</function>,
        <function>ob_start</function>.
       </simpara>
      </warning>
      <para>
       Подробнее о <parameter>callback</parameter>-функциях (обработчиках вывода)
       рассказывают разделы «<xref linkend="outcontrol.output-handlers"/>»
       и «<xref linkend="outcontrol.working-with-output-handlers"/>».
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>chunk_size</parameter></term>
     <listitem>
      <para>
       Если передали необязательный параметр <parameter>chunk_size</parameter>,
       буфер будет сбрасываться после каждого блока кода,
       размер буфера которого достиг или превысил
       значение параметра <parameter>chunk_size</parameter>.
       Значение по умолчанию <literal>0</literal> означает,
       что вывод буферизуется до тех пор, пока буфер не выключится.
       Подробнее об этом рассказывает раздел «<xref linkend="outcontrol.buffer-size"/>».
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>flags</parameter></term>
     <listitem>
      <para>
       Параметр <parameter>flags</parameter> — битовая маска, которая
       управляет операциями с буфером вывода.
       По умолчанию разрешены очистка, сброс и удаление буферов вывода,
       что явно устанавливают через
       <link linkend="outcontrol.constants.buffer-control-flags">
        флаги управления буфером
       </link>.
       Подробнее об этом рассказывает раздел «<xref linkend="outcontrol.operations-on-buffers"/>».
      </para>
      <para>
       Каждый флаг управляет доступом к набору функций, как описывается ниже:
       <informaltable>
        <tgroup cols="2">
         <thead>
          <row>
           <entry>Константа</entry>
           <entry>Функции</entry>
          </row>
         </thead>
         <tbody>
          <row>
           <entry><constant>PHP_OUTPUT_HANDLER_CLEANABLE</constant></entry>
           <entry>
            <function>ob_clean</function>
           </entry>
          </row>
          <row>
           <entry><constant>PHP_OUTPUT_HANDLER_FLUSHABLE</constant></entry>
           <entry>
            <function>ob_flush</function>
           </entry>
          </row>
          <row>
           <entry><constant>PHP_OUTPUT_HANDLER_REMOVABLE</constant></entry>
           <entry>
            <function>ob_end_clean</function>,
            <function>ob_end_flush</function>,
            <function>ob_get_clean</function>,
            <function>ob_get_flush</function>
           </entry>
          </row>
         </tbody>
        </tgroup>
       </informaltable>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Пример callback-функции, определённой пользователем</title>
    <programlisting role="php">
<![CDATA[
<?php

function callback($buffer)
{
    // Заменить каждое яблоко апельсином
    return (str_replace("яблоки", "апельсины", $buffer));
}

ob_start("callback");

?>
<html>
<body>
<p>Это всё равно, что сравнить яблоки и апельсины.</p>
</body>
</html>
<?php

ob_end_flush();

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
<html>
<body>
<p>Это всё равно, что сравнить апельсины и апельсины.</p>
</body>
</html>
]]>
    </screen>
   </example>
  </para>

  <para>
   <example xml:id="function.ob-start.flags-bc">
    <title>Создание нестираемого буфера вывода</title>
    <programlisting role="php">
<![CDATA[
<?php

ob_start(null, 0, PHP_OUTPUT_HANDLER_STDFLAGS ^ PHP_OUTPUT_HANDLER_REMOVABLE);

?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>ob_get_contents</function></member>
    <member><function>ob_end_clean</function></member>
    <member><function>ob_end_flush</function></member>
    <member><function>ob_implicit_flush</function></member>
    <member><function>ob_gzhandler</function></member>
    <member><function>ob_iconv_handler</function></member>
    <member><function>mb_output_handler</function></member>
    <member><function>ob_tidyhandler</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
