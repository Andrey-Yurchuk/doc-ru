<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 6834bf7ae4817a818a726529f6055ade2ae2bf1c Maintainer: rjhdby Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="function.is-callable" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>is_callable</refname>
  <refpurpose>
   Проверяет, доступно ли значение для вызова как функция в текущей области видимости
  </refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>is_callable</methodname>
   <methodparam><type>mixed</type><parameter>value</parameter></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>syntax_only</parameter><initializer>&false;</initializer></methodparam>
   <methodparam choice="opt"><type>string</type><parameter role="reference">callable_name</parameter><initializer>&null;</initializer></methodparam>
  </methodsynopsis>
  <para>
   Функция проверяет, принадлежит ли значение <parameter>value</parameter> типу <type>callable</type>,
   или что значение доступно для вызова функцией <function>call_user_func</function>.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>value</parameter></term>
     <listitem>
      <para>
       Значение, которое требуется проверить.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>syntax_only</parameter></term>
     <listitem>
      <para>
       Со значением &true; функция проверяет только то,
       могло бы значение <parameter>value</parameter> быть функцией или методом.
       Функция считает доступными для вызова только а) объекты, в классе которых реализовали магический метод
       <link linkend="object.invoke">__invoke</link>, б) объекты класса <classname>Closure</classname>,
       в) строки (&string;), которые содержат возможное название функции, и г) массив (&array;),
       структура которого соответствует синтаксису callable-выражения для передачи callback-функции.
       Корректная структура массива для передачи callback-функции
       предполагает только два элемента, первый из которых — объект или строка,
       а второй — строка.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>callable_name</parameter></term>
     <listitem>
      <para>
       Аргумент получает значение «вызываемого имени» наподобие <literal>"SomeClass::someMethod"</literal>.
       Однако обратите внимание, что хотя
       вызываемое имя <literal>SomeClass::someMethod()</literal> предполагает вызов статического метода,
       метод не статический.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Функция возвращает &true;, если аргумент <parameter>value</parameter> вызывается как функция,
   иначе возвращает &false;.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Пример проверки доступности строки для вызова как функции</title>
    <programlisting role="php">
<![CDATA[
<?php

function someFunction() {}

$functionVariable = 'someFunction';

var_dump(is_callable($functionVariable, false, $callable_name));

var_dump($callable_name);

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
bool(true)
string(12) "someFunction"
]]>
    </screen>
   </example>
   <example>
    <title>Пример проверки доступности массива для вызова как метода</title>
    <programlisting role="php">
<![CDATA[
<?php

class SomeClass
{
    function someMethod() {}
}

$anObject = new SomeClass();

$methodVariable = [$anObject, 'someMethod'];

var_dump(is_callable($methodVariable, true, $callable_name));

var_dump($callable_name);

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
bool(true)
string(21) "SomeClass::someMethod"
]]>
    </screen>
   </example>
   <example>
    <title>Функция <function>is_callable</function> и конструкторы</title>
    <simpara>
     Функция <function>is_callable</function> сообщает, что конструкторы
     невызываемы.
    </simpara>
    <programlisting role="php">
<![CDATA[
<?php

class Foo
{
    public function __construct() {}

    public function foo() {}
}

var_dump(
    is_callable(['Foo', '__construct']),
    is_callable(['Foo', 'foo'])
);

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
bool(false)
bool(false)
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <simplelist>
   <member>
    Объект вызываем, если класс объекта реализует магический метод <link linkend="object.invoke">__invoke()</link>
    и этот метод доступен в текущей области видимости.
   </member>
   <member>
    Имя класса вызываемо, если класс реализует метод <link linkend="object.callstatic">__callStatic()</link>
   </member>
   <member>
    Функция вернёт &true; для произвольного метода объекта, который реализует метод <link linkend="object.call">__call()</link>,
    даже если метод не определили в классе.
   </member>
   <member>
    Функция запускает автозагрузку класса, если вызывается с названием класса.
   </member>
  </simplelist>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>call_user_func</function></member>
    <member><function>function_exists</function></member>
    <member><function>method_exists</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
