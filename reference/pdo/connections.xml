<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: d861a1bcea24f05e52e4938c1ecdf9d70326d7aa Maintainer: tmn Status: ready -->
<!-- Reviewed: no -->
<chapter xml:id="pdo.connections" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Подключения и управление подключениями</title>
 <para>
  Для установки соединений создают экземпляры базового класса — PDO.
  Неважно, через какой драйвер разработчик взаимодействует с базой данных;
  объекты подключения создают по имени класса PDO, независимо от драйвера.
  Конструктор класса принимает аргументы, которые определят источник базы данных
  (англ. Data Source Name, DSN) и необязательные имя пользователя и пароль, если передали.
 </para>
 <para>
  <example>
   <title>Подключение к БД MySQL</title>
   <programlisting role="php">
<![CDATA[
<?php

$dbh = new PDO('mysql:host=localhost;dbname=test', $user, $pass);

?>
]]>
   </programlisting>
  </example>
 </para>
 <para>
  Модуль выбросит исключение <literal>PDOException</literal>,
  если при подключении возникнут ошибки. Исключение перехватывают
  и обрабатывают, или оставляют глобальному обработчику исключений приложения,
  который установили функцией <function>set_exception_handler</function>.
 </para>
 <para>
  <example><title>Пример обработки ошибок подключения</title>
   <programlisting role="php">
<![CDATA[
<?php

try {
    $dbh = new PDO('mysql:host=localhost;dbname=test', $user, $pass);
} catch (PDOException $e) {
    // Например, через какое-то время повторить попытку соединения
}

?>
]]>
   </programlisting>
  </example>
 </para>
 <warning>
  <para>
   Как и остальные <link linkend="language.exceptions">исключения</link>,
   исключение <classname>PDOException</classname> перехватывают явно —
   через блок &catch; или неявно — функцией <function>set_exception_handler</function>.
   По умолчанию непойманное исключение преобразуется в фатальную ошибку уровня
   <constant>E_FATAL_ERROR</constant>.
   Фатальная ошибка будет содержать стек вызовов, из-за которой появляется риск утечки информации о соединении.
   Поэтому на сервере, который работает в производственной среде, в файле &php.ini; для опции
   <link linkend="ini.display-errors"><literal>display_errors</literal></link>
   устанавливают значение <literal>0</literal>.
  </para>
 </warning>
 <para>
  После успешного подключения к базе данных экземпляр класса PDO возвращается в скрипт.
  Соединение остаётся активным в течение жизни объекта PDO.
  Потребуется уничтожить объект, чтобы закрыть соединение. Объект уничтожают
  путём удаления ссылок на объект через присваивание значения &null; переменным,
  которые содержат объект. PHP автоматически закроет соединение по окончании работы скрипта,
  если не сделать этого явно.
 </para>
 <note>
  <simpara>
   Другие ссылки, которые по-прежнему указывают на экземпляр PDO, также потребуется удалить.
   Такие ссылки остаются в экземпляре PDOStatement или в других переменных,
   которые ссылаются на тот же экземпляр PDO. Ссылки удаляют
   путём присваивания значения &null; переменной, которая ссылается на объект PDOStatement.
  </simpara>
 </note>
 <para>
  <example>
   <title>Пример закрытия соединения</title>
   <programlisting role="php">
<![CDATA[
<?php

$dbh = new PDO('mysql:host=localhost;dbname=test', $user, $pass);

// С этого места пользуемся соединением...
$sth = $dbh->query('SELECT * FROM foo');

// ...а здесь соединение больше не требуется; закрываем его
$sth = null;
$dbh = null;

?>
]]>
   </programlisting>
  </example>
 </para>
 <para>
  Установка постоянных соединений с серверами баз данных часто приносит пользу приложениям.
  Постоянные соединения не закрываются при завершении работы скрипта,
  кешируются и переиспользуются, когда другой скрипт запрашивает соединение
  с теми же учётными данными. С постоянными соединениями не требуется создавать
  новые подключения при каждом обмене данными с базой, что увеличивает скорость работы таких приложений.
 </para>
 <para>
  <example>
   <title>Постоянные соединения</title>
   <programlisting role="php">
<![CDATA[
<?php

$dbh = new PDO('mysql:host=localhost;dbname=test', $user, $pass, array(
    PDO::ATTR_PERSISTENT => true
));

?>
]]>
   </programlisting>
  </example>
 </para>
 <para>
  Значение параметра <constant>PDO::ATTR_PERSISTENT</constant> преобразовывается
  в логическое значение (&boolean;): включить или выключить постоянные подключения,
  если только это не числовая строка (&string;), которая разрешает использовать
  несколько пулов постоянных подключений. Это приносит пользу, когда разные соединения
  используют несовместимые настройки, например, разные значения
  режима буферизации <constant>PDO::MYSQL_ATTR_USE_BUFFERED_QUERY</constant>.
 </para>
 <note>
  <para>
   Постоянные соединения включают путём добавления константы
   <constant>PDO::ATTR_PERSISTENT</constant> в массив параметров драйвера,
   которые передают конструктору класса PDO. Драйвер не будет использовать
   постоянные соединения, если установить этот атрибут
   методом <methodname>PDO::setAttribute</methodname> после создания объекта.
  </para>
 </note>
 <note>
  <para>
   При взаимодействии с ODBC-драйвером модуля PDO и если ODBC-библиотеки поддерживают
   объединение подключений в пул по протоколу ODBC, как это делают unixODBC и Windows,
   и, возможно, другие системы, то вместо постоянных PDO-соединений рекомендуют
   оставлять кеширование соединений на уровне ODBC-пула.
   Пул соединений драйвера ODBC разделяет соединения с другими модулями
   в процессе; если PDO-объект попросят кешировать соединение, то такое соединение
   не вернётся в пул соединений драйвера ODBC, из-за чего драйвер создаст дополнительные подключения
   для обслуживания других модулей.
  </para>
 </note>
</chapter>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
