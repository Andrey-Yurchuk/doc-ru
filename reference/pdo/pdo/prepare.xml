<?xml version="1.0" encoding="UTF-8"?>
<!-- EN-Revision: 661e6858acade9f5a08fc8f9c07b605f42f4a700 Maintainer: rjhdby Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="pdo.prepare" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>PDO::prepare</refname>
  <refpurpose>
   Подготавливает запрос к выполнению и возвращает связанный с этим запросом
   объект
  </refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis role="PDO">
   <modifier>public</modifier> <type class="union"><type>PDOStatement</type><type>false</type></type><methodname>PDO::prepare</methodname>
   <methodparam><type>string</type><parameter>query</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>options</parameter><initializer>[]</initializer></methodparam>
  </methodsynopsis>

  <para>
   Подготавливает SQL-запрос к базе данных к запуску посредством метода
   <methodname>PDOStatement::execute</methodname>. Запрос может содержать именованные
   (:name) или неименованные (?) псевдопеременные, которые будут заменены реальными
   значениями во время запуска запроса на выполнение. Использовать одновременно и
   именованные, и неименованные псевдопеременные в одном запросе нельзя, необходимо
   выбрать что-то одно. Используйте псевдопеременные, чтобы привязать к запросу
   пользовательский ввод, не включайте данные, введённые пользователем, напрямую в
   запрос.
  </para>
  <para>
   Вы должны подбирать уникальные имена псевдопеременных для каждого значения,
   которое необходимо передавать в запрос при вызове
   <methodname>PDOStatement::execute</methodname>. Нельзя использовать одну псевдопеременную
   в запросе более одного раза, кроме варианта, когда включён режим эмуляции.
  </para>
  <note>
   <para>
    Псевдопеременные должны представлять только единичный объем данных.
    Ни часть значения, ни служебное слово, ни имя поля, ни какую-либо произвольную
    часть запроса. К примеру, вы не можете связать псевдопеременную с несколькими
    значениями для вставки в конструкцию IN().
   </para>
  </note>
  <para>
   Вызов <methodname>PDO::prepare</methodname> и
   <methodname>PDOStatement::execute</methodname> для запросов, которые будут
   запускаться многократно с различными параметрами, повышает производительность
   приложения, позволяя драйверу кешировать на клиенте и/или сервере
   план выполнения запроса и метаданные, а также помогает избежать SQL-инъекций,
   так как нет необходимости экранировать передаваемые параметры.
  </para>
  <para>
   Если драйвер не поддерживает подготавливаемые запросы, PDO умеет их эмулировать, а
   также может заменять псевдопеременные на то, что больше подходит, если, например,
   драйвер поддерживает только именованные или, наоборот, только неименованные псевдопеременные.
  </para>
  <note>
   <simpara>
    Синтаксический анализатор, используемый для эмулируемых подготовленных операторов
    и для перезаписи именованных параметров или параметров стиля вопросительного знака, поддерживает нестандартные
    обратные слеши для одинарных и двойных кавычек. Это означает, что завершающие
    кавычки, непосредственно предшествующие обратной косой черте, не распознаются как таковые, что
    может привести к неправильному обнаружению параметров, что приведёт к сбою подготовленного оператора
    при его выполнении. Обходной путь — не использовать эмулированную подготовку к таким
    SQL-запросам и избегать перезаписи параметров, используя стиль параметров,
    который изначально поддерживается драйвером.
   </simpara>
  </note>
  <para>
   Начиная с PHP 7.4.0, можно избежать экранирования вопросительных знаков, удвоив их.
   Это означает, что строка <literal>??</literal> будет преобразована в <literal>?</literal> при отправке запроса в базу данных.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>query</parameter></term>
     <listitem>
      <para>
       Это должен быть корректный SQL-запрос с точки зрения целевой СУБД.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>options</parameter></term>
     <listitem>
      <para>
       Этот массив содержит одну или более пар ключ=&gt;значение для установки
       значений атрибутов объекта PDOStatement, который будет возвращён из
       этого метода. В основном, вы будете использовать этот массив для присвоения
       значения <literal>PDO::ATTR_CURSOR</literal> атрибуту
       <literal>PDO::CURSOR_SCROLL</literal>, чтобы получить прокручиваемый курсор.
       У некоторых драйверов могут быть свои специфические настройки, которые
       можно задать во время подготовки запроса.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Если СУБД успешно подготовила запрос, <methodname>PDO::prepare</methodname> возвращает
   объект <classname>PDOStatement</classname>. Если подготовить запрос не удалось,
   <methodname>PDO::prepare</methodname> возвращает &false; или выбрасывает исключение
   <classname>PDOException</classname> (зависит от текущего режима <link
   linkend="pdo.error-handling">обработки ошибок</link>).
  </para>
  <note>
   <para>
    Эмулируемые подготовленные запросы не создаются на сервере баз данных,
    поэтому <methodname>PDO::prepare</methodname> не может проверить правильность
    построенного запроса.
   </para>
  </note>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>
     Подготовка SQL-запроса с именованными параметрами
    </title>
    <programlisting role="php">
<![CDATA[
<?php
/* Выполнение запроса с передачей ему массива параметров */
$sql = 'SELECT name, colour, calories
    FROM fruit
    WHERE calories < :calories AND colour = :colour';
$sth = $dbh->prepare($sql, [PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY]);
$sth->execute(['calories' => 150, 'colour' => 'red']);
$red = $sth->fetchAll();
/* Ключи массива также могут начинаться с двоеточия ":" (необязательно) */
$sth->execute([':calories' => 175, ':colour' => 'yellow']);
$yellow = $sth->fetchAll();
?>
]]>
    </programlisting>
   </example>
   <example>
    <title>Подготовка SQL-запроса с неименованными параметрами (символ '?')</title>
    <programlisting role="php">
<![CDATA[
<?php
/* Выполнение запроса с передачей ему массива параметров */
$sth = $dbh->prepare('SELECT name, colour, calories
    FROM fruit
    WHERE calories < ? AND colour = ?');
$sth->execute([150, 'red']);
$red = $sth->fetchAll();
$sth->execute([175, 'yellow']);
$yellow = $sth->fetchAll();
?>
]]>
    </programlisting>
   </example>
   <example>
    <title>Подготовка SQL-запроса с экранированным вопросительным знаком</title>
    <programlisting role="php">
<![CDATA[
<?php
/* замечание: работает только с базами данных PostgreSQL */
$sth = $dbh->prepare('SELECT * FROM issues WHERE tag::jsonb ?? ?');
$sth->execute(['feature']);
$featureIssues = $sth->fetchAll();
$sth->execute(['performance']);
$performanceIssues = $sth->fetchAll();
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><methodname>PDO::exec</methodname></member>
    <member><methodname>PDO::query</methodname></member>
    <member><methodname>PDOStatement::execute</methodname></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
