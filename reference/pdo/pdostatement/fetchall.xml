<?xml version="1.0" encoding="UTF-8"?>
<!-- EN-Revision: 44bcc82c7d1a0dea5578093833d3172c0c742f5a Maintainer: rjhdby Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="pdostatement.fetchall" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>PDOStatement::fetchAll</refname>
  <refpurpose>Выбирает строки, которые остались в наборе результатов</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis role="PDOStatement">
   <modifier>public</modifier> <type>array</type><methodname>PDOStatement::fetchAll</methodname>
   <methodparam choice="opt"><type>int</type><parameter>mode</parameter><initializer>PDO::FETCH_DEFAULT</initializer></methodparam>
  </methodsynopsis>

  <methodsynopsis role="PDOStatement">
   <modifier>public</modifier> <type>array</type><methodname>PDOStatement::fetchAll</methodname>
   <methodparam><type>int</type><parameter>mode</parameter><initializer>PDO::FETCH_COLUMN</initializer></methodparam>
   <methodparam><type>int</type><parameter>column</parameter></methodparam>
  </methodsynopsis>

  <methodsynopsis role="PDOStatement">
   <modifier>public</modifier> <type>array</type><methodname>PDOStatement::fetchAll</methodname>
   <methodparam><type>int</type><parameter>mode</parameter><initializer>PDO::FETCH_CLASS</initializer></methodparam>
   <methodparam><type>string</type><parameter>class</parameter></methodparam>
   <methodparam><type class="union"><type>array</type><type>null</type></type><parameter>constructorArgs</parameter></methodparam>
  </methodsynopsis>

  <methodsynopsis role="PDOStatement">
   <modifier>public</modifier> <type>array</type><methodname>PDOStatement::fetchAll</methodname>
   <methodparam><type>int</type><parameter>mode</parameter><initializer>PDO::FETCH_FUNC</initializer></methodparam>
   <methodparam><type>callable</type><parameter>callback</parameter></methodparam>
  </methodsynopsis>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>mode</parameter></term>
     <listitem>
      <para>
       Режим управляет содержанием массива, который вернёт метод, как задокументировали
       в описании метода <methodname>PDOStatement::fetch</methodname>. Параметр принимает
       значение по умолчанию, которое определяет константа <constant>PDO::ATTR_DEFAULT_FETCH_MODE</constant>,
       значение по умолчанию которой определяет константа <constant>PDO::FETCH_BOTH</constant>.
      </para>
      <para>
       В параметр передают константу <constant>PDO::FETCH_COLUMN</constant>,
       чтобы извлечь значения только одного столбца.
       Параметром <parameter>column</parameter> задают столбец, данные которого
       требуется извлечь.
      </para>
      <para>
       Название столбца помещают первым в списке столбцов SQL-запроса
       и указывают флаг <constant>PDO::FETCH_UNIQUE</constant>,
       чтобы проиндексировать массив с результатами по значению конкретного столбца,
       а не по последовательным числам.
       Часть данных из столбцов с неуникальными значениями потеряется.
      </para>
      <para>
       Название столбца помещают первым в списке столбцов SQL-запроса
       и указывают флаг <constant>PDO::FETCH_GROUP</constant>,
       чтобы сгруппировать результаты в виде 3-мерного массива, который БД проиндексирует
       по значениям заданного столбца.
      </para>
      <para>
       Для группировки результатов в виде 2-мерного массива
       флаги <constant>PDO::FETCH_GROUP</constant>
       и <constant>PDO::FETCH_COLUMN</constant> указывают через побитовое ИЛИ.
       Результаты сгруппируются по первому столбцу, при этом значениями элементов массива
       будут массивы со списком записей из второго столбца, которые соответствуют записям первого.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
   Дальше идут динамические параметры, которые зависят от режима выборки.
   Эти параметры нельзя использовать с именованными параметрами.
   <variablelist>
    <varlistentry>
     <term><parameter>column</parameter></term>
     <listitem>
      <para>
       Аргумент для этого параметра передают при выборке в режиме
       <constant>PDO::FETCH_COLUMN</constant>. Параметр возвращает
       столбец по индексу, которые начинаются с 0.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>class</parameter></term>
     <listitem>
      <para>
       Аргумент для этого параметра передают при выборке в режиме
       <constant>PDO::FETCH_CLASS</constant>. Параметр сопоставляет
       столбцы строк с названиями свойств класса
       и возвращает экземпляры класса.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>constructorArgs</parameter></term>
     <listitem>
      <para>
       Параметр принимает аргументы для конструктора пользовательского класса,
       когда через параметр <parameter>mode</parameter> установили режим выборки
       <constant>PDO::FETCH_CLASS</constant>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>callback</parameter></term>
     <listitem>
      <para>
       Аргумент для этого параметра передают при выборке в режиме
       <constant>PDO::FETCH_FUNC</constant>. Параметр передаёт столбцы строк
       как аргументы функции обратного вызова и возвращает результаты вызова функции.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Метод <methodname>PDOStatement::fetchAll</methodname> возвращает массив
   со строками, которые остались в наборе результатов.
   Массив представляет каждую строку либо как массив значений столбцов,
   либо как объект, названия свойств которого соответствуют названиям столбцов.
  </para>
  <para>
   При извлечении наборов результатов с большим количеством строк
   метод серьёзно нагружает систему и, возможно, ресурсы сети.
   Наборы результатов лучше обрабатывать средствами СУБД,
   чем извлекать все данные и обрабатывать набор результатов в PHP.
   В языке запросов SQL, например, пользуются условиями WHERE и ORDER BY,
   чтобы ограничить выборку результатов перед извлечением и обработкой в PHP.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  &pdo.errors;
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>8.0.0</entry>
      <entry>
       Теперь метод каждый раз возвращает массив (&array;),
       раньше иногда возвращалось &false;, если возникала ошибка.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Пример извлечения строк, которые остались в наборе результатов</title>
    <programlisting role="php">
<![CDATA[
<?php

$sth = $dbh->prepare("SELECT name, colour FROM fruit");
$sth->execute();

/* Извлекаем строки, которые остались в наборе результатов */
print "Извлечение строк, которые остались в наборе результатов:\n";
$result = $sth->fetchAll();
print_r($result);

?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
Извлечение строк, которые остались в наборе результатов:
Array
(
    [0] => Array
        (
            [name] => apple
            [0] => apple
            [colour] => red
            [1] => red
        )

    [1] => Array
        (
            [name] => pear
            [0] => pear
            [colour] => green
            [1] => green
        )

    [2] => Array
        (
            [name] => watermelon
            [0] => watermelon
            [colour] => pink
            [1] => pink
        )
)
]]>
    </screen>
   </example>
   <example>
    <title>
     Пример извлечения значений одного столбца из набора результатов
    </title>
    <para>
     Следующий пример показывает, как извлечь из набора результатов значения
     только одного столбца, даже если строки содержат значения ряда столбцов.
    </para>
    <programlisting role="php">
<![CDATA[
<?php

$sth = $dbh->prepare("SELECT name, colour FROM fruit");
$sth->execute();

/* Извлекаем значения первого столбца */
$result = $sth->fetchAll(PDO::FETCH_COLUMN, 0);
var_dump($result);
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
Array(3)
(
    [0] =>
    string(5) => apple
    [1] =>
    string(4) => pear
    [2] =>
    string(10) => watermelon
)
]]>
    </screen>
   </example>
   <example>
    <title>
     Пример группировки строк по значениям одного столбца
    </title>
    <para>
     Следующий пример показывает, как получить ассоциативный массив строк
     набора результатов, которые метод сгруппировал по значениям столбца.
     Массив содержит три ключа: значения <literal>apple</literal>
     и <literal>pear</literal> — массивы, каждое из которых содержит два разных цвета;
     а ключ <literal>watermelon</literal> будет массивом только с одним цветом.
    </para>
    <programlisting role="php">
<![CDATA[
<?php

$insert = $dbh->prepare("INSERT INTO fruit(name, colour) VALUES (?, ?)");
$insert->execute(array('apple', 'green'));
$insert->execute(array('pear', 'yellow'));

$sth = $dbh->prepare("SELECT name, colour FROM fruit");
$sth->execute();

/* Группируем записи по значениям первого столбца */
var_dump($sth->fetchAll(PDO::FETCH_COLUMN|PDO::FETCH_GROUP));

?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
array(3) {
  ["apple"]=>
  array(2) {
    [0]=>
    string(5) "green"
    [1]=>
    string(3) "red"
  }
  ["pear"]=>
  array(2) {
    [0]=>
    string(5) "green"
    [1]=>
    string(6) "yellow"
  }
  ["watermelon"]=>
  array(1) {
    [0]=>
    string(5) "pink"
  }
}

]]>
    </screen>
   </example>
   <example>
    <title>
     Создание объекта для каждой строки
    </title>
    <para>
     Следующий пример показывает поведение метода в режиме выборки
     <constant>PDO::FETCH_CLASS</constant>.
    </para>
    <programlisting role="php">
<![CDATA[
<?php

class fruit
{
    public $name;
    public $colour;
}

$sth = $dbh->prepare("SELECT name, colour FROM fruit");
$sth->execute();

$result = $sth->fetchAll(PDO::FETCH_CLASS, "fruit");
var_dump($result);

?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
array(3) {
  [0]=>
  object(fruit)#1 (2) {
    ["name"]=>
    string(5) "apple"
    ["colour"]=>
    string(5) "green"
  }
  [1]=>
  object(fruit)#2 (2) {
    ["name"]=>
    string(4) "pear"
    ["colour"]=>
    string(6) "yellow"
  }
  [2]=>
  object(fruit)#3 (2) {
    ["name"]=>
    string(10) "watermelon"
    ["colour"]=>
    string(4) "pink"
  }
  [3]=>
  object(fruit)#4 (2) {
    ["name"]=>
    string(5) "apple"
    ["colour"]=>
    string(3) "red"
  }
  [4]=>
  object(fruit)#5 (2) {
    ["name"]=>
    string(4) "pear"
    ["colour"]=>
    string(5) "green"
  }
}
]]>
    </screen>
   </example>
   <example>
    <title>
     Пример вызова функции для каждой строки
    </title>
    <para>
     Следующий пример показывает поведение метода в режиме выборки
     <constant>PDO::FETCH_FUNC</constant>.
    </para>
    <programlisting role="php">
<![CDATA[
<?php

function fruit($name, $colour)
{
    return "{$name}: {$colour}";
}

$sth = $dbh->prepare("SELECT name, colour FROM fruit");
$sth->execute();

$result = $sth->fetchAll(PDO::FETCH_FUNC, "fruit");
var_dump($result);

?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
array(3) {
  [0]=>
  string(12) "apple: green"
  [1]=>
  string(12) "pear: yellow"
  [2]=>
  string(16) "watermelon: pink"
  [3]=>
  string(10) "apple: red"
  [4]=>
  string(11) "pear: green"
}
]]>
    </screen>
   </example>

  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><methodname>PDO::query</methodname></member>
    <member><methodname>PDOStatement::fetch</methodname></member>
    <member><methodname>PDOStatement::fetchColumn</methodname></member>
    <member><methodname>PDO::prepare</methodname></member>
    <member><methodname>PDOStatement::setFetchMode</methodname></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
