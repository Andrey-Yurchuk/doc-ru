<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: eae19eb5fe0f5bebcbce382ea7a505cedeb5a883 Maintainer: tmn Status: ready -->
<!-- Reviewed: no -->

<chapter xml:id="pdo.lobs" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Большие объекты</title>
 <para>
  Иногда для работы приложения требуется хранить «большие» порции данных в базе.
  Часто под большим понимают объем данных «около 4 килобайтов или больше»,
  хотя отдельные базы данных спокойно обрабатывают до 32 килобайтов, прежде чем
  размер данных становится «большим». Большие объекты (англ. Large Objects, LOB) бывают
  текстовыми или двоичными. Модуль PDO разрешает работать с такими объектами путём установки
  типа данных <constant>PDO::PARAM_LOB</constant> в методах
  <methodname>PDOStatement::bindParam</methodname>
  или <methodname>PDOStatement::bindColumn</methodname>.
  Флаг <constant>PDO::PARAM_LOB</constant> сообщает объекту PDO, что данные требуется
  отобразить в виде потока, чтобы управлять данными
  <link linkend="ref.stream">через API-интерфейс PHP-потоков</link>.
 </para>
 <para>
  <example>
   <title>Вывод изображения, которое хранится в базе данных</title>
   <para>
    В примере LOB-объект связывают с переменной $lob,
    а затем отправляют в браузер функцией <function>fpassthru</function>.
    Поскольку PDO-объект представил LOB-объект как поток,
    с большим объектом получится работать функциями наподобие
    <function>fgets</function>, <function>fread</function>
    и <function>stream_get_contents</function>.
   </para>
   <programlisting role="php">
<![CDATA[
<?php

$db = new PDO('odbc:SAMPLE', 'db2inst1', 'ibmdb2');

$stmt = $db->prepare("select contenttype, imagedata from images where id=?");
$stmt->execute(array($_GET['id']));
$stmt->bindColumn(1, $type, PDO::PARAM_STR, 256);
$stmt->bindColumn(2, $lob, PDO::PARAM_LOB);
$stmt->fetch(PDO::FETCH_BOUND);

header("Content-Type: $type");

fpassthru($lob);

?>
]]>
   </programlisting>
  </example>
 </para>
 <para>
  <example>
   <title>Вставка изображения в базу данных</title>
   <para>
    Следующий пример открывает файл и передаёт дескриптор файла в объект PDO
    для вставки файла в базу данных в виде LOB-объекта. Объект PDO
    извлечёт содержимое файла и вставит его в базу данных самым
    эффективным способом.
   </para>
   <programlisting role="php">
<![CDATA[
<?php

$db = new PDO('odbc:SAMPLE', 'db2inst1', 'ibmdb2');

$stmt = $db->prepare("insert into images (id, contenttype, imagedata) values (?, ?, ?)");
$id = get_new_id(); // Некоторая функция, которая выделит новый ID

// Предположим, что находимся на странице загрузки файлов на удалённый сервер

$fp = fopen($_FILES['file']['tmp_name'], 'rb');

$stmt->bindParam(1, $id);
$stmt->bindParam(2, $_FILES['file']['type']);
$stmt->bindParam(3, $fp, PDO::PARAM_LOB);

$db->beginTransaction();
$stmt->execute();
$db->commit();

?>
]]>
   </programlisting>
  </example>
 </para>
 <para>
  <example>
   <title>Вставка изображения в базу данных: Oracle</title>
   <para>
    БД Oracle требует другой синтаксис для извлечения содержимого файла
    в виде LOB-объекта и вставки большого объекта в базу данных.
    Вставку больших объектов в БД выполняют в рамках транзакции,
    иначе БД зафиксирует LOB-объект, который только что вставила, с нулевой длиной —
    как часть неявной фиксации, которая возникает при выполнении каждого запроса.
   </para>
   <programlisting role="php">
<![CDATA[
<?php

$db = new PDO('oci:', 'scott', 'tiger');

$stmt = $db->prepare("insert into images (id, contenttype, imagedata) " .
"VALUES (?, ?, EMPTY_BLOB()) RETURNING imagedata INTO ?")
;

$id = get_new_id(); // Некоторая функция, которая выделит новый ID

// Предположим, что находимся на странице загрузки файлов на удалённый сервер

$fp = fopen($_FILES['file']['tmp_name'], 'rb');

$stmt->bindParam(1, $id);
$stmt->bindParam(2, $_FILES['file']['type']);
$stmt->bindParam(3, $fp, PDO::PARAM_LOB);

$db->beginTransaction();
$stmt->execute();
$db->commit();

?>
]]>
   </programlisting>
  </example>
 </para>
</chapter>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
