<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 871b71764cdca8238069f27436d96011a6a2cb36 Maintainer: evvc Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="function.db2-execute" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>db2_execute</refname>
  <refpurpose>Выполняет подготовленный SQL-запрос</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>db2_execute</methodname>
   <methodparam><type>resource</type><parameter>stmt</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>parameters</parameter><initializer>[]</initializer></methodparam>
  </methodsynopsis>
  <para>
   <function>db2_execute</function> выполняет SQL-запрос,
   подготовленный с помощью <function>db2_prepare</function>.
  </para>
  <para>
   Если SQL-запрос возвращает набор результатов, например, инструкция SELECT или CALL для хранимой процедуры,
   которая возвращает один или несколько наборов результатов, вы можете получить строку как массив
   из ресурса <literal>stmt</literal>, используя <function>db2_fetch_assoc</function>,
   <function>db2_fetch_both</function>или <function>db2_fetch_array</function>.
   В качестве альтернативы вы можете использовать <function>db2_fetch_row</function>
   для перемещения указателя набора результатов на следующую строку и выборки столбца из этой строки
   с помощью <function>db2_result</function>.
  </para>
  <para>
   Обратитесь к <function>db2_prepare</function> для краткого обсуждения преимуществ
   использования <function>db2_prepare</function> и
   <function>db2_execute</function> вместо <function>db2_exec</function>.
  </para>

 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>stmt</parameter></term>
     <listitem>
      <para>
       Подготовленный запрос, возвращаемый функцией <function>db2_prepare</function>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>parameters</parameter></term>
     <listitem>
      <para>
       Массив входных параметров, соответствующих любым маркерам параметров,
       содержащимся в подготовленном запросе.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Подготовка и выполнение SQL-запроса с маркерами параметров</title>
    <para>
     В следующем примере подготавливается запрос INSERT, который принимает четыре маркера параметров,
     а затем выполняет итерацию по массиву массивов, содержащих входные значения,
     которые необходимо передать в <function>db2_execute</function>.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$pet = array(0, 'cat', 'Pook', 3.2);

$insert = 'INSERT INTO animals (id, breed, name, weight)
    VALUES (?, ?, ?, ?)';

$stmt = db2_prepare($conn, $insert);
if ($stmt) {
    $result = db2_execute($stmt, $pet);
    if ($result) {
        print "Успешно добавлен новый питомец.";
    }
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Успешно добавлен новый питомец.
]]>
    </screen>
   </example>
   <example>
    <title>Вызов хранимой процедуры с параметром OUT</title>
    <para>
     В следующем примере подготавливается запрос CALL, который принимает один маркер параметра,
     представляющий параметр OUT, связывает переменную PHP <literal>$my_pets</literal>
     с параметром с помощью <function>db2_bind_param</function>, а затем вызывает
     <function>db2_execute</function> для выполнения запроса CALL.
     После выполнения запроса CALL хранимой процедуры значение <literal>$num_pets</literal> изменяется,
     чтобы отразить значение, возвращаемое хранимой процедурой для этого параметра OUT.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$num_pets = 0;
$res = db2_prepare($conn, "CALL count_my_pets(?)");
$rc = db2_bind_param($res, 1, "num_pets", DB2_PARAM_OUT);
$rc = db2_execute($res);
print "У меня $num_pets домашних животных!";
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
У меня 7 домашних животных!
]]>
    </screen>
   </example>
   <example>
    <title>Возврат XML-данных как SQL ResultSet</title>
    <para>
     В следующем примере показано, как работать с документами, хранящимися в столбце XML
     с помощью базы данных SAMPLE. Используя довольно простой SQL/XML,
     этот пример возвращает некоторые узлы в XML-документе в формате SQL ResultSet,
     с которым знакомо большинство пользователей.
    </para>
    <programlisting role="php">
<![CDATA[
<?php

$conn = db2_connect("SAMPLE", "db2inst1", "ibmdb2");

$query = 'SELECT * FROM XMLTABLE(
    XMLNAMESPACES (DEFAULT \'http://posample.org\'),
    \'db2-fn:xmlcolumn("CUSTOMER.INFO")/customerinfo\'
    COLUMNS
    "CID" VARCHAR (50) PATH \'@Cid\',
    "NAME" VARCHAR (50) PATH \'name\',
    "PHONE" VARCHAR (50) PATH \'phone [ @type = "work"]\'
    ) AS T
    WHERE NAME = ?
    ';

$stmt = db2_prepare($conn, $query);

$name = 'Kathy Smith';

if ($stmt) {
    db2_bind_param($stmt, 1, "name", DB2_PARAM_IN);
    db2_execute($stmt);

    while($row = db2_fetch_object($stmt)){
    printf("$row->CID     $row->NAME     $row->PHONE\n");
    }
}
db2_close($conn);

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
1000     Kathy Smith     416-555-1358
1001     Kathy Smith     905-555-7258
]]>
    </screen>
   </example>
   <example>
    <title>Выполнение "JOIN" с данными XML</title>
    <para>
     Следующий пример работает с документами, хранящимися в 2 разных столбцах XML в базе данных SAMPLE.
     Он создаёт 2 временные таблицы из XML-документов из 2 разных столбца и возвращает SQL ResultSet
     с информацией о статусе доставки для клиента.
    </para>
    <programlisting role="php">
<![CDATA[
<?php

$conn = db2_connect("SAMPLE", "db2inst1", "ibmdb2");

$query = '
SELECT A.CID, A.NAME, A.PHONE, C.PONUM, C.STATUS
FROM
XMLTABLE(
XMLNAMESPACES (DEFAULT \'http://posample.org\'),
\'db2-fn:xmlcolumn("CUSTOMER.INFO")/customerinfo\'
COLUMNS
"CID" BIGINT PATH \'@Cid\',
"NAME" VARCHAR (50) PATH \'name\',
"PHONE" VARCHAR (50) PATH \'phone [ @type = "work"]\'
) as A,
PURCHASEORDER AS B,
XMLTABLE (
XMLNAMESPACES (DEFAULT \'http://posample.org\'),
\'db2-fn:xmlcolumn("PURCHASEORDER.PORDER")/PurchaseOrder\'
COLUMNS
"PONUM"  BIGINT PATH \'@PoNum\',
"STATUS" VARCHAR (50) PATH \'@Status\'
) as C
WHERE A.CID = B.CUSTID AND
    B.POID = C.PONUM AND
    A.NAME = ?
';

$stmt = db2_prepare($conn, $query);

$name = 'Kathy Smith';

if ($stmt) {
    db2_bind_param($stmt, 1, "name", DB2_PARAM_IN);
    db2_execute($stmt);

    while($row = db2_fetch_object($stmt)){
    printf("$row->CID     $row->NAME     $row->PHONE     $row->PONUM     $row->STATUS\n");
    }
}

db2_close($conn);

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
1001     Kathy Smith     905-555-7258     5002     Shipped
]]>
    </screen>
   </example>
   <example>
    <title>Возврат SQL-данных как части большого XML-документа</title>
    <para>
     Следующий пример работает с частью документов PRODUCT.DESCRIPTION в базе данных SAMPLE.
     Он создаёт XML-документ, содержащий описание продукта (данные XML) и информацию о ценах (данные SQL).
    </para>
    <programlisting role="php">
<![CDATA[
<?php

$conn = db2_connect("SAMPLE", "db2inst1", "ibmdb2");

$query = '
SELECT
XMLSERIALIZE(
XMLQUERY(\'
    declare boundary-space strip;
    declare default element namespace "http://posample.org";
    <promoList> {
    for $prod in $doc/product
    where $prod/description/price < 10.00
    order by $prod/description/price ascending
    return(
        <promoitem> {
        $prod,
        <startdate> {$start} </startdate>,
        <enddate> {$end} </enddate>,
        <promoprice> {$promo} </promoprice>
            } </promoitem>
    )
    } </promoList>
\' passing by ref DESCRIPTION AS "doc",
PROMOSTART as "start",
PROMOEND as "end",
PROMOPRICE as "promo"
RETURNING SEQUENCE)
AS CLOB (32000))
AS NEW_PRODUCT_INFO
FROM PRODUCT
WHERE PID = ?
';

$stmt = db2_prepare($conn, $query);

$pid = "100-100-01";

if ($stmt) {
    db2_bind_param($stmt, 1, "pid", DB2_PARAM_IN);
    db2_execute($stmt);

    while($row = db2_fetch_array($stmt)){
    printf("$row[0]\n");
    }
}

db2_close($conn);

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
<promoList xmlns="http://posample.org">
    <promoitem>
    <product pid="100-100-01">
        <description>
            <name>Snow Shovel, Basic 22 inch</name>
            <details>Basic Snow Shovel, 22 inches wide, straight handle with D-Grip</details>
            <price>9.99</price>
            <weight>1 kg</weight>
        </description>
    </product>
    <startdate>2004-11-19</startdate>
    <enddate>2004-12-19</enddate>
    <promoprice>7.25</promoprice>
    </promoitem>
</promoList>
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>db2_exec</function></member>
    <member><function>db2_fetch_array</function></member>
    <member><function>db2_fetch_assoc</function></member>
    <member><function>db2_fetch_both</function></member>
    <member><function>db2_fetch_row</function></member>
    <member><function>db2_prepare</function></member>
    <member><function>db2_result</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
