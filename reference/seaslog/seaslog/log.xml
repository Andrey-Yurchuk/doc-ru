<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 4691215483797da841e61de00eef8adba2960d21 Maintainer: sergey Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="seaslog.log" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>SeasLog::log</refname>
  <refpurpose>Общая функция записи в журнал</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <modifier>static</modifier> <type>bool</type><methodname>SeasLog::log</methodname>
   <methodparam><type>string</type><parameter>level</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>message</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>content</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>logger</parameter></methodparam>
  </methodsynopsis>
  <para>
    Общая функция записи в журнал.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>level</parameter></term>
    <listitem>
     <para>
      Можно использовать уровень один из:
      <simplelist>
        <member><link linkend="constant.seaslog-debug">SEASLOG_DEBUG</link></member>
        <member><link linkend="constant.seaslog-info">SEASLOG_INFO</link></member>
        <member><link linkend="constant.seaslog-notice">SEASLOG_NOTICE</link></member>
        <member><link linkend="constant.seaslog-warning">SEASLOG_WARNING</link></member>
        <member><link linkend="constant.seaslog-error">SEASLOG_ERROR</link></member>
        <member><link linkend="constant.seaslog-critical">SEASLOG_CRITICAL</link></member>
        <member><link linkend="constant.seaslog-alert">SEASLOG_ALERT</link></member>
        <member><link linkend="constant.seaslog-emergency">SEASLOG_EMERGENCY</link></member>
      </simplelist>
      Или вы можете создать свой собственный уровень.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>message</parameter></term>
    <listitem>
     <para>
      Сообщение журнала.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>content</parameter></term>
    <listitem>
     <para>
      Сообщение содержит заполнители, которые разработчики заменяют значениями из массива содержимого.
      Если `message` - это `информация журнала от {NAME}`, а `content` - `array('NAME' => 'Никиты')`,
      информация журнала будет `информация журнала от Никиты`.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>logger</parameter></term>
    <listitem>
     <para>
      `logger`, заключённый в третий параметр, будет использоваться прямо сейчас, как временный регистратор,
      если функция SeasLog::setLogger() вызывается в предварительном содержимом.
      Если `logger` равен NULL или "" (пустая строка), SeasLog будет использовать последний регистратор,
      установленный методом <methodname>SeasLog::setLogger</methodname>.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Возвращает TRUE в случае успешного выполнения записи журнала, FALSE в случае возникновения ошибки.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Пример использования <function>SeasLog::log</function></title>
   <programlisting role="php">
<![CDATA[
<?php

var_dump(SeasLog::log(SEASLOG_INFO,'info log'));
var_dump(SeasLog::getBuffer());

//создание нового собственного уровня
var_dump(SeasLog::log('MySelfLevel','info log'));
var_dump(SeasLog::getBuffer());

//с `content`
var_dump(SeasLog::log('MySelfLevel','info log {NAME}',array('NAME' => 'neeke')));
var_dump(SeasLog::getBuffer());

//с `logger`
var_dump(SeasLog::log('MySelfLevel','info log {NAME}',array('NAME' => 'neeke'),'tmp_logger'));
var_dump(SeasLog::getBuffer());


?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
bool(true)
array(1) {
  ["/var/log/www/default/20180707.log"]=>
  array(1) {
    [0]=>
    string(79) "2018-07-07 11:12:37 | INFO | 72427 | 5b402fa56a2ea | 1530933157.436 | info log
"
  }
}

bool(true)
array(1) {
  ["/var/log/www/default/20180707.log"]=>
  array(1) {
    [0]=>
    string(86) "2018-07-07 11:13:59 | MySelfLevel | 72470 | 5b402ff781c5e | 1530933239.532 | info log
"
  }
}

bool(true)
array(1) {
  ["/var/log/www/tmp_logger/20180707.log"]=>
  array(1) {
    [0]=>
    string(92) "2018-07-07 11:28:12 | MySelfLevel | 72833 | 5b40334ce6a2f | 1530934092.946 | info log neeke
"
  }
}

bool(true)
array(1) {
  ["/var/log/www/default/20180707.log"]=>
  array(1) {
    [0]=>
    string(86) "2018-07-07 11:20:12 | INFO | 72616 | 5b40316c3641e | 1530933612.222 | info log neeke
"
  }
}
]]>
   </screen>
  </example>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member><link linkend="ini.seaslog.default-template">seaslog.default_template</link></member>
   <member><methodname>SeasLog::debug</methodname></member>
   <member><methodname>SeasLog::info</methodname></member>
   <member><methodname>SeasLog::notice</methodname></member>
   <member><methodname>SeasLog::warning</methodname></member>
   <member><methodname>SeasLog::error</methodname></member>
   <member><methodname>SeasLog::critical</methodname></member>
   <member><methodname>SeasLog::alert</methodname></member>
   <member><methodname>SeasLog::emergency</methodname></member>
  </simplelist>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
