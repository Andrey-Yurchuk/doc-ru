<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 968c2bc60de3e93d7f38be0b9d2d1b9685a16ea7 Maintainer: rjhdby Status: ready -->
<!-- Reviewed: no -->
<chapter xml:id="mysqlinfo.concepts" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Основные понятия</title>
 <para>
  Эти основные понятия, связанные с драйвером MySQL для PHP.
 </para>

 <section xml:id="mysqlinfo.concepts.buffering">
  <title>Буферизированные и небуферизированные запросы</title>

  <para>
   По умолчанию запросы используют режим буферизации. Это значит, что результаты запроса
   немедленно поступают от сервера MySQL к PHP и сохраняются в памяти PHP-процесса. Это позволяет
   делать дополнительные операции, такие как подсчёт количества строк и перемещение (поиск) текущего
   указателя результата. Это также даёт возможность выполнять новые
   запросы в том же соединении во время работы над результатом последнего запроса.
   Недостаток режима буферизации является то, что большие наборы результатов могут потребовать
   довольно много количество оперативной памяти.
   Память остаётся занятой до тех пор, пока все указатели на результирующий набор не будут
   удалены или результирующий набор не будет явно освобождён, что автоматически происходит
   во время окончания последнего запроса.
   Термин "результат сохранения" ("store result") также используется для режима буферизации,
   так как весь результирующий набор сохраняется сразу.
  </para>

  <note>
   <para>
    При использовании libmysqlclient в качестве библиотеки ограничение памяти PHP
    не будет учитывать память используемую для результирующих наборов, если
    данные не будут сохранены в переменные PHP.
    С mysqlnd учёт памяти также будет включать в себя размер результирующего набора.
   </para>
  </note>

  <para>
   Небуферизованные MySQL запросы выполняются, а затем ожидают получения
   данных с сервера MySQL. Это использует меньше памяти
   на стороне PHP, но может увеличить нагрузку на сервер. Пока полный результирующий набор
   не будет передан с сервера, никакие дальнейшие запросы не могут быть отправлены через это же
   соединение. Небуферизированные запросы также могут быть отложены как "use result".
   Когда все строки из набора результатов извлечены, набор результатов исчезает
   и его нельзя повторно итерировать.
  </para>

  <para>
   Исходя из этих характеристик, небуферизированные запросы следует использовать только в тех случаях,
   когда ожидается большой набор результатов, который будет обрабатываться последовательно.
   Небуферизованные запросы содержат ряд подводных камней, что усложняет их использование,
   например, количество строк в наборе результатов неизвестно до тех пор,
   пока не будет извлечена последняя строка.
   Буферизованные запросы - более простой и гибкий способ обработки наборов результатов.
  </para>

  <para>
   Поскольку буферизированные запросы применяются по умолчанию, следующие примеры продемонстрируют
   как выполнить небуферизированные запросы в каждом из API
  </para>

  <example>
   <title>Пример небуферизированного запроса: mysqli</title>
   <programlisting role="php">
<![CDATA[
<?php
$mysqli  = new mysqli("localhost", "my_user", "my_password", "world");
$unbufferedResult = $mysqli->query("SELECT Name FROM City", MYSQLI_USE_RESULT);

foreach ($unbufferedResult as $row) {
    echo $row['Name'] . PHP_EOL;
}
?>
]]>
   </programlisting>
  </example>

  <example>
   <title>Пример небуферизированного запроса: pdo_mysql</title>
   <programlisting role="php">
<![CDATA[
<?php
$pdo = new PDO("mysql:host=localhost;dbname=world", 'my_user', 'my_password');
$pdo->setAttribute(PDO::MYSQL_ATTR_USE_BUFFERED_QUERY, false);

$unbufferedResult = $pdo->query("SELECT Name FROM City");
foreach ($unbufferedResult as $row) {
    echo $row['Name'] . PHP_EOL;
}
?>
]]>
   </programlisting>
  </example>
 </section>

 <section xml:id="mysqlinfo.concepts.charset">
  <title>Кодировки символов</title>

  <para>
   В идеальном случае кодировка символов должна устанавливаться на уровне сервера и делать
   это согласно описанию в разделе
   <link xlink:href="&url.mysql.charsets.config;">Конфигурация кодировки символов</link>
   документации сервера MySQL.
   В качестве альтернативы каждый MySQL API предлагает метод
   для установки кодировки символов во время выполнения.
  </para>

  <caution>
   <title>Кодировка символов и экранирование символов</title>
   <para>
    Кодировка символов должна быть чётко определена, поскольку влияет на каждое действие,
    в том числе на действия с последствиями для безопасности.
    Например, механизмы экранирования (такие как <function>mysqli_real_escape_string</function> для mysqli и <methodname>PDO::quote</methodname> для PDO_MySQL) зависят от этих настроек.
    Важно понимать, что эти функции не используют кодировку символов определённую в запросе, так например, следующие запросы не будут влиять на поведение этих функций:
   </para>
  </caution>

  <example>
   <title>Проблемы установки кодировки символов с помощью SQL</title>
   <programlisting role="php">
<![CDATA[
<?php

$mysqli = new mysqli("localhost", "my_user", "my_password", "world");

// Этот запрос не влияет на поведение $mysqli->real_escape_string();
$mysqli->query("SET NAMES utf8mb4");

// И этот не влияет на $mysqli->real_escape_string();
$mysqli->query("SET CHARACTER SET utf8mb4");

// но вот этот запрос повлияет на поведение $mysqli->real_escape_string();
$mysqli->set_charset('utf8mb4');

// а этот НЕ повлияет, потому что нельзя использовать "-"
$mysqli->set_charset('UTF-8'); // (utf8mb4, а не UTF-8)
?>
]]>
   </programlisting>
  </example>

  <para>
   Примеры ниже демонстрируют, как правильно изменять кодировку символов
   во время выполнения, используя каждый из API.
  </para>

  <note>
   <title>Возможная путаница с UTF-8</title>
   <para>
    Поскольку имена кодировок символов в MySQL не содержат тире/дефис,
    строка "utf8" применяется в MySQL для установки кодировки UTF-8 (до 3 байт в кодировке Unicode UTF-8).
    Строка "UTF-8" неприемлема и выбросит ошибку при установке кодировки символов.
   </para>
  </note>

  <example>
   <title>Пример установки кодировки символов: mysqli</title>
   <programlisting role="php">
<![CDATA[
<?php
$mysqli = new mysqli("localhost", "my_user", "my_password", "world");

echo 'Первоначальная кодировка: ' . $mysqli->character_set_name() . "\n";

if (!$mysqli->set_charset('utf8mb4')) {
    printf("Ошибка загрузки кодировки utf8mb4: %s\n", $mysqli->error);
    exit;
}

echo 'Ваша текущая кодировка: ' . $mysqli->character_set_name() . "\n";
?>
]]>
   </programlisting>
  </example>

  <example>
   <title>Пример установки кодировки символов: <link linkend="ref.pdo-mysql.connection">pdo_mysql</link></title>
   <programlisting role="php">
<![CDATA[
<?php
$pdo = new PDO("mysql:host=localhost;dbname=world;charset=utf8mb4", 'my_user', 'my_pass');
?>
]]>
   </programlisting>
  </example>
 </section>

</chapter>
