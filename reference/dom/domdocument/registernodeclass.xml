<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 0e2dfef689e3b40b8a826a0f64ba741863ee8c2a Maintainer: tmn Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="domdocument.registernodeclass" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>DOMDocument::registerNodeClass</refname>
  <refpurpose>
   Регистрирует производный пользовательский класс, через который создаётся тип базового узла
  </refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis role="DOMDocument">
   <modifier>public</modifier> <type>true</type><methodname>DOMDocument::registerNodeClass</methodname>
   <methodparam><type>string</type><parameter>baseClass</parameter></methodparam>
   <methodparam><type class="union"><type>string</type><type>null</type></type><parameter>extendedClass</parameter></methodparam>
  </methodsynopsis>

  <para>
   Метод регистрирует пользовательский класс, который расширяет класс PHP-модуля DOM
   и который модуль затем будет использовать, чтобы создавать базовые узлы документа.
  </para>
  <para>
   Метод не входит в DOM-стандарт.
  </para>
  <caution>
   <simpara>
    Конструктор объектов классов узлов, которые зарегистрировали методом, не вызывается.
   </simpara>
  </caution>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>baseClass</parameter></term>
     <listitem>
      <para>
       Класс модуля DOM, который требуется расширить. Список классов модуля содержит
       <link linkend="book.dom">введение</link> к главе об объектной модели документов.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>extendedClass</parameter></term>
     <listitem>
      <para>
       Название пользовательского производного класса. Метод удалит классы,
       которые прежде зарегистрировали как расширение базового класса <parameter>baseClass</parameter>,
       если передать значение &null;.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.true.always;
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>8.4.0</entry>
      <entry>
       Метод <methodname>DOMDocument::registerNodeClass</methodname>
       теперь предварительно возвращает значение <type>true</type>.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>
     Добавление нового метода в класс DOMElement для упрощения кода
    </title>
    <programlisting role="php">
<![CDATA[
<?php

class myElement extends DOMElement
{
    function appendElement($name)
    {
        return $this->appendChild(new myElement($name));
    }
}

class myDocument extends DOMDocument
{
    function setRoot($name)
    {
        return $this->appendChild(new myElement($name));
    }
}

$doc = new myDocument();
$doc->registerNodeClass('DOMElement', 'myElement');

// С этого момента добавление одного элемента к другому
// требует только одного вызова метода!
$root = $doc->setRoot('root');
$child = $root->appendElement('child');
$child->setAttribute('foo', 'bar');

echo $doc->saveXML();


?>
]]>
    </programlisting>
    &example.outputs;
    <screen role="xml">
<![CDATA[
<?xml version="1.0"?>
<root><child foo="bar"/></root>
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>
     Получение элементов в виде пользовательского класса
    </title>
    <programlisting role="php">
<![CDATA[
<?php

class myElement extends DOMElement
{
    public function __toString()
    {
        return $this->nodeValue;
    }
}

$doc = new DOMDocument();
$doc->loadXML("<root><element><child>text in child</child></element></root>");

$doc->registerNodeClass("DOMElement", "myElement");

$element = $doc->getElementsByTagName("child")->item(0);
var_dump(get_class($element));

// Наконец оценим пользу, которую приносит магический метод __toString
echo $element;

?>
]]>
    </programlisting>
    &example.outputs;
    <screen role="xml">
<![CDATA[
string(9) "myElement"
text in child
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>
     Получение имени документа владельца
    </title>
    <para>
     Свойство <varname>ownerDocument</varname> ссылается на экземпляр пользовательского класса,
     когда создают пользовательский документ <classname>DOMDocument</classname>.
     Модуль уничтожит объект пользовательского документа и создаст вместо него
     новый экземпляр класса <classname>DOMDocument</classname>, если удалить все ссылки на пользовательский документ.
     Поэтому модуль разрешает регистрировать методом <function>DOMDocument::registerNodeClass</function>
     пользовательские типы документов, которые расширяют класс <classname>DOMDocument</classname>.
    </para>
    <programlisting role="php">
<![CDATA[
<?php

class MyDOMDocument extends DOMDocument {}

class MyOtherDOMDocument extends DOMDocument {}

// Создаём объект MyDOMDocument с XML-содержимым
$doc = new MyDOMDocument();
$doc->loadXML("<root><element><child>text in child</child></element></root>");

$child = $doc->getElementsByTagName("child")->item(0);

// Текущий владелец узла — объект MyDOMDocument
var_dump(get_class($child->ownerDocument));

// Вызов уничтожит объект MyDOMDocument
unset($doc);

// И создаст новый экземпляр класса DOMDocument
var_dump(get_class($child->ownerDocument));

// Импортируем узел из объекта MyDOMDocument
$newdoc = new MyOtherDOMDocument();
$child = $newdoc->importNode($child);

// Регистрируем пользовательский класс DOMDocument
$newdoc->registerNodeClass("DOMDocument", "MyOtherDOMDocument");

var_dump(get_class($child->ownerDocument));
unset($doc);

// Модуль создал новый объект MyOtherDOMDocument
var_dump(get_class($child->ownerDocument));

?>
]]>
    </programlisting>
    &example.outputs;
    <screen role="xml">
<![CDATA[
string(13) "MyDOMDocument"
string(11) "DOMDocument"
string(18) "MyOtherDOMDocument"
string(18) "MyOtherDOMDocument"
]]>
    </screen>
   </example>
  </para>
  <para>
   <example xml:id="domdocument.registernodeclass.example.transient">
    <title>Пользовательские объекты временны</title>
    <caution>
     <simpara>
      Объекты классов, которые регистрируют для узлов этим методом, хранятся временно —
      объекты уничтожаются, когда в PHP-коде не остаётся ссылок на эти объекты, и воссоздаются
      при повторном извлечении. Поэтому значения пользовательских свойств
      теряются после воссоздания объекта документа.
     </simpara>
    </caution>
    <programlisting role="php">
<![CDATA[
<?php

class MyDOMElement extends DOMElement
{
    public $myProp = 'значение по умолчанию';
}

$doc = new DOMDocument();
$doc->registerNodeClass('DOMElement', 'MyDOMElement');

$node = $doc->createElement('a');
$node->myProp = 'изменённое значение';
$doc->appendChild($node);

echo $doc->childNodes[0]->myProp, PHP_EOL;
unset($node);
echo $doc->childNodes[0]->myProp, PHP_EOL;

?>
]]>
    </programlisting>
    &example.outputs;
    <screen role="xml">
<![CDATA[
изменённое значение
значение по умолчанию
]]>
    </screen>
   </example>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
