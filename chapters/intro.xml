<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: ba36a88377878340feb08b36cdde88c26f34df6a Maintainer: shein Status: ready -->
<!-- Reviewed: no -->
<chapter xml:id="introduction" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <info><title>Введение</title></info>

 <section xml:id="intro-whatis">
  <title>Что такое PHP?</title>
  <para>
   <acronym>PHP</acronym> (рекурсивный акроним словосочетания
   <literal>PHP: Hypertext Preprocessor</literal>) — распространённый
   язык программирования общего назначения с открытым исходным кодом.
   PHP специально сконструирован для веб-разработок
   и код языка может внедряться непосредственно в HTML-разметку.
  </para>
  <para>
   Простой ответ, но что он означает? Вот пример кода:
  </para>
  <para>
   <example>
    <info><title>Пример программирования на языке PHP</title></info>
    <programlisting role="php">
<![CDATA[
<!DOCTYPE html>
<html>
    <head>
        <title>Пример</title>
    </head>
    <body>

        <?php
        echo "Привет, я — PHP-скрипт!";
        ?>

    </body>
</html>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   Вместо рутинного вывода HTML-кода командами языка
   (как это происходит, например, в языках Perl или C),
   скрипт PHP содержит HTML-разметку со встроенным кодом (в нашем
   случае, это вывод текста «Привет, я — PHP-скрипт!»).
   PHP-код отделяется специальными <link
   linkend="language.basic-syntax.phpmode">начальным и конечным тегами
   <code>&lt;?php</code> и <code>?&gt;</code></link>,
   которые позволяют переключаться в «PHP-режим» и выходить из него.
  </para>
  <para>
   Язык PHP отличается от языка JavaScript, который выполняется на клиентской стороне,
   тем, что PHP-скрипты выполняются на сервере, и генерируют HTML-разметку, которая затем
   посылается клиенту. Клиент получит результаты запуска этого скрипта,
   но не будет знать, какой базовый код сгенерировал результаты. Даже
   можно настроить веб-сервер так, чтобы
   обычные HTML-файлы обрабатывались процессором PHP, и тогда клиенты
   даже не смогут узнать, получают ли они обычный HTML-файл или
   результат выполнения скрипта.
  </para>
  <para>
   PHP крайне прост для освоения, но вместе с тем способен
   удовлетворить запросы профессиональных программистов.
   Не бойтесь читать длинный список возможностей PHP.
   Написать простые PHP-скрипты получится уже через 1-2 часа
   после начала знакомства с языком.
  </para>
  <para>
   Хотя PHP, главным образом, предназначен для работы
   в среде веб-серверов, область его применения не ограничивается
   только этим. Продолжайте чтение и не пропустите главу
   «<link linkend="intro-whatcando">Возможности PHP</link>» или начните непосредственно
   с «<link linkend="tutorial">Вводного руководства</link>», если заинтересовались
   исключительно веб-программированием.
  </para>
 </section>

 <section xml:id="intro-whatcando">
  <info><title>Возможности PHP</title></info>
  <para>
   PHP умеет всё. Главная область применения PHP —
   написание скриптов, которые работают на стороне сервера;
   поэтому PHP способен выполнять всё то, что выполняет любая другая CGI-программа,
   например, обрабатывать данные форм, генерировать динамические
   страницы или отсылать и принимать cookies.
   Но PHP умеет намного больше.
  </para>
  <para>
   PHP применяют в трёх основных областях.
   <itemizedlist>
    <listitem>
     <simpara>
      Создают скрипты, которые выполняются на стороне сервера.
      Это традиционная и основная цель PHP. Чтобы написать и выполнить скрипт, понадобятся три вещи:
      Интерпретатор PHP (в виде CGI-программы или серверного модуля),
      веб-сервер и браузер. Чтобы просматривать результаты
      выполнения PHP-скриптов в браузере, нужен
      работающий веб-сервер и установленный PHP. Просмотреть вывод
      PHP-программы можно в браузере, получив PHP-страницу, которую сгенерировал сервер.
      Всё это можно запустить на домашнем компьютере, если вы только экспериментируете
      с программированием на PHP.
      Более подробные сведения даёт раздел
      «<link linkend="install">Советы по установке</link>».
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      Создают скрипты для выполнения в командной строке.
      Можно создать PHP-скрипт для запуска без сервера или браузера.
      Всё, что потребуется — синтаксический анализатор PHP. Такой способ работы
      с PHP идеально подходит для скриптов, которые требуется выполнять
      регулярно, например, через cron (на платформах *nix или Linux) или через
      планировщик задач (Task Scheduler) на платформах
      Windows. Эти скрипты также используются для простой обработки текстов.
      Дополнительную информацию даёт раздел
      «<link linkend="features.commandline">Работа с PHP из командной строки</link>».
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      Создают оконные приложения, которые выполняются на стороне
      клиента. Возможно, PHP — не самый лучший
      язык для подобных приложений, но,
      если разработчик очень хорошо знаете PHP и хочет
      использовать отдельные возможности языка в клиентских приложениях,
      он может использовать модуль PHP-GTK, чтобы создавать такие приложения.
      Похожим образом создают и кросс-платформенные приложения.
      Модуль PHP-GTK — PHP-модуль, который не поставляется вместе с основным дистрибутивом PHP.
      Если заинтересовались, посетите <link xlink:href="&url.php.gtk;">сайт
      модуля PHP-GTK</link>.
     </simpara>
    </listitem>
   </itemizedlist>
  </para>
  <para>
   PHP <link linkend="install">работает</link> на большей части операционных систем, включая
   Linux, многие модификации Unix (например, HP-UX, Solaris и OpenBSD),
   Microsoft Windows, macOS, RISC OS и многие другие.
   PHP также поддерживает бо́льшую часть современных
   веб-серверов наподобие Apache, IIS и многих других.
   Сюда входит любой веб-сервер, который умеет работать
   с двоичным PHP-файлом FastCGI-интерфейса, например Lighttpd и nginx.
   PHP работает либо как модуль, либо как CGI-процессор.
  </para>
  <para>
   Таким образом, выбирая PHP, программист получает свободу выбора
   операционной системы и веб-сервера. Более того, у программиста
   появляется выбор между процедурным
   или объектно-ориентированным программированием (ООП), или сочетанием обеих парадигм.
  </para>
  <para>
   Программирование на PHP не ограничивается выводом HTML-разметки. Возможности PHP
   включают вывод файлов разных типов, например, изображений или PDF-файлов,
   шифрование данных и отправку электронной почты.
   Можно также легко выводить любой текст, например JSON или XML.
   PHP умеет автоматически генерировать эти файлы и сохранять
   их в файловой системе, а не выводить на печать,
   формируя серверный кеш для динамического содержимого.
  </para>
  <para>
   Одно из значительных преимуществ языка PHP — поддержка
   <link linkend="refs.database">широкого круга баз данных</link>.
   Создать веб-страницу с поддержкой базы данных невероятно просто.
   Можно воспользоваться модулем конкретной базы данных
   (например, <link linkend="book.mysqli">mysql</link>) или использовать
   уровень абстракции доступа к базам данных, например, модуль <link linkend="book.pdo">PDO</link>,
   или подсоединиться к базе данных, которая поддерживает Открытый Стандарт
   Соединения Баз Данных (ODBC), через одноимённый модуль <link linkend="book.uodbc">ODBC</link>.
   Для других баз данных, например, CouchDB, можно воспользоваться библиотекой <link linkend="book.curl">cURL</link>
   или <link linkend="book.sockets">сокетами</link>.
  </para>
  <para>
   PHP также поддерживает взаимодействие с другими сервисами
   через протоколы LDAP, IMAP, SNMP, NNTP, POP3, HTTP,
   COM (на платформах Windows) и многие другие. Кроме того, программист
   получает возможность работать с сетевыми сокетами напрямую.
   PHP поддерживает стандарт обмена сложными структурами
   данных WDDX практически между всеми языками веб-программирования.
   Обращая внимание на взаимодействие между различными
   языками, следует упомянуть о поддержке объектов языка Java и возможности
   использовать их как PHP-объекты.
  </para>
  <para>
   У PHP есть полезные возможности <link linkend="refs.basic.text">по обработке текста</link>,
   включая Perl-совместимые регулярные выражения (<link linkend="book.pcre">PCRE</link>)
   и много других модулей и инструментов <link linkend="refs.xml">для обработки и доступа
   к XML-документам</link>. PHP стандартизирует XML-модули
   на прочной основе библиотеки <link linkend="book.libxml">libxml2</link>,
   а также расширяет набор инструментов для обработки XML-документов за счёт добавления поддержки модулей
   <link linkend="book.simplexml">SimpleXML</link>, <link linkend="book.xmlreader">XMLReader</link>
   и <link linkend="book.xmlwriter">XMLWriter</link>.
  </para>
  <para>
   Есть ещё много других интересных модулей, которые распределили
   как <link linkend="extensions">в алфавитном порядке</link>,
   так и <link linkend="funcref">по категориям</link>.
   Существуют также дополнительные <link linkend="install.pecl.intro">PECL-модули</link>,
   часть которых описывает это руководство, например, модуль <link xlink:href="&url.xdebug;">XDebug</link>.
  </para>
  <para>
   Как видно, этой страницы не достаточно, чтобы
   перечислить все возможности и преимущества языка PHP.
   Прочитайте разделы «<link linkend="install">Об установке
   PHP</link>» и просмотрите главу «<link linkend="funcref">Справочник
   по функциям</link>», которые дают дополнительные сведения
   о модулях, которые упоминает эта часть руководства.
  </para>
 </section>

</chapter>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
