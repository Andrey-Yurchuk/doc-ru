<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 8de1190205e99790677b57312dd36bff17b6b67c Maintainer: shein Status: ready -->
<!-- Reviewed: no -->
<sect1 xml:id="language.types.type-juggling">
 <title>Манипуляции с типами</title>

 <simpara>
  PHP не требует явного определения типа при объявлении переменной.
  В этом случае тип переменной определяется значением, которое она хранит.
  То есть, если переменной <varname>$var</varname> присваивается значение типа строка (<type>string</type>), то
  <varname>$var</varname> изменит тип на строку (<type>string</type>).
  Если после этого переменной <varname>$var</varname> будет присвоено значение типа целое число (<type>int</type>), то она изменит тип на целое число (<type>int</type>).
 </simpara>

 <para>
  В определённых контекстах PHP может попытаться автоматически преобразовать тип значения в другой. Существуют следующие различные контексты:
  <itemizedlist>
   <listitem>
    <simpara>Числовой контекст</simpara>
   </listitem>
   <listitem>
    <simpara>Строчный контекст</simpara>
   </listitem>
   <listitem>
    <simpara>Логический контекст</simpara>
   </listitem>
   <listitem>
    <simpara>Контекст целых чисел и строк</simpara>
   </listitem>
   <listitem>
    <simpara>Сравнительный контекст</simpara>
   </listitem>
   <listitem>
    <simpara>Контекст функций</simpara>
   </listitem>
  </itemizedlist>
 </para>

 <note>
  <simpara>
   Когда значение нужно интерпретировать как другой тип, само значение <emphasis>не</emphasis> меняет тип.
  </simpara>
 </note>

 <simpara>
  Чтобы принудительно установить тип переменной, смотрите раздел <link linkend="language.types.typecasting">Приведение типа</link>.
  Чтобы изменить тип переменной, смотрите описание функции <function>settype</function>.
 </simpara>

 <sect2>
  <title>Числовой контекст</title>

  <simpara>
   Контекст при использовании
   <link linkend="language.operators.arithmetic">арифметического оператора</link>.
  </simpara>

  <simpara>
   В данном контексте, если один из операндов является числом с плавающей точкой (<type>float</type>) (или не интерпретируется как целое число (<type>int</type>)),
   оба операнда интерпретируются как число с плавающей точкой (<type>float</type>)
   и результатом будет число с плавающей точкой (<type>float</type>).
   В противном случае операнды будут интерпретированы как целое число (<type>int</type>)
   и результатом также будет целое число (<type>int</type>).
   Начиная с PHP 8.0.0, если один из операндов не может быть интерпретирован, выбрасывается ошибка <classname>TypeError</classname>.
  </simpara>
 </sect2>

 <sect2>
  <title>Строчный контекст</title>

  <simpara>
   Контекст при использовании функций <function>echo</function>,
   <function>print</function>, интерполяции строк
   или строкового <link linkend="language.operators.string">оператора конкатенации</link>.
  </simpara>

  <simpara>
   В данном контексте значение будет интерпретироваться как строка (<type>string</type>).
  </simpara>
 </sect2>

 <sect2>
  <title>Логический контекст</title>

  <simpara>
   Контекст при использовании условных операторов, <link linkend="language.operators.comparison.ternary">тернарного оператора</link> или <link linkend="language.operators.logical">логического оператора</link>.
  </simpara>

  <simpara>
   В данном контексте значение будет интерпретироваться как логическое значение (<type>bool</type>).
  </simpara>
 </sect2>

 <sect2>
  <title>Контекст целых чисел и строк</title>

  <simpara>
   Контекст при использовании <link linkend="language.operators.bitwise">побитовых операторов</link>.
  </simpara>

  <simpara>
   В данном контексте, если у всех операндов тип строка (<type>string</type>), результат также будет строкой (<type>string</type>).
   В противном случае операнды будут интерпретированы как целое число (<type>int</type>)
   и результат также будет целым числом (<type>int</type>).
   Начиная с PHP 8.0.0, если один из операндов не может быть интерпретирован, то будет выброшена ошибка <classname>TypeError</classname>.
  </simpara>
 </sect2>

 <sect2>
  <title>Сравнительный контекст</title>

  <simpara>
   Контекст при использовании <link linkend="language.operators.comparison">оператора сравнения</link>.
  </simpara>

  <simpara>
   Преобразования типов, которые происходят в этом контексте, объясняются в <link linkend="language.operators.comparison.types">таблице сравнения различных типов</link> раздела Операторы сравнения.
  </simpara>
 </sect2>

 <sect2>
  <title>Контекст функций</title>

  <simpara>
   Контекст, когда значение передаётся типизированному параметру, свойству или возвращается из функции, в которой объявлен тип возвращаемого значения.
  </simpara>

  <para>
   В этом контексте, когда активен режим строгой типизации (по умолчанию), только скалярные значения могут быть преобразованы в другое скалярное значение.
   Для объявлений простых типов поведение следующее:
   <itemizedlist>
    <listitem>
     <simpara>
      Объявление типа <type>bool</type>: значение интерпретируется как логическое значение (<type>bool</type>).
     </simpara>
     <simpara>
      Объявление типа <type>int</type>: значение интерпретируется как целое число (<type>int</type>),
      если преобразование хорошо определено. Например, строка является
      <link linkend="language.types.numeric-strings">числовой строкой</link>.
     </simpara>
     <simpara>
      Объявление типа <type>float</type>: значение интерпретируется как число с плавающей точкой (<type>float</type>)
      если преобразование хорошо определено. Например, строка является
      <link linkend="language.types.numeric-strings">числовой строкой</link>.
     </simpara>
     <simpara>
      Объявление типа <type>string</type>: значение интерпретируется как строка (<type>string</type>).
     </simpara>
    </listitem>
   </itemizedlist>

   Если объявление типа является объединённым, смотрите раздел
   <link linkend="language.types.declarations.union.coercive">Приведение для объединённых типов</link>.
  </para>

  <warning>
   <simpara>
    Внутренние функции автоматически подставляют &null; к скалярным типам,
    это поведение <emphasis>УСТАРЕЛО</emphasis> в PHP 8.1.0.
   </simpara>
  </warning>
 </sect2>


 <sect2 xml:id="language.types.typecasting">
  <title>Приведение типов</title>

  <simpara>
   Приведение типа преобразует значение к выбранному типу,
   записывая тип в круглых скобках перед преобразуемым значением.
  </simpara>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$foo = 10;   // $foo - это целое число
$bar = (bool) $foo;   // $bar - это логическое значение
?>
]]>
   </programlisting>
  </informalexample>

  <simpara>
   Допускаются следующие приведения типов:
  </simpara>


  <simplelist>
   <member><literal>(int)</literal> - приведение типа к целому числу (<type>int</type>)</member>
   <member><literal>(bool)</literal> - приведение типа к логическому значению (<type>bool</type>)</member>
   <member><literal>(float)</literal> - приведение типа к числу с плавающей точкой (<type>float</type>)</member>
   <member><literal>(string)</literal> - приведение типа к строке (<type>string</type>)</member>
   <member><literal>(array)</literal> - приведение типа к массиву (<type>array</type>)</member>
   <member><literal>(object)</literal> - приведение типа к объекту (<type>object</type>)</member>
   <member><literal>(unset)</literal> - приведение типа к <type>NULL</type></member>
  </simplelist>

  <note>
   <para>
    <literal>(integer)</literal> является псевдонимом приведения типа <literal>(int)</literal>.
    <literal>(boolean)</literal> является псевдонимом приведения типа <literal>(bool)</literal>.
    <literal>(binary)</literal> является псевдонимом приведения типа <literal>(string)</literal>.
    <literal>(double)</literal> и <literal>(real)</literal> являются псевдонимами приведения типа <literal>(float)</literal>.
    Эти приведения не используют каноническое имя типа и не рекомендуются.
   </para>
  </note>

  <warning>
   <simpara>
    Псевдоним приведения типа <literal>(real)</literal> устарел, начиная с PHP 8.0.0.
   </simpara>
  </warning>

  <warning>
   <simpara>
    Приведение типа <literal>(unset)</literal> устарело, начиная с версии PHP 7.2.0.
    Обратите внимание, что приведение <literal>(unset)</literal> равносильно присвоению переменной или вызову значения <type>NULL</type>.
    Приведение <literal>(unset)</literal> удалено в PHP 8.0.0.
   </simpara>
  </warning>

  <caution>
   <simpara>
   Приведение типа <literal>(binary)</literal> и префикс <literal>b</literal> существуют для прямой поддержки.
   В настоящее время <literal>(binary)</literal> и <literal>(string)</literal> идентичны, однако это может измениться и на это не следует полагаться.
   </simpara>
  </caution>

  <note>
   <para>
    Пробелы игнорируются в круглых скобках при приведении типа.
    Таким образом, следующие два приведения типов эквивалентны:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$foo = (int) $bar;
$foo = ( int ) $bar;
?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </note>

  <informalexample>
   <simpara>
    Приведение строк (<type>string</type>) и переменных к бинарным строкам (<type>string</type>):
   </simpara>

   <programlisting role="php">
<![CDATA[
<?php
$binary = (binary) $string;
$binary = b"binary string";
?>
]]>
   </programlisting>
  </informalexample>

  <note>
   <simpara>
    Вместо приведения переменной к типу строка (<type>string</type>) можно также заключить переменную в двойные кавычки.
   </simpara>

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$foo = 10;            // $foo является целым числом
$str = "$foo";        // $str является строкой
$fst = (string) $foo; // $fst также является строкой

// Выводит, что "они одинаковые"
if ($fst === $str) {
    echo "они одинаковые";
}
?>
]]>
    </programlisting>
   </informalexample>
  </note>

  <para>
   Может быть неочевидно, что именно произойдёт при преобразовании между определёнными типами.
   Для получения дополнительной информации смотрите эти разделы:

   <simplelist>
    <member><link linkend="language.types.boolean.casting">Преобразование типа к логическому значению (boolean)</link></member>
    <member><link linkend="language.types.integer.casting">Преобразование типа к целому числу (integer)</link></member>
    <member><link linkend="language.types.float.casting">Преобразование типа к числу с плавающей точкой (float)</link></member>
    <member><link linkend="language.types.string.casting">Преобразование типа к строке (string)</link></member>
    <member><link linkend="language.types.array.casting">Преобразование типа к массиву (array)</link></member>
    <member><link linkend="language.types.object.casting">Преобразование типа к объекту (object)</link></member>
    <member><link linkend="language.types.resource.casting">Преобразование типа к ресурсу (resource)</link></member>
    <member><link linkend="language.types.null.casting">Преобразование типа к NULL</link></member>
    <member><link linkend="types.comparisons">Таблицы сравнения типов</link></member>
   </simplelist>
  </para>
 </sect2>

 <simplesect>
  <note>
   <simpara>
    Поведение автоматического преобразования типа к массиву (<type>array</type>) в настоящее время не определено.
    undefined.
   </simpara>
  </note>

  <note>
   <simpara>
    Кроме того, поскольку PHP поддерживает индексацию в строках (<type>string</type>) с помощью смещения, используя тот же синтаксис,
    что и индексация в массивах (<type>array</type>), следующий пример справедлив для всех версий PHP:
   </simpara>

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$a    = 'car'; // $a является строкой
$a[0] = 'b';   // $a по-прежнему является строкой
echo $a;       // bar
?>
]]>
    </programlisting>
   </informalexample>

   <simpara>
    Дополнительную информацию смотрите в разделе <link linkend="language.types.string.substr">Доступ к символу в строке и его изменение</link>.
   </simpara>
  </note>
 </simplesect>

</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
