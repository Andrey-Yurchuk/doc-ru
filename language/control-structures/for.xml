<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 7104ee97ced1768a3231588dfc0bc0d7eb1117ad Maintainer: mch Status: ready -->
<!-- Reviewed: no -->
<sect1 xml:id="control-structures.for" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>for</title>
 <?phpdoc print-version-for="for"?>
 <para>
  Цикл <literal>for</literal> самый сложный цикл в PHP.
  Цикл ведёт себя аналогично языку C. Синтаксис цикла
  <literal>for</literal> выглядит вот так:
  <informalexample>
   <programlisting>
<![CDATA[
for (expr1; expr2; expr3)
    statement
]]>
   </programlisting>
  </informalexample>
 </para>
 <simpara>
  Первое выражение <varname>expr1</varname>
  вычисляется или выполняется только один раз безусловно в начале цикла.
 </simpara>
 <simpara>
  В начале каждой итерации оценивается выражение <varname>expr2</varname>.
  Цикл продолжается, а вложенные инструкции выполняются,
  если выражение принимает значение &true;.
  Выполнение цикла заканчивается, если выражение принимает значение &false;.
 </simpara>
 <simpara>
  В конце каждой итерации вычисляется или выполняется
  выражение <varname>expr3</varname>.
 </simpara>
 <simpara>
  Каждое из выражений разрешается оставлять пустым или указывать в каждом выражении
  набор выражений через запятую. В части <varname>expr2</varname>
  каждое выражение, которое отделили запятой, вычисляется, но результат берётся
  из последнего.
  Цикл выполняется бесконечно,
  если выражение <varname>expr2</varname> оставили пустым; PHP неявно рассматривает
  пустое выражение как значение &true;, по аналогии с языком C. Это бывает не так бесполезно,
  как кажется, поскольку вместо выражения истинности в списке выражений цикла <literal>for</literal>
  цикл часто требуется прервать по условию в теле цикла путём вызова инструкции
  <link linkend="control-structures.break"><literal>break</literal></link>.
 </simpara>
 <para>
  Рассмотрим следующие примеры. Каждый пример выводит числа
  от 1 до 10:
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

/* Пример 1 */

for ($i = 1; $i <= 10; $i++) {
    echo $i;
}

/* Пример 2 */

for ($i = 1; ; $i++) {
    if ($i > 10) {
        break;
    }

    echo $i;
}

/* Пример 3 */

$i = 1;
for (; ; ) {
    if ($i > 10) {
        break;
    }

    echo $i;
    $i++;
}

/* Пример 4 */

for ($i = 1, $j = 0; $i <= 10; $j += $i, print $i, $i++);

?>
]]>
   </programlisting>
  </informalexample>
 </para>
 <simpara>
  Конечно, первый пример кажется самым красивым (или, возможно,
  четвёртый), но программисты часто находят пустые
  выражения в циклах <literal>for</literal> удобными.
 </simpara>
 <para>
  PHP также поддерживает для циклов <literal>for</literal>
  альтернативный синтаксис с двоеточием.
  <informalexample>
   <programlisting>
<![CDATA[
for (expr1; expr2; expr3):
    statement
    ...
endfor;
]]>
   </programlisting>
  </informalexample>
 </para>
 <simpara>
  Следующий пример перебирает массивы стандартным способом,
  к которому привыкли разработчики.
 </simpara>
 <para>
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

/*
 * Это массив с данными, которые требуется изменить
 * в цикле
 */
$people = array(
    array('name' => 'Kalle', 'salt' => 856412),
    array('name' => 'Pierre', 'salt' => 215863)
);

for ($i = 0; $i < count($people); ++$i) {
    $people[$i]['salt'] = mt_rand(000000, 999999);
}

?>
]]>
   </programlisting>
  </informalexample>
 </para>
 <simpara>
  Приведённый код иногда работает медленно, поскольку размер массива вычисляется
  в каждой итерации. Поскольку размер не меняется, цикл легко оптимизируется
  через промежуточную переменную, в которую записывается размер массива, вместо
  повторяющихся вызовов функции <function>count</function>:
 </simpara>
 <para>
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

$people = array(
    array('name' => 'Kalle', 'salt' => 856412),
    array('name' => 'Pierre', 'salt' => 215863)
);

for($i = 0, $size = count($people); $i < $size; ++$i) {
    $people[$i]['salt'] = mt_rand(000000, 999999);
}

?>
]]>
   </programlisting>
  </informalexample>
 </para>
</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
