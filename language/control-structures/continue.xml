<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 16389a7b31069481d6c8c0705172bee5ef1ddf5f Maintainer: mch Status: ready -->
<!-- Reviewed: no -->
<sect1 xml:id="control-structures.continue" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>continue</title>
 <?phpdoc print-version-for="continue"?>
 <simpara>
  Инструкцию <literal>continue</literal> указывают внутри циклических структур,
  чтобы пропустить оставшуюся часть текущей итерации цикла и продолжить выполнение
  с оценки условия, а затем начать следующую итерацию.
 </simpara>
 <note>
  <simpara>
   В PHP инструкция <literal>continue</literal> считает инструкцию
   <link linkend="control-structures.switch">switch</link> циклической структурой.
   Без аргументов инструкция <literal>continue</literal> внутри инструкции switch
   ведёт себя аналогично инструкции <literal>break</literal>, но выдаёт предупреждение,
   поскольку предполагает, что допустили ошибку.
   Вызов <literal>continue 2</literal> внутри блока switch продолжит выполнение кода
   со следующей итерации внешнего цикла, если инструкцию <literal>switch</literal> указали внутри цикла.
  </simpara>
 </note>
 <simpara>
  Инструкция <literal>continue</literal> принимает необязательный числовой аргумент,
  который сообщает, на внешнем цикле какого уровня требуется пропустить оставшуюся часть итерации.
  Значение по умолчанию равно <literal>1</literal>,
  поэтому пропускается оставшаяся часть итерации текущего цикла.
 </simpara>
 <para>
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

$arr = ['ноль', 'один', 'два', 'три', 'четыре', 'пять', 'шесть'];

foreach ($arr as $key => $value) {
    if (0 === ($key % 2)) { // Условие пропуска элементов с чётным ключом
        continue;
    }

    echo $value . "\n";
}

?>
]]>
   </programlisting>
   &examples.outputs;
   <screen>
<![CDATA[
один
три
пять
]]>
   </screen>
   <programlisting role="php">
<![CDATA[
<?php

$i = 0;

while ($i++ < 5) {
    echo "Внешний\n";

    while (1) {
        echo "Средний\n";

        while (1) {
            echo "Внутренний\n";
            continue 3;
        }

        echo "Это никогда не выведется.\n";
    }

    echo "Это тоже не выведется.\n";
}

?>
]]>
   </programlisting>
   &examples.outputs;
   <screen>
<![CDATA[
Внешний
Средний
Внутренний
Внешний
Средний
Внутренний
Внешний
Средний
Внутренний
Внешний
Средний
Внутренний
Внешний
Средний
Внутренний
]]>
   </screen>
  </informalexample>
 </para>
 <para>
  Пропуск точки запятой после инструкции <literal>continue</literal>
  сбивает с толку. Вот пример, как лучше не делать:
 </para>
 <para>
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

for ($i = 0; $i < 5; ++$i) {
    if ($i == 2)
        continue
    print "$i\n";
}

?>
]]>
   </programlisting>
   <para>
    Ожидается, что код выведет числа, а не выдаст фатальную ошибку:
   </para>
   <screen>
<![CDATA[
0
1
3
4
]]>
   </screen>
  </informalexample>
 </para>
 <para>
  <table>
   <title>Список изменений, которые затронули инструкцию <literal>continue</literal></title>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>7.3.0</entry>
      <entry>
       Инструкция <literal>continue</literal> внутри инструкции <literal>switch</literal>,
       которая пытается действовать как инструкция <literal>break</literal>
       для инструкции <literal>switch</literal>, вызовет ошибку
       уровня <constant>E_WARNING</constant>.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </para>
</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
