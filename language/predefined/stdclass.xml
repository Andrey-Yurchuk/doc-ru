<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 360928c5efa8ebd586168d2660fc48d7fc6c9ba2 Maintainer: sergey Status: ready -->
<!-- Reviewed: no -->
<phpdoc:classref xml:id="class.stdclass" xmlns:phpdoc="http://php.net/ns/phpdoc" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">

 <title>Класс stdClass</title>
 <titleabbrev>stdClass</titleabbrev>

 <partintro>

  <section xml:id="stdclass.intro">
   &reftitle.intro;
   <para>
    Пустой класс общего назначения с динамическими свойствами.
   </para>

   <para>
    Объекты класса могут быть инициализированы с помощью оператора
    <link linkend="language.oop5.basic.new">new</link> или созданы
    с помощью <link linkend="language.types.object.casting">преобразования в объект</link>.
    Некоторые функции PHP также создают экземпляры этого класса,
    например, функции <function>json_decode</function>, <function>mysqli_fetch_object</function>
    или <methodname>PDOStatement::fetchObject</methodname>.
   </para>

   <para>
    Несмотря на отсутствие реализации магических методов
    <link linkend="object.get">__get()</link>/<link linkend="object.set">__set()</link>,
    класс позволяет использовать динамические свойства
    и не требует атрибута <code>#[\AllowDynamicProperties]</code>.
   </para>

   <para>
    Это не базовый класс, поскольку в PHP нет понятия универсального базового класса.
    Однако можно создать пользовательский класс, который расширяет <classname>stdClass</classname>
    и в результате наследует функциональность динамических свойств.
   </para>
  </section>

  <section xml:id="stdclass.synopsis">
   &reftitle.classsynopsis;

   <classsynopsis>
    <ooclass>
     <classname>stdClass</classname>
    </ooclass>

    <classsynopsisinfo>
     <ooclass>
      <classname>stdClass</classname>
     </ooclass>
    </classsynopsisinfo>
   </classsynopsis>

   <para>
    У класса нет методов или свойств по умолчанию.
   </para>
  </section>

  <section xml:id="stdclass.examples" role="examples">
   &reftitle.examples;
   <example xml:id="stdclass.basic-example">
    <title>Создание в результате преобразования в объект</title>
    <programlisting role="php">
<![CDATA[
<?php
$obj = (object) array('foo' => 'bar');
var_dump($obj);
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
object(stdClass)#1 (1) {
  ["foo"]=>
  string(3) "bar"
}
]]>
    </screen>
   </example>
   <example xml:id="stdclass.json-example">
    <title>Создание в результате работы функции <function>json_decode</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$json = '{"foo":"bar"}';
var_dump(json_decode($json));
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
object(stdClass)#1 (1) {
  ["foo"]=>
  string(3) "bar"
}
]]>
    </screen>
   </example>
   <example xml:id="stdclass.properties-example">
    <title>Объявление динамических свойств</title>
    <programlisting role="php">
<![CDATA[
<?php
$obj = new stdClass();
$obj->foo = 42;
$obj->{1} = 42;
var_dump($obj);
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
object(stdClass)#1 (2) {
  ["foo"]=>
  int(42)
  ["1"]=>
  int(42)
}
]]>
    </screen>
   </example>
  </section>

 </partintro>

</phpdoc:classref>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
