<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 1f7a0e4af85d1b74595626afa1ca774c896e8388 Maintainer: sergey Status: ready -->
<!-- Reviewed: no -->
<phpdoc:classref xml:id="class.fiber" xmlns:phpdoc="http://php.net/ns/phpdoc" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">
 <title>Класс Fiber</title>
 <titleabbrev>Fiber</titleabbrev>

 <partintro>

  <!-- {{{ Fiber intro -->
  <section xml:id="fiber.intro">
   &reftitle.intro;
   <para>
    Файберы представляют собой прерываемые функции полного цикла. Файберы могут быть приостановлены из любого места цикла,
    приостанавливая выполнение в файбере до тех пор, пока файбер не будет возобновлён в будущем.
   </para>
   <para>
    Файберы приостанавливают весь цикл выполнения, поэтому вызывающему функцию напрямую не нужно менять способ её вызова.
   </para>
   <para>
    Выполнение может быть прервано в любом месте цикла с помощью метода <methodname>Fiber::suspend</methodname>
    (то есть вызов <methodname>Fiber::suspend</methodname> может находиться в глубоко вложенной функции
    или даже вообще не существовать).
   </para>
   <para>
    В отличие от генераторов (<classname>Generator</classname>) без стека, у каждого объекта <classname>Fiber</classname> есть
    свой собственный стек вызовов, позволяющий приостанавливать их внутри глубоко вложенных вызовов функций.
    Функция, объявляющая точку прерывания (то есть вызов метода <methodname>Fiber::suspend</methodname>),
    не должна изменять свой возвращаемый тип, в отличие от функции, использующей &yield;,
    который должен возвращать экземпляр <classname>Generator</classname>.
   </para>
   <para>
    Файберы могут быть приостановлены при вызове любой функции, включая те, которые вызываются из виртуальной машины PHP,
    например, функции, предоставляемые <function>array_map</function>, или методы, вызываемые foreach для объекта
    <classname>Iterator</classname>.
   </para>
   <para>
    После приостановки выполнение файбера может быть возобновлено с любым значением с помощью метода <methodname>Fiber::resume</methodname>
    или путём передачи исключения в файбер с помощью <methodname>Fiber::throw</methodname>.
    Значение возвращается (или выбрасывается исключение) из метода <methodname>Fiber::suspend</methodname>.
   </para>
  </section>
  <!-- }}} -->

  <section xml:id="fiber.synopsis">
   &reftitle.classsynopsis;

   <!-- {{{ Synopsis -->
   <classsynopsis>
    <ooclass><classname>Fiber</classname></ooclass>

    <!-- {{{ Class synopsis -->
    <classsynopsisinfo>
     <ooclass>
      <modifier>final</modifier>
      <classname>Fiber</classname>
     </ooclass>
    </classsynopsisinfo>
    <!-- }}} -->

    <classsynopsisinfo role="comment">&Methods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.fiber')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[not(@role='procedural')])">
     <xi:fallback/>
    </xi:include>
   </classsynopsis>
   <!-- }}} -->

  </section>

  <section xml:id="fiber.examples">
   <example xml:id="fiber.example.basic"><!-- {{{ -->
    <title>Пример использования</title>
    <programlisting role="php">
<![CDATA[
<?php
$fiber = new Fiber(function (): void {
    $value = Fiber::suspend('fiber');
    echo "Значение возобновлённого файбера: ", $value, PHP_EOL;
});

$value = $fiber->start();

echo "Значение приостановленного файбера: ", $value, PHP_EOL;

$fiber->resume('test');
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Значение приостановленного файбера: fiber
Значение возобновлённого файбера: test
]]>
    </screen>
   </example><!-- }}} -->
  </section>

 </partintro>

 &language.predefined.fiber.construct;
 &language.predefined.fiber.start;
 &language.predefined.fiber.resume;
 &language.predefined.fiber.throw;
 &language.predefined.fiber.getreturn;
 &language.predefined.fiber.isstarted;
 &language.predefined.fiber.issuspended;
 &language.predefined.fiber.isrunning;
 &language.predefined.fiber.isterminated;
 &language.predefined.fiber.suspend;
 &language.predefined.fiber.getcurrent;

</phpdoc:classref>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
