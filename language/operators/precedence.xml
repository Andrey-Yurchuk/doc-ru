<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 16934048f79c6e117cd16a23c09c1b2ea502e284 Maintainer: sergey Status: ready -->
<!-- Reviewed: no -->
<sect1 xml:id="language.operators.precedence">
 <title>Приоритет оператора</title>
 <titleabbrev>Приоритет</titleabbrev>
 <para>
  Приоритет оператора определяет, насколько «тесно» он связывает между собой два
  выражения. Например, выражение <literal>1 + 5 * 3</literal> вычисляется
  как <literal>16</literal>, а не <literal>18</literal>, поскольку у оператора умножения «*»
  более высокий приоритет, чем у оператора сложения «+». Порядок выполнения операторов
  изменяют круглыми скобками, поэтому
  выражение <literal>(1 + 5) * 3</literal> вычисляется как <literal>18</literal>.
 </para>
 <para>
  Выполнятся ли операторы с равным приоритетом слева направо
  или справа налево, определяет ассоциативность. Например, оператор «-»
  относится к левоассоциативным, поэтому выражение <literal>1 - 2 - 3</literal> сгруппируется
  как <literal>(1 - 2) - 3</literal> и пересчитается в <literal>-4</literal>.
  При этом оператор «=» относится к правоассоциативным, потому выражение <literal>$a = $b = $c</literal>
  сгруппируется как <literal>$a = ($b = $c)</literal>.
 </para>
 <para>
  Неассоциативные операторы с одинаковым приоритетом нельзя указывать совместно.
  Например, выражение <literal>1 &lt; 2 &gt; 1</literal> не сработает в PHP.
  При этом выражение <literal>1 &lt;= 1 == 1</literal> сработает, поскольку у оператора <literal>==</literal>
  более низкий приоритет, чем у оператора <literal>&lt;=</literal>.
 </para>
 <para>
  Ассоциативность касается только двоичных и тернарных операторов.
  Унарные операторы бывают префиксными или постфиксными, поэтому понятие ассоциативности к ним не относится.
  Например, <literal>!!$a</literal> получится сгруппировать только как <literal>!(!$a)</literal>.
 </para>
 <para>
  Скобки, даже если они необязательны, часто улучшают
  читаемость кода за счёт явной группировки, а не опоры на приоритеты и ассоциативность.
 </para>
 <para>
  Следующая таблица приводит список операторов, отсортированный
  по убыванию приоритетов. У операторов, которые перечислили в одной строке,
  одинаковый приоритет, а порядок выполнения этих операторов определяется группировкой.
  <table><title>Порядок выполнения операторов</title>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>Ассоциативность</entry>
      <entry>Оператор</entry>
      <entry>Дополнительная информация</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>(н/а)</entry>
      <entry>
       <literal>clone</literal>
       <literal>new</literal>
      </entry>
      <entry>
       <link linkend="language.oop5.cloning">clone</link> и <link linkend="language.oop5.basic.new">new</link>
      </entry>
     </row>
     <row>
      <entry>правая</entry>
      <entry>
       <literal>**</literal>
      </entry>
      <entry>
       <link linkend="language.operators.arithmetic">арифметические операторы</link>
      </entry>
     </row>
     <row>
      <entry>(н/а)</entry>
      <entry>
       <literal>+</literal>
       <literal>-</literal>
       <literal>++</literal>
       <literal>--</literal>
       <literal>~</literal>
       <literal>(int)</literal>
       <literal>(float)</literal>
       <literal>(string)</literal>
       <literal>(array)</literal>
       <literal>(object)</literal>
       <literal>(bool)</literal>
       <literal>@</literal>
      </entry>
      <entry>
       <link linkend="language.operators.arithmetic">арифметические операторы</link> (унарные <literal>+</literal> и <literal>-</literal>),
       <link linkend="language.operators.increment">инкремент/декремент</link>,
       <link linkend="language.operators.bitwise">побитовые операторы</link>,
       <link linkend="language.types.typecasting">приведение типов</link>&listendand;
       <link linkend="language.operators.errorcontrol">оператор управления ошибками</link>
      </entry>
     </row>
     <row>
      <entry>левая</entry>
      <entry>instanceof</entry>
      <entry>
       <link linkend="language.operators.type">типы</link>
      </entry>
     </row>
     <row>
      <entry>(н/а)</entry>
      <entry>!</entry>
      <entry>
       <link linkend="language.operators.logical">логические операторы</link>
      </entry>
     </row>
     <row>
      <entry>левая</entry>
      <entry>
       <literal>*</literal>
       <literal>/</literal>
       <literal>%</literal>
      </entry>
      <entry>
       <link linkend="language.operators.arithmetic">арифметические операторы</link>
      </entry>
     </row>
     <row>
      <entry>левая</entry>
      <entry>
       <literal>+</literal>
       <literal>-</literal>
       <literal>.</literal>
      </entry>
      <entry>
       <link linkend="language.operators.arithmetic">арифметические операторы</link> (бинарные <literal>+</literal> и <literal>-</literal>),
       <link linkend="language.operators.array">операторы, работающие с массивами</link>&listendand;
       <link linkend="language.operators.string">строковые операторы</link> (<literal>.</literal> до PHP 8.0.0)
      </entry>
     </row>
     <row>
      <entry>левая</entry>
      <entry>
       <literal>&lt;&lt;</literal>
       <literal>&gt;&gt;</literal>
      </entry>
      <entry>
       <link linkend="language.operators.bitwise">побитовые операторы</link>
      </entry>
     </row>
     <row>
      <entry>левая</entry>
      <entry>
       <literal>.</literal>
      </entry>
      <entry>
       <link linkend="language.operators.string">строковые операторы</link> (начиная с PHP 8.0.0)
    </entry>
     </row>
     <row>
      <entry>неассоциативна</entry>
      <entry>
       <literal>&lt;</literal>
       <literal>&lt;=</literal>
       <literal>&gt;</literal>
       <literal>&gt;=</literal>
      </entry>
      <entry>
       <link linkend="language.operators.comparison">операторы сравнения</link>
      </entry>
     </row>
     <row>
      <entry>неассоциативна</entry>
      <entry>
       <literal>==</literal>
       <literal>!=</literal>
       <literal>===</literal>
       <literal>!==</literal>
       <literal>&lt;&gt;</literal>
       <literal>&lt;=&gt;</literal>
      </entry>
      <entry>
       <link linkend="language.operators.comparison">операторы сравнения</link>
      </entry>
     </row>
     <row>
      <entry>левая</entry>
      <entry>
       <literal>&amp;</literal>
      </entry>
      <entry>
       <link linkend="language.operators.bitwise">побитовые операторы</link>&listendand;
       <link linkend="language.references">ссылки</link>
      </entry>
     </row>
     <row>
      <entry>левая</entry>
      <entry>
       <literal>^</literal>
      </entry>
      <entry>
       <link linkend="language.operators.bitwise">побитовые операторы</link>
      </entry>
     </row>
     <row>
      <entry>левая</entry>
      <entry>
       <literal>|</literal>
      </entry>
      <entry>
       <link linkend="language.operators.bitwise">побитовые операторы</link>
      </entry>
     </row>
     <row>
      <entry>левая</entry>
      <entry>
       <literal>&amp;&amp;</literal>
      </entry>
      <entry>
       <link linkend="language.operators.logical">логические операторы</link>
      </entry>
     </row>
     <row>
      <entry>левая</entry>
      <entry>
       <literal>||</literal>
      </entry>
      <entry>
       <link linkend="language.operators.logical">логические операторы</link>
      </entry>
     </row>
     <row>
      <entry>правая</entry>
      <entry>
       <literal>??</literal>
      </entry>
      <entry>
       <link linkend="language.operators.comparison.coalesce">операторы сравнения с null</link>
      </entry>
     </row>
     <row>
      <entry>неассоциативна</entry>
      <entry>
       <literal>? :</literal>
      </entry>
      <entry>
       <link linkend="language.operators.comparison.ternary">тернарный оператор</link>
       (левоассоциативный до PHP 8.0.0)
      </entry>
     </row>
     <row>
      <entry>правая</entry>
      <entry>
       <literal>=</literal>
       <literal>+=</literal>
       <literal>-=</literal>
       <literal>*=</literal>
       <literal>**=</literal>
       <literal>/=</literal>
       <literal>.=</literal>
       <literal>%=</literal>
       <literal>&amp;=</literal>
       <literal>|=</literal>
       <literal>^=</literal>
       <literal>&lt;&lt;=</literal>
       <literal>&gt;&gt;=</literal>
       <literal>??=</literal>
      </entry>
      <entry>
       <link linkend="language.operators.assignment">операторы присваивания</link>
      </entry>
     </row>
     <row>
      <entry>(н/а)</entry>
      <entry>
       <literal>yield from</literal>
      </entry>
      <entry>
       <link linkend="control-structures.yield.from">yield from</link>
      </entry>
     </row>
     <row>
      <entry>(н/а)</entry>
      <entry>
       <literal>yield</literal>
      </entry>
      <entry>
       <link linkend="control-structures.yield">yield</link>
      </entry>
     </row>
     <row>
      <entry>(н/а)</entry>
      <entry>
       <literal>print</literal>
      </entry>
      <entry>
       <function>print</function>
      </entry>
     </row>
     <row>
      <entry>левая</entry>
      <entry>
       <literal>and</literal>
      </entry>
      <entry>
       <link linkend="language.operators.logical">логические операторы</link>
      </entry>
     </row>
     <row>
      <entry>левая</entry>
      <entry>
       <literal>xor</literal>
      </entry>
      <entry>
       <link linkend="language.operators.logical">логические операторы</link>
      </entry>
     </row>
     <row>
      <entry>левая</entry>
      <entry>
       <literal>or</literal>
      </entry>
      <entry>
       <link linkend="language.operators.logical">логические операторы</link>
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </para>
 <para>
  <example>
   <title>Ассоциативность</title>
   <programlisting role="php">
<![CDATA[
<?php

$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
var_dump($a);

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5
var_dump($a, $b);

?>
]]>
   </programlisting>
  </example>
 </para>
 <para>
  Тернарный оператор требуется указывать в круглых скобках,
  чтобы устранить неоднозначность приоритета.
 </para>
 <para>
  <example>
   <title>Явный приоритет</title>
   <programlisting role="php">
<![CDATA[
<?php

$a = true ? 0 : (true ? 1 : 2);
var_dump($a);

// Начиная с PHP 8 такие выражения запретили
// $a = true ? 0 : true ? 1 : 2;

?>
]]>
   </programlisting>
  </example>
 </para>
 <para>
  Приоритет и ассоциативность оператора определяет только то, как группируется
  выражение, а не порядок его вычисления. Обычно PHP не указывает, в каком порядке
  вычисляются выражения, и нужно избегать кода, который предполагает спецефический порядок вычисления,
  потому что поведение может меняться в разных версиях PHP
  или в зависимости от окружающего кода.

  <example>
   <title>Неопределённый порядок вычисления</title>
   <programlisting role="php" annotations="non-interactive">
<![CDATA[
<?php

$a = 1;
echo $a + $a++; // В зависимости от версии выводит как 2, так и 3

$i = 1;
$array[$i] = $i++; // В зависимости от версии устанавливает индекс как 1, так 2

]]>
   </programlisting>
  </example>
  <example>
   <title>Приоритет операторов <literal>+</literal>, <literal>-</literal> и <literal>.</literal></title>
   <programlisting role="php">
<![CDATA[
<?php

$x = 4;
// Следующий код иногда выдаёт неожиданный результат:
echo "x минус 1 равно " . $x - 1 . ", ну, я надеюсь\n";

// Круглые скобки помогают указать явный приоритет:
echo "x minus one equals " . ($x - 1) . ", ну, я надеюсь\n";

// Так нельзя, код выбросит ошибку TypeError:
echo (("x минус 1 равно " . $x) - 1) . ", ну, я надеюсь\n";

?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
-1, ну, я надеюсь
-1, ну, я надеюсь
Fatal error: Uncaught TypeError: Unsupported operand types: string - int
]]>
   </screen>
  </example>
  <example>
   <title>До PHP 8 приоритет операторов <literal>+</literal>, <literal>-</literal> и <literal>.</literal> был одинаковым</title>
   <programlisting role="php" annotations="non-interactive">
<![CDATA[
<?php

$x = 4;
// Следующий код иногда выдаёт неожиданный результат:
echo "x минус 1 равно " . $x - 1 . ", ну, я надеюсь\n";

// Поскольку до PHP 8.0.0 код вычислялся вот так:
echo (("x минус один равно " . $x) - 1) . ", ну, я надеюсь\n";

// Явный приоритет определяют круглыми скобками:
echo "x минус 1 равно " . ($x - 1) . ", ну, я надеюсь\n";

?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
-1, ну, я надеюсь
-1, ну, я надеюсь
x минус 1 равно 3, ну, я надеюсь
]]>
  </screen>
  </example>
 </para>
 <note>
  <para>
   Хотя у оператора <literal>=</literal> более низкий приоритет, чем у большей части
   других операторов, PHP всё же разрешает писать так: <literal>if (!$a = foo())</literal>,
   в этом примере результат выполнения функции <literal>foo()</literal> присвоится
   переменной <varname>$a</varname>.
  </para>
 </note>
 <sect2 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>8.0.0</entry>
      <entry>
       У объединения строк оператором <literal>.</literal> теперь более низкий приоритет,
       чем у арифметических операторов сложения <literal>+</literal> и вычитания <literal>-</literal>,
       и побитового сдвига влево <literal>&lt;&lt;</literal> и вправо <literal>&gt;&gt;</literal>;
       раньше у оператора конкатенации строк был тот же приоритет, что и у операторов <literal>+</literal> и <literal>-</literal>,
       и более высокий приоритет, чем у операторов <literal>&lt;&lt;</literal> и <literal>&gt;&gt;</literal>.
      </entry>
     </row>
     <row>
      <entry>8.0.0</entry>
      <entry>
       Тернарный оператор <literal>? :</literal> стал неассоциативным;
       раньше оператор относился к левоассоциативным.
      </entry>
     </row>
     <row>
      <entry>7.4.0</entry>
      <entry>
       В выражениях с совместным указанием операторов
       теперь не рекомендуют полагаться на приоритет конкатенации строк оператором <literal>.</literal>
       при арифметических операциях сложения <literal>+</literal> или вычитания <literal>-</literal>
       и побитовом сдвиге влево <literal>&lt;&lt;</literal> или вправо <literal>&gt;&gt;</literal>).
      </entry>
     </row>
     <row>
      <entry>7.4.0</entry>
      <entry>
       В выражениях с бесскобочным вложением ряда тернарных операторов
       теперь не рекомендуют полагаться на левоассоциативность тернарного оператора <literal>? :</literal>.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </sect2>
</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
