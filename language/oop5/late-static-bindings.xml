<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 009f215fc983eeded6161676bcffdd8cf3b6b080 Maintainer: mch Status: ready -->
<!-- Reviewed: no -->
<sect1 xml:id="language.oop5.late-static-bindings" xmlns="http://docbook.org/ns/docbook">
 <title>Позднее статическое связывание</title>
 <para>
  Позднее статическое связывание в PHP — механизм, который разрешает ссылаться
  на класс вызова в контексте статического наследования.
 </para>

 <para>
  Точнее, позднее статическое связывание сохраняет класс,
  название которого указали в последнем «неперенаправленном вызове». При вызове статических
  методов это тот класс, название которого явно указали слева от оператора
  <link linkend="language.oop5.paamayim-nekudotayim"><literal>::</literal></link>;
  при нестатических вызовах это класс объекта. «Перенаправленным вызовом» называется
  статический вызов через конструкции <literal>self::</literal>, <literal>parent::</literal>,
  <literal>static::</literal> или через функцию <function>forward_static_call</function>
  при движении вверх по иерархии классов.
  <!-- технически вызов через конструкцию static:: иногда не относится к перенаправленным, но это не относится к делу -->

  Строку с названием класса вызова получают функцией <function>get_called_class</function>,
  а конструкция <literal>static::</literal> вводит область действия вызываемого класса.
 </para>

 <para>
  Природа названия «позднее статическое связывание» возникает из внутренней
  логики работы языка. Связывание называется «поздним», потому что конструкция <literal>static::</literal>
  разрешается не в тот класс, в котором определили метод,
  а вычисляется на основе информации в ходе исполнения программы.

  Связывание также назвали «статическим», поскольку
  этот механизм в числе прочего умеет вызывать статические методы.
 </para>

 <sect2 xml:id="language.oop5.late-static-bindings.self">
  <title>Ограничения конструкции <literal>self::</literal></title>
  <para>
   Статические ссылки на текущий класс наподобие конструкции <literal>self::</literal>
   или константы <literal>__CLASS__</literal> разрешаются в класс,
   которому принадлежит функция, — в котором функцию определили:
  </para>
  <example>
   <title>Пример обращения к члену класса через конструкцию <literal>self::</literal></title>
   <programlisting role="php">
<![CDATA[
<?php

class A
{
    public static function who()
    {
        echo __CLASS__;
    }

    public static function test()
    {
        self::who();
    }
}

class B extends A
{
    public static function who()
    {
        echo __CLASS__;
    }
}

B::test();

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
A
]]>
    </screen>
   </example>

  </sect2>

  <sect2 xml:id="language.oop5.late-static-bindings.usage">
   <title>Пример позднего статического связывания</title>

   <para>
    Позднее статическое связывание стремится устранить это ограничение и вводит
    ключевое слово для ссылки на класс, который изначально вызвали
    в ходе исполнения программы. По сути, это ключевое слово, которое в предыдущем примере
    разрешило бы ссылаться на класс <literal>B</literal> из метода <literal>test()</literal>.
    Вместо введения нового ключевого слова для позднего статического связывания разработчики языка выбрали
    ключевое слово <literal>static</literal>, которое зарезервировали прежде.
   </para>

   <example>
    <title>Пример позднего статического связывания через конструкцию <literal>static::</literal></title>
    <programlisting role="php">
<![CDATA[
<?php

class A
{
    public static function who()
    {
        echo __CLASS__;
    }

    public static function test()
    {
        static::who(); // В этом месте появляется позднее статическое связывание
    }
}

class B extends A
{
    public static function who()
    {
        echo __CLASS__;
    }
}

B::test();

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
B
]]>
    </screen>
   </example>
   <note>
    <para>
     В нестатическом контексте классом вызова будет класс
     экземпляра объекта. Обращение через конструкцию <literal>$this-></literal>
     попытается вызывать закрытые методы из той же области действия,
     тогда как результат конструкции <literal>static::</literal> зависит от контекста вызова.
     Другое отличие состоит в том, что обращение через конструкцию <literal>static::</literal>
     умеет ссылаться только на статические свойства.
    </para>
   </note>
   <example>
    <title>Пример ссылки через конструкцию <literal>static::</literal> в нестатическом контексте</title>
    <programlisting role="php">
<![CDATA[
<?php

class A
{
    private function foo()
    {
        echo "Success!\n";
    }

    public function test()
    {
        $this->foo();
        static::foo();
    }
}

class B extends A
{
    /* Метод foo() скопируется в класс В из класса A, поэтому областью действия метода
      по-прежнему будет класс А, и вызов будет успешным */
}

class C extends A
{
    private function foo()
    {
        /* Этот метод заменил собой исходный; область действия нового метода — класс С */
    }
}

$b = new B();
$b->test();

$c = new C();
try {
    $c->test();
} catch (Error $e) {
    echo $e->getMessage();
}

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Success!
Success!
Success!
Call to private method C::foo() from scope A
]]>
    </screen>
   </example>
   <note>
    <para>
     Разрешение поздних статических связок останавливается на статическом вызове по полному названию класса,
     без попытки перенаправить вызов в класс, в котором сделали последний неперенаправленный вызов. Между тем,
     статические вызовы через конструкции <literal>parent::</literal>
     или <literal>self::</literal> перенаправляют информацию о вызове.
    </para>
    <example>
     <title>Пример перенаправленных и неперенаправленных вызовов</title>
     <programlisting role="php">
<![CDATA[
<?php

class A
{
    public static function foo()
    {
        static::who();
    }

    public static function who()
    {
        echo __CLASS__ . "\n";
    }
}

class B extends A
{
    public static function test()
    {
        A::foo();
        parent::foo();
        self::foo();
    }

    public static function who()
    {
        echo __CLASS__ . "\n";
    }
}

class C extends B
{
    public static function who()
    {
        echo __CLASS__ . "\n";
    }
}

C::test();

?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
A
C
C
]]>
     </screen>
    </example>
   </note>
  </sect2>
</sect1><!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
