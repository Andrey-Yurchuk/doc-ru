<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 49f60a82ba4639028981933193ebfa1afa644271 Maintainer: malferov Status: ready -->
<!-- Reviewed: no -->
<sect1 xml:id="language.oop5.lazy-objects" xmlns="http://docbook.org/ns/docbook">
 <title>Ленивые объекты</title>

 <simpara>
  Ленивый объект — объект, инициализация которого откладывается до тех пор,
  пока объект не начнёт отслеживаться или не изменится состояние объекта. Отдельные примеры работы с ленивыми объектами включают:
  а) компоненты внедрения зависимостей, которые предоставляют отложенные службы, которые инициализируются на 100 %
  только когда требуются б) <acronym>ORM</acronym>-инструменты, которые предоставляют ленивые объекты,
  которые гидрируются значениями из базы данных только при обращении к ORM-объекту или в) JSON-парсер, который
  откладывает разбор до тех пор, пока к элементам не обратятся.
 </simpara>

 <simpara>
  Поддерживаются две стратегии ленивых объектов: объекты-призраки (англ. Ghost Objects)
  и виртуальные прокси (англ. Virtual Proxies), которые здесь и дальше будем называть
  «ленивые призраки» и «ленивые прокси».
  В обеих стратегиях ленивый объект прикрепляется к инициализатору или фабрике,
  которая вызывается автоматически, когда состояние объекта начинают отслеживать
  или изменяют в первый раз. С точки зрения абстракции ленивые объекты-призраки
  неотличимы от неленивых: с такими объектами работают, не зная, что они ленивые,
  что разрешает коду передавать и обрабатывать такие объекты без знания о лени объектов.
  Ленивые прокси тоже прозрачны, но когда потребуется отличить ленивый объекты-прокси от реального
  экземпляра, соблюдают осторожность, поскольку у объекта-прокси и его реального экземпляра
  разные идентификаторы.
 </simpara>

 <sect2 xml:id="language.oop5.lazy-objects.creation">
  <title>Создание ленивых объектов</title>

  <simpara>
   Разрешается создавать ленивые экземпляры пользовательских классов
   или стандартного PHP-класса <classname>stdClass</classname> (другие внутренние классы
   не поддерживаются) или сбрасывать экземпляры этих классов, чтобы сделать объект ленивым.
   Точки входа, через которые создают ленивые объекты, —
   методы <methodname>ReflectionClass::newLazyGhost</methodname>
   и <methodname>ReflectionClass::newLazyProxy</methodname> methods.
  </simpara>

  <simpara>
   Оба метода принимают callback-функцию, которая вызывается, когда требуется инициализация объекта.
   Поведение, которого ждут от функции обратного вызова, меняется, и зависит от стратегии. Стратегии описывает
   справочная документация к методам.
  </simpara>

  <example>
   <title>Пример создания ленивого призрака</title>
   <programlisting role="php">
<![CDATA[
<?php

class Example
{
    public function __construct(public int $prop)
    {
        echo __METHOD__, "\n";
    }
}

$reflector = new ReflectionClass(Example::class);
$lazyObject = $reflector->newLazyGhost(function (Example $object) {
    // Инициализируем объект позже, на месте — по требованию
    $object->__construct(1);
});

var_dump($lazyObject);
var_dump(get_class($lazyObject));

// Запускаем инициализацию
var_dump($lazyObject->prop);

?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
lazy ghost object(Example)#3 (0) {
["prop"]=>
uninitialized(int)
}
string(7) "Example"
Example::__construct
int(1)
]]>
   </screen>
  </example>

  <example>
   <title>Пример создания ленивого прокси</title>
   <programlisting role="php">
<![CDATA[
<?php

class Example
{
    public function __construct(public int $prop)
    {
        echo __METHOD__, "\n";
    }
}

$reflector = new ReflectionClass(Example::class);
$lazyObject = $reflector->newLazyProxy(function (Example $object) {
    // Создаём и возвращаем реальный экземпляр
    return new Example(1);
});

var_dump($lazyObject);
var_dump(get_class($lazyObject));

// Запускаем инициализацию
var_dump($lazyObject->prop);

?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
lazy proxy object(Example)#3 (0) {
  ["prop"]=>
  uninitialized(int)
}
string(7) "Example"
Example::__construct
int(1)
]]>
   </screen>
  </example>

  <simpara>
   Доступ к свойствам ленивого объекта запускает инициализацию ленивого объекта,
   включая доступ через класс <classname>ReflectionProperty</classname>.
   Однако отдельные свойства иногда известны заранее и требуется сделать так,
   чтобы они не вызывали инициализацию при доступе:
  </simpara>

  <example>
   <title>Пример энергичной инициализации свойств</title>
   <programlisting role="php">
<![CDATA[
<?php

class BlogPost
{
    public function __construct(
        public int $id,
        public string $title,
        public string $content,
    ) {}
}

$reflector = new ReflectionClass(BlogPost::class);

$post = $reflector->newLazyGhost(function ($post) {
    $data = fetch_from_store($post->id);
    $post->__construct($data['id'], $data['title'], $data['content']);
});

// Без этой строки вызов метода ReflectionProperty::setValue(), который идёт следующим,
// запустит инициализацию
$reflector->getProperty('id')->skipLazyInitialization($post);

$reflector->getProperty('id')->setValue($post, 123);

// Альтернативный способ установки значения свойства без запуска ленивой инициализации
$reflector->getProperty('id')->setRawValueWithoutLazyInitialization($post, 123);

// Доступ к свойству id возможен без запуска инициализации.
var_dump($post->id);

?>
]]>
   </programlisting>
  </example>

  <simpara>
   Методы <methodname>ReflectionProperty::skipLazyInitialization</methodname>
   и <methodname>ReflectionProperty::setRawValueWithoutLazyInitialization</methodname>
   предлагают способы обхода инициализации ленивых объектов при доступе к свойству.
  </simpara>
 </sect2>

 <sect2 xml:id="language.oop5.lazy-objects.patterns">
  <title>О стратегиях ленивых объектов</title>

  <simpara>
   <emphasis>Ленивые призраки</emphasis> — объекты, которые инициализируются на месте,
   и после инициализации неотличимы от объекта, который никогда не был ленивым.
   Стратегию применяют, когда контролируют как создание экземпляра, так и инициализацию объекта,
   что делает стратегию непригодной, если хотя бы один из этих процессов управляется другой стороной.
  </simpara>

  <simpara>
   <emphasis>Ленивые прокси</emphasis> после инициализации действуют как прокси
   до реального экземпляра: операции на инициализированном ленивом прокси перенаправляются
   на реальный экземпляр. Создание реального экземпляра разрешается делегировать другой стороне,
   что делает эту стратегию полезной, когда ленивые призраки не подходят.
   Хотя ленивые прокси почти так же прозрачны, как ленивые призраки, потребуется осторожность,
   когда потребуется отличить ленивый прокси от реального объекта, поскольку у объекта-прокси
   и его реального экземпляра разные идентификаторы.
  </simpara>
 </sect2>

 <sect2 xml:id="language.oop5.lazy-objects.lifecycle">
  <title>Жизненный цикл ленивых объектов</title>

  <simpara>
   Объекты делают ленивыми либо сразу — путём вызова метода
   <methodname>ReflectionClass::newLazyGhost</methodname>
   или <methodname>ReflectionClass::newLazyProxy</methodname>,
   либо создают а затем передают реальный объект в метод
   <methodname>ReflectionClass::resetAsLazyGhost</methodname>
   или <methodname>ReflectionClass::resetAsLazyProxy</methodname>. Следующие операции
   инициализируют ленивый объект:
  </simpara>

  <simplelist>
   <member>
    Взаимодействие с объектом, при котором вызывается автоматическая инициализация.
    См. «<link linkend="language.oop5.lazy-objects.initialization-triggers">Триггеры инициализации</link>».
   </member>
   <member>
    Пометка каждого свойства ленивого объекта как неленивое методом
    <methodname>ReflectionProperty::skipLazyInitialization</methodname>
    или <methodname>ReflectionProperty::setRawValueWithoutLazyInitialization</methodname>.
   </member>
   <member>
    Явный вызов метода <methodname>ReflectionClass::initializeLazyObject</methodname>
    или <methodname>ReflectionClass::markLazyObjectAsInitialized</methodname>.
   </member>
  </simplelist>

  <simpara>
   Поскольку ленивые объекты становятся инициализированными,
   когда каждое свойство ленивого объекта пометили неленивым, приведённые методы не пометят
   объект как ленивый, если ни одно свойство нельзя пометить ленивым.
  </simpara>
 </sect2>

 <sect2 xml:id="language.oop5.lazy-objects.initialization-triggers">
  <title>Триггеры инициализации</title>

  <simpara>
   Ленивые объекты спроектировали на 100 % прозрачными для потребителей,
   поэтому обычные операции, которые отслеживают или изменяют состояние объекта,
   автоматически инициализируют ленивый объект перед выполнением операции.
   Инициализацию запускает следующий неполный список операций:
  </simpara>

  <simplelist>
   <member>
    Чтение или запись свойства.
   </member>
   <member>
    Проверка установки свойства или удаление свойства.
   </member>
   <member>
    Доступ к свойству или изменение свойства методами
    <methodname>ReflectionProperty::getValue</methodname>,
    <methodname>ReflectionProperty::getRawValue</methodname>,
    <methodname>ReflectionProperty::setValue</methodname>
    или <methodname>ReflectionProperty::setRawValue</methodname>.
   </member>
   <member>
    Получение списка свойств методами
    <methodname>ReflectionObject::getProperties</methodname>
    или <methodname>ReflectionObject::getProperty</methodname>,
    или функцией <function>get_object_vars</function>.
   </member>
   <member>
    Итерация по свойствам объекта, который не реализует интерфейс
    <interfacename>Iterator</interfacename>
    или <interfacename>IteratorAggregate</interfacename>,
    конструкцией <link linkend="control-structures.foreach">foreach</link>.
   </member>
   <member>
    Сериализация ленивого объекта функциями <function>serialize</function>,
    <function>json_encode</function> или другими.
   </member>
   <member>
    <link linkend="language.oop5.lazy-objects.cloning">Клонирование</link>
    ленивого объекта.
   </member>
  </simplelist>

  <simpara>
   Вызовы методов, которые не обращаются к состоянию объекта, не инициализируют ленивый объект.
   Аналогично, взаимодействия с объектом, которые вызывают магические методы или функции хука,
   не инициализируют ленивый объект, если для этих методов или функций не открыт доступ
   к состоянию объекта.
  </simpara>

  <sect3>
   <title>Нетриггерные операции</title>

   <simpara>
    Следующие специальные методы или низкоуровневые операции получают
    доступ к ленивым объектам или изменяют ленивые объекты без запуска инициализации:
   </simpara>

   <simplelist>
    <member>
     Пометка свойств неленивыми методом
     <methodname>ReflectionProperty::skipLazyInitialization</methodname>
     или <methodname>ReflectionProperty::setRawValueWithoutLazyInitialization</methodname>.
    </member>
    <member>
     Получение внутреннего представления свойств
     функцией <function>get_mangled_object_vars</function>
     или через <link linkend="language.types.array.casting">приведение объекта к массиву</link>.
    </member>
    <member>
     Вызов функции <function>serialize</function> при установке флага
     <constant>ReflectionClass::SKIP_INITIALIZATION_ON_SERIALIZE</constant>,
     если только функция
     <link linkend="object.serialize">__serialize()</link>
     или <link linkend="object.sleep">__sleep()</link> не запустила инициализацию.
    </member>
    <member>
     Вызов магического метода <methodname>ReflectionObject::__toString</methodname>.
    </member>
    <member>
     Вызов функции <function>var_dump</function>
     или <function>debug_zval_dump</function>, если только магический метод
     <link linkend="object.debuginfo">__debugInfo()</link> не запустил
     инициализацию.
    </member>
   </simplelist>
  </sect3>
 </sect2>

 <sect2 xml:id="language.oop5.lazy-objects.initialization-sequence">
  <title>Последовательность инициализации</title>

  <simpara>
   Раздел описывает характерные для стратегий последовательности операций,
   которые выполняются при запуске инициализации.
  </simpara>

  <sect3>
   <title>Объекты-призраки</title>
   <simplelist>
    <member>
     Ленивый призрак помечается как неленивый.
    </member>
    <member>
     Свойствам, которые не инициализировали методом
     <methodname>ReflectionProperty::skipLazyInitialization</methodname>
     или <methodname>ReflectionProperty::setRawValueWithoutLazyInitialization</methodname>,
     устанавливаются значения по умолчанию, если такие определили в классе. На этом этапе объект
     напоминает объект, который создали методом
     <methodname>ReflectionClass::newInstanceWithoutConstructor</methodname>,
     за исключением свойств, которые уже инициализировались.
    </member>
    <member>
     Затем вызывается callback-функция инициализатора с объектом в качестве первого аргумента.
     Ожидается, что функция обратного вызова — хотя это и не обязательно —
     инициализирует состояние объекта и вернёт &null; или не вернёт никакого значения.
     На этом этапе объект перестаёт быть ленивым, поэтому функция получает прямой доступ
     к свойствам реального объекта.
    </member>
   </simplelist>
   <simpara>
    После инициализации объект неотличим от объекта, который никогда не был ленивым.
   </simpara>
  </sect3>

  <sect3>
   <title>Объекты-прокси</title>
   <simplelist>
    <member>
     Ленивый прокси помечается как неленивый.
    </member>
    <member>
     В отличие от ленивых призраков, свойства ленивых прокси на этом этапе не изменяются.
    </member>
    <member>
     Фабричная callback-функция вызывается с объектом в качестве первого аргумента
     и возвращает неленивый экземпляр совместимого класса. Смотрите описание
     метода <methodname>ReflectionClass::newLazyProxy</methodname>.
    </member>
    <member>
     Экземпляр, который вернула функция обратного вызова, называется
     <emphasis>реальным экземпляром</emphasis> и прикрепляется к прокси.
    </member>
    <member>
     Значения свойств ленивого прокси отбрасываются так, как если бы вызвали
     языковую конструкцию <function>unset</function>.
    </member>
   </simplelist>
   <simpara>
    После инициализации доступ к свойствам объекта-прокси даст тот же результат,
    что и доступ к тому же свойству реального экземпляра; обращения к свойствам
    объекта-прокси перенаправляются на реальный экземпляр, включая объявленные,
    динамические, несуществующие свойства или свойства, которые пометили методом
    <methodname>ReflectionProperty::skipLazyInitialization</methodname>
    или <methodname>ReflectionProperty::setRawValueWithoutLazyInitialization</methodname>.
   </simpara>
   <simpara>
    Сам объект-прокси не заменяется и <emphasis>не</emphasis> подменяет собой
    реальный экземпляр.
   </simpara>
   <simpara>
    Хотя фабрика получает прокси как первый аргумент, ожидается, что фабричная функция
    не станет изменять объект-прокси. Изменения разрешаются, но потеряются на заключительном
    этапе инициализации. Однако прокси иногда помогает принимать решения
    на основе значений инициализированных свойств, класса, самого объекта или его идентификатора.
    Например, инициализатор создаёт реальный экземпляр на основе значения инициализированного
    свойства.
   </simpara>
  </sect3>

  <sect3>
   <title>Общее поведение</title>

   <simpara>
    Область действия и контекст переменной <varname>$this</varname> инициализатора или фабричной
    функции остаются неизменными, и применяются стандартные ограничения видимости.
   </simpara>

   <simpara>
    После успешной инициализации объект больше не ссылается на инициализатор
    или фабричную функцию и доступен для освобождения, если на объект не осталось
    других ссылок.
   </simpara>

   <simpara>
    Состояние объекта возвращается к состоянию до инициализации,
    а объект снова помечается как ленивый, если инициализатор генерирует исключение.
    Другими словами, каждое воздействие на сам объект отменяется.
    Другие побочные эффекты наподобие воздействия на другие объекты не отменяются.
    Это предотвращает предоставление частично инициализированного экземпляра
    при ошибке.
   </simpara>
  </sect3>
 </sect2>

 <sect2 xml:id="language.oop5.lazy-objects.cloning">
  <title>Клонирование</title>

  <simpara>
   <link linkend="language.oop5.cloning">Клонирование</link>
   ленивого объекта запускает его инициализацию раньше, чем создаётся
   клон, поэтому объект инициализируется.
  </simpara>

  <simpara>
   При клонировании объектов-прокси клонируется как прокси, так и его реальный экземпляр,
   и возвращается клон прокси.
   Магический метод <link linkend="object.clone"><literal>__clone</literal></link>
   вызывается на реальном экземпляре, не на прокси.
   Клонированный прокси и реальный экземпляр связываются так, как они связались
   при инициализации, поэтому доступ к клону объекта-прокси перенаправляется
   на клон реального экземпляра.
  </simpara>

  <simpara>
   Такое поведение гарантирует, что клон и исходный объект сохраняют
   разные состояния. Изменения состояния исходного объекта или состояния его инициализатора
   после клонирования не влияют на клон. Клонирование и прокси, и его реального
   экземпляра вместо возврата только клона реального экземпляра гарантирует,
   что операция клонирования стабильно возвращает объект того же класса.
  </simpara>
 </sect2>

 <sect2 xml:id="language.oop5.lazy-objects.destructors">
  <title>Деструкторы</title>

  <simpara>
   Для ленивых призраков деструктор вызывается, только если объект инициализировали.
   Для прокси деструктор вызывается только для реального экземпляра, если реальный экземпляр существует.
  </simpara>

  <simpara>
   Методам <methodname>ReflectionClass::resetAsLazyGhost</methodname>
   и <methodname>ReflectionClass::resetAsLazyProxy</methodname>
   разрешается вызывать деструктор сбрасываемого объекта.
  </simpara>
 </sect2>
</sect1>
