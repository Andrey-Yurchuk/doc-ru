<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: d6f54016d62904cfd8200604aadd5e3f0d9bad97 Maintainer: shein Status: ready -->
<!-- Reviewed: no -->
<sect1 xml:id="language.oop5.paamayim-nekudotayim" xmlns="http://docbook.org/ns/docbook">
 <title>Оператор разрешения области действия ::</title>

 <para>
  Оператор разрешения области действия, который ещё называется Paamayim Nekudotayim,
  или «двойное двоеточие», — токен, который разрешает доступ
  <link linkend="language.oop5.constants">к константе</link>,
  <link linkend="language.oop5.static">статическому</link> свойству
  или <link linkend="language.oop5.static">статическому</link> методу
  текущего или родительского класса.
  Больше того, статические свойства и методы разрешается переопределять
  через <link linkend="language.oop5.late-static-bindings">позднее статическое связывание</link>.
 </para>

 <para>
  При обращении к элементам класса извне определения класса указывают название класса.
 </para>

 <para>
  К классу возможно обратиться через переменную, при этом
  нельзя указывать как значение переменной ключевые слова наподобие <literal>self</literal>,
  <literal>parent</literal> или <literal>static</literal>.
 </para>

 <para>
  Вначале словосочетание Paamayim Nekudotayim кажется странным
  выбором для названия двойного двоеточия.
  Команда Zend назвала оператор так,
  пока писала движок Zend Engine версии 0.5, на котором работал PHP 3.
  Секрет в том, что эти слова и переводятся как «двойное двоеточие» — с иврита!
 </para>

 <example>
  <title>Пример обращения к элементам класса через оператор :: из-за пределов определения класса</title>
  <programlisting role="php">
<![CDATA[
<?php

class MyClass
{
    const CONST_VALUE = 'Значение константы';
}

$classname = 'MyClass';
echo $classname::CONST_VALUE;

echo MyClass::CONST_VALUE;

?>
]]>
  </programlisting>
 </example>

 <para>
  К свойствам и методам изнутри класса
  обращаются через ключевые слова <varname>self</varname>, <varname>parent</varname>
  и <varname>static</varname>.
 </para>

 <example>
  <title>Пример обращения к элементам класса через оператор :: изнутри определения класса</title>
  <programlisting role="php">
<![CDATA[
<?php

class MyClass {
    const CONST_VALUE = 'A constant value';
}

class OtherClass extends MyClass
{
    public static $my_static = 'статическая переменная';

    public static function doubleColon()
    {
        echo parent::CONST_VALUE . "\n";
        echo self::$my_static . "\n";
    }
}

$classname = 'OtherClass';
$classname::doubleColon();

OtherClass::doubleColon();

?>
]]>
  </programlisting>
 </example>

 <para>
  PHP не вызывает метод родительского класса,
  когда дочерний класс переопределяет родительский метод.
  Дочерний класс сам решает, вызывать ли метод родительского класса.
  Это правило также относится <link
  linkend="language.oop5.decon">к конструкторам и деструкторам</link>,
  <link linkend="language.oop5.overloading">перегруженным</link>
  и «<link linkend="language.oop5.magic">магическим</link>» методам.
 </para>

 <example>
  <title>Пример вызова родительского метода</title>
  <programlisting role="php">
<![CDATA[
<?php

class MyClass
{
    protected function myFunc()
    {
        echo "MyClass::myFunc()\n";
    }
}

class OtherClass extends MyClass
{
    // Переопределяем родительский метод
    public function myFunc()
    {
        // Но всё равно вызываем метод родительского класса
        parent::myFunc();
        echo "OtherClass::myFunc()\n";
    }
}

$class = new OtherClass();
$class->myFunc();

?>
]]>
  </programlisting>
 </example>
 <para>
  Смотрите также
  <link linkend="language.oop5.basic.class.this">примеры статических вызовов</link>.
 </para>

</sect1><!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
