<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: bdc21104ac4aabd6d2f6144a035d5fc51eed88ae Maintainer: sergey Status: ready -->
<!-- Reviewed: no -->
<sect1 xml:id="language.oop5.basic" xmlns="http://docbook.org/ns/docbook">
 <title>Основы</title>

 <sect2 xml:id="language.oop5.basic.class">
  <title>class</title>
  <para>
   Каждое определение класса начинается с ключевого слова <literal>class</literal>, затем
   идёт имя класса, а потом пара фигурных скобок, в которых определяют
   свойства и методы класса.
  </para>
  <para>
   Именем класса может быть любое слово, при условии, что оно не входит в список
   <link linkend="reserved">зарезервированных слов</link> PHP, начинается с буквы или
   символа подчёркивания и за которым следует любое количество букв, цифр или символов
   подчёркивания. Если задать эти правила в виде регулярного выражения, то получится
   следующее выражение: <code>^[a-zA-Z_\x80-\xff][a-zA-Z0-9_\x80-\xff]*$</code>.
  </para>
  <para>
   Классы содержат <link linkend="language.oop5.constants">константы</link>,
   <link linkend="language.oop5.properties">переменные</link>, которые в классах
   называют свойствами, и функции, которые в классах называют методами.
  </para>
  <example>
   <title>Простое определение класса</title>
   <programlisting role="php">
<![CDATA[
<?php

class SimpleClass
{
    // Объявление свойства
    public $var = 'значение по умолчанию';

    // Объявление метода
    public function displayVar() {
        echo $this->var;
    }
}

?>
]]>
   </programlisting>
  </example>
  <para>
   Псевдопеременная <varname>$this</varname> доступна,
   когда метод вызывается из контекста объекта.
   Переменная <varname>$this</varname> — значение вызывающего объекта.
  </para>
  <warning>
   <para>
    Вызов нестатического метода статически выбрасывает исключение <classname>Error</classname>.
    До PHP 8.0.0 это приводило к уведомлению об устаревании,
    а переменная <varname>$this</varname> оставалась неопределённой.
   </para>
   <example xml:id="language.oop5.basic.class.this">
    <title>Примеры псевдопеременной <varname>$this</varname></title>
    <programlisting role="php">
<![CDATA[
<?php

class A
{
    function foo()
    {
        if (isset($this)) {
            echo 'Переменная $this определена (';
            echo get_class($this);
            echo ")\n";
        } else {
            echo "Переменная \$this не определена.\n";
        }
    }
}

class B
{
    function bar()
    {
        A::foo();
    }
}

$a = new A();
$a->foo();

A::foo();

$b = new B();
$b->bar();

B::bar();

?>
]]>
     </programlisting>
     &example.outputs.7;
     <screen>
<![CDATA[
Переменная $this определена (A)

Deprecated: Non-static method A::foo() should not be called statically in %s  on line 27
Переменная $this не определена.

Deprecated: Non-static method A::foo() should not be called statically in %s  on line 20
Переменная $this не определена.

Deprecated: Non-static method B::bar() should not be called statically in %s  on line 32

Deprecated: Non-static method A::foo() should not be called statically in %s  on line 20
Переменная $this не определена.
]]>
     </screen>
     &example.outputs.8;
     <screen>
<![CDATA[
Переменная $this определена (A)

Fatal error: Uncaught Error: Non-static method A::foo() cannot be called statically in %s :27
Stack trace:
#0 {main}
  thrown in %s  on line 27
]]>
     </screen>
   </example>
  </warning>

  <sect3 xml:id="language.oop5.basic.class.readonly">
   <title>Классы только для чтения</title>
   <para>
    Начиная с PHP 8.2.0 класс можно пометить
    модификатором <modifier>readonly</modifier>.
    Пометка класса как <modifier>readonly</modifier> добавит
    <link linkend="language.oop5.properties.readonly-properties">модификатор <modifier>readonly</modifier></link>
    к каждому объявленному свойству и не разрешит создавать
    <link linkend="language.oop5.properties.dynamic-properties">динамические свойства</link>.
    Поддержку динамических свойств невозможно добавить даже атрибутом
    <classname>AllowDynamicProperties</classname>. Попытка это сделать вызовет ошибку компиляции.
   </para>
   <example>
    <programlisting role="php">
<![CDATA[
<?php

#[\AllowDynamicProperties]
readonly class Foo {}

// Fatal error: Cannot apply #[AllowDynamicProperties] to readonly class Foo

?>
]]>
    </programlisting>
   </example>

   <para>
    В классах только для чтения нельзя объявлять нетипизированные и статические свойства,
    поскольку такие свойства нельзя помечать модификатором <literal>readonly</literal>:
   </para>
   <example>
    <programlisting role="php">
<![CDATA[
<?php

readonly class Foo
{
    public $bar;
}

// Fatal error: Readonly property Foo::$bar must have type

?>
]]>
    </programlisting>
    <programlisting role="php">
<![CDATA[
<?php

readonly class Foo
{
    public static int $bar;
}

// Fatal error: Readonly class Foo cannot declare static properties

?>
]]>
    </programlisting>
   </example>
   <para>
    Класс <modifier>readonly</modifier> разрешается
    <link linkend="language.oop5.basic.extends">расширять</link>
    тогда и только тогда, когда дочерний класс
    тоже класс <modifier>readonly</modifier>.
   </para>
  </sect3>

 </sect2>

 <sect2 xml:id="language.oop5.basic.new">
  <title>Ключевое слово new</title>
  <para>
   Экземпляр класса создаётся директивой <literal>new</literal>.
   Новый объект будет создан, если только
   <link linkend="language.oop5.decon">конструктор</link> объекта
   не выбрасывает <link linkend="language.exceptions">исключение</link> во время ошибки.
   Класс рекомендуют определять перед тем, как создавать экземпляр класса;
   иногда это обязательное требование.
  </para>
  <para>
   PHP создаст новый экземпляр класса, если с ключевым словом
   <literal>new</literal> указали переменную, которая содержит строку (<type>string</type>)
   с названием класса.
   Чтобы создать экземпляр класса, который определили в пространстве имён,
   требуется указывать абсолютное имя класса.
  </para>

  <note>
   <para>
    Круглые скобки после названия класса разрешается опускать,
    если нет аргументов, которые требуется передать конструктору класса.
   </para>
  </note>

  <example>
   <title>Создание экземпляра класса</title>
   <programlisting role="php">
<![CDATA[
<?php

$instance = new SimpleClass();

// Или создаём экземпляр класса через переменную:
$className = 'SimpleClass';
$instance = new $className(); // new SimpleClass()

?>
]]>
   </programlisting>
  </example>
  <para>
   С PHP 8.0.0 поддерживается ключевое слово
   <literal>new</literal> с произвольными выражениями.
   Это разрешает создавать более сложные экземпляры, если
   выражение создаёт строку (<type>string</type>).
   Выражения берут в круглые скобки.
   </para>
   <example>
    <title>Пример новых объектов, которые создали через произвольные выражения</title>
    <para>
     Пример показывает варианты допустимых произвольных выражений, которые представляют имя класса.
     Пример вызова функции, конкатенации строк и константы <constant>::class</constant>.
    </para>
    <programlisting role="php">
<![CDATA[
<?php

class ClassA extends \stdClass {}
class ClassB extends \stdClass {}
class ClassC extends ClassB {}
class ClassD extends ClassA {}

function getSomeClass(): string
{
    return 'ClassA';
}

var_dump(new (getSomeClass()));
var_dump(new ('Class' . 'B'));
var_dump(new ('Class' . 'C'));
var_dump(new (ClassD::class));

?>
]]>
    </programlisting>
    &example.outputs.8;
    <screen>
<![CDATA[
object(ClassA)#1 (0) {
}
object(ClassB)#1 (0) {
}
object(ClassC)#1 (0) {
}
object(ClassD)#1 (0) {
}

]]>
    </screen>
   </example>
  <para>
   В контексте класса допускается создать новый объект через
   <literal>new self</literal> и <literal>new parent</literal>.
  </para>
  <para>
   У переменной будет доступ к тому же экземпляру класса, что и у объекта,
   который присвоили переменной.
   Такое же поведение наблюдается при передаче экземпляра класса в функцию.
   Копию объекта создают <link linkend="language.oop5.cloning">клонированием</link>.
  </para>
  <example>
   <title>Присваивание объекта</title>
   <programlisting role="php">
<![CDATA[
<?php

$instance = new SimpleClass();

$assigned   =  $instance;
$reference  =& $instance;

$instance->var = 'У экземпляра класса, который содержит перменная $assigned, тоже будет это значение';

$instance = null; // Значения переменных $instance и $reference станут равны null

var_dump($instance);
var_dump($reference);
var_dump($assigned);

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
NULL
NULL
object(SimpleClass)#1 (1) {
   ["var"]=>
     string(30) "$assigned будет иметь это значение"
}
]]>
    </screen>
  </example>
  <para>
   Экземпляры объектов создают несколькими способами:
  </para>
  <example>
   <title>Новые объекты</title>
   <programlisting role="php">
<![CDATA[
<?php

class Test
{
    static public function getNew()
    {
        return new static;
    }
}

class Child extends Test {}

$obj1 = new Test(); // По имени класса
$obj2 = new $obj1; // Через переменную
var_dump($obj1 !== $obj2);

$obj3 = Test::getNew(); // Через метод класса
var_dump($obj3 instanceof Test);

$obj4 = Child::getNew(); // Через метод класса-наследника
var_dump($obj4 instanceof Child);

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
bool(true)
bool(true)
bool(true)
]]>
    </screen>
  </example>
  <para>
   К свойству или методу только что созданного объекта получится
   обратиться одним выражением:
  </para>
  <example>
   <title>Доступ к свойствам и методам только что созданного объекта</title>
   <programlisting role="php">
<![CDATA[
<?php

echo (new DateTime())->format('Y');

?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
2016
]]>
    </screen>
  </example>

  <note>
   <simpara>
    До PHP 7.1 язык не вычислял значения аргументов
    в круглых скобках выражения, которым инстанциировали объект класса,
    если в классе не было метода-конструктора.
   </simpara>
  </note>
 </sect2>
 <sect2 xml:id="language.oop5.basic.properties-methods">
  <title>Свойства и методы</title>
  <para>
   Свойства и методы класса живут в отдельных «пространствах имён»,
   поэтому для свойств и методов допустимо давать одинаковые имена.
   Ссылки как на свойства, так и на методы имеют одинаковую нотацию, и получается,
   что получите вы доступ к свойству или же вызовете метод - определяется контекстом
   использования.
  </para>
  <example>
   <title>Доступ к свойству vs. вызов метода</title>
   <programlisting role="php">
<![CDATA[
<?php
class Foo
{
    public $bar = 'свойство';

    public function bar() {
        return 'метод';
    }
}

$obj = new Foo();
echo $obj->bar, PHP_EOL, $obj->bar(), PHP_EOL;
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
свойство
метод
]]>
   </screen>
  </example>
  <para>
   Это означает, что вызвать <link linkend="functions.anonymous">анонимную
   функцию</link>, присвоенную переменной, напрямую не получится.
   Вместо этого свойство должно быть назначено, например, переменной.
   Можно вызвать такое свойство напрямую, заключив его в скобки.
  </para>
  <example>
   <title>Вызов анонимной функции, содержащейся в свойстве</title>
   <programlisting role="php">
<![CDATA[
<?php
class Foo
{
    public $bar;

    public function __construct() {
        $this->bar = function() {
            return 42;
        };
    }
}

$obj = new Foo();

echo ($obj->bar)(), PHP_EOL;
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
42
]]>
    </screen>
  </example>
 </sect2>
 <sect2 xml:id="language.oop5.basic.extends">
  <!-- TODO Example about class constant redefinition -->
  <!-- TODO Split into it's own page? -->
  <title>extends</title>
  <para>
   Класс может наследовать константы, методы и свойства другого класса используя
   ключевое слово <literal>extends</literal> в его объявлении. Невозможно наследовать несколько
   классов, один класс может наследовать только один базовый класс.
  </para>
  <para>
   Наследуемые константы, методы и свойства могут быть переопределены (за исключением
   случаев, когда метод или константа класса объявлены как <link linkend="language.oop5.final">final</link>)
   путём объявления их с теми же именами, как и в родительском классе.
   Существует возможность доступа к переопределённым методам или статическим
   свойствам путём обращения к ним через
   <link linkend="language.oop5.paamayim-nekudotayim">parent::</link>
  </para>
   <note>
    <simpara>
     Начиная с PHP 8.1.0, константы можно объявлять окончательными (final).
    </simpara>
   </note>
  <example>
   <title>Простое наследование классов</title>
   <programlisting role="php">
<![CDATA[
<?php
class ExtendClass extends SimpleClass
{
    // Переопределение метода родителя
    function displayVar()
    {
        echo "Расширенный класс\n";
        parent::displayVar();
    }
}

$extended = new ExtendClass();
$extended->displayVar();
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Расширенный класс
значение по умолчанию
]]>
   </screen>
  </example>

  <sect3 xml:id="language.oop.lsp">
    <title>Правила совместимости сигнатуры</title>
    <para>
     При переопределении метода его сигнатура должна быть совместима с родительским методом.
     В противном случае выдаётся фатальная ошибка или, до PHP 8.0.0,
     генерируется ошибка уровня <constant>E_WARNING</constant>.
     Сигнатура является совместимой, если она соответствует правилам <link linkend="language.oop5.variance">контравариантности</link>, делает
     обязательный параметр необязательным, добавляет только необязательные новые параметры и не ограничивает,
     а только ослабляет видимость.
     Это известно как принцип подстановки Барбары Лисков или сокращённо LSP.
     Правила совместимости не распространяются на <link linkend="language.oop5.decon.constructor">конструктор</link> и
     сигнатуру <literal>private</literal> методов, они не будут выдавать фатальную ошибку
     в случае несоответствия сигнатуры.
    </para>
    <example>
     <title>Совместимость дочерних методов</title>
     <programlisting role="php">
<![CDATA[
<?php

class Base
{
    public function foo(int $a) {
        echo "Допустимо\n";
    }
}

class Extend1 extends Base
{
    function foo(int $a = 5)
    {
        parent::foo($a);
    }
}

class Extend2 extends Base
{
    function foo(int $a, $b = 5)
    {
        parent::foo($a);
    }
}

$extended1 = new Extend1();
$extended1->foo();
$extended2 = new Extend2();
$extended2->foo(1);
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
Допустимо
Допустимо
]]>
     </screen>
    </example>

    <para>
     Следующие примеры демонстрируют, что дочерний метод, который удаляет параметр или делает необязательный
     параметр обязательным, несовместим с родительским методом.
    </para>
    <example>
     <title>Фатальная ошибка, когда дочерний метод удаляет параметр</title>
     <programlisting role="php">
<![CDATA[
<?php

class Base
{
    public function foo(int $a = 5) {
        echo "Допустимо\n";
    }
}

class Extend extends Base
{
    function foo()
    {
        parent::foo(1);
    }
}
]]>
     </programlisting>
     &example.outputs.8.similar;
     <screen>
<![CDATA[
Fatal error: Declaration of Extend::foo() must be compatible with Base::foo(int $a = 5) in /in/evtlq on line 13
]]>
     </screen>
    </example>
    <example>
     <title>Фатальная ошибка, когда дочерний метод делает необязательный параметр обязательным.</title>
     <programlisting role="php">
<![CDATA[
<?php

class Base
{
    public function foo(int $a = 5) {
        echo "Допустимо\n";
    }
}

class Extend extends Base
{
    function foo(int $a)
    {
        parent::foo($a);
    }
}
]]>
     </programlisting>
     &example.outputs.8.similar;
     <screen>
<![CDATA[
Fatal error: Declaration of Extend::foo(int $a) must be compatible with Base::foo(int $a = 5) in /in/qJXVC on line 13
]]>
     </screen>
    </example>

    <warning>
     <para>
      Переименование параметра метода в дочернем классе не является
      несовместимостью сигнатуры. Однако это не рекомендуется, так как приведёт к
      <classname>Error</classname> во время выполнения, если используются
      <link linkend="functions.named-arguments">именованные аргументы</link>.
     </para>
     <example>
      <title>Ошибка при использовании именованных аргументов и параметров, переименованных в дочернем классе</title>
      <programlisting role="php">
<![CDATA[
<?php

class A {
    public function test($foo, $bar) {}
}

class B extends A {
    public function test($a, $b) {}
}

$obj = new B;

// Передача параметров согласно контракту A::test()
$obj->test(foo: "foo", bar: "bar"); // ОШИБКА!
]]>
      </programlisting>
      &example.outputs.similar;
      <screen>
<![CDATA[
Fatal error: Uncaught Error: Unknown named parameter $foo in /in/XaaeN:14
Stack trace:
#0 {main}
  thrown in /in/XaaeN on line 14
]]>
      </screen>
     </example>
    </warning>
   </sect3>
 </sect2>

 <sect2 xml:id="language.oop5.basic.class.class">
  <title>::class</title>

  <para>
   Ключевое слово <literal>class</literal> используется
   для разрешения имени класса.
   Чтобы получить полное имя класса <literal>ClassName</literal>,
   используйте <literal>ClassName::class</literal>.
   Обычно это довольно полезно при работе с классами, использующими
   <link linkend="language.namespaces">пространства имён</link>.
  </para>
  <para>
   <example xml:id="language.oop5.basic.class.class.name">
    <title>Разрешение имени класса</title>
    <programlisting role="php">
<![CDATA[
<?php
namespace NS {
    class ClassName {
    }

    echo ClassName::class;
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
NS\ClassName
]]>
    </screen>
   </example>
  </para>
  <note>
   <para>Разрешение имён класса с использованием <literal>::class</literal> происходит
    на этапе компиляции. Это означает, что на момент создания строки с именем класса
    автозагрузки класса не происходит. Как следствие, имена классов раскрываются, даже
    если класс не существует. Ошибка в этом случае не выдаётся.
   </para>
   <example xml:id="language.oop5.basic.class.class.fail">
    <title>Отсутствует разрешение имени класса</title>
    <programlisting role="php">
<![CDATA[
<?php
print Does\Not\Exist::class;
?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
Does\Not\Exist
]]>
     </screen>
    </example>
  </note>
  <para>
   Начиная с PHP 8.0.0, константа <literal>::class</literal> также может использоваться
   для объектов. Это разрешение происходит во время выполнения, а не во время компиляции.
   То же самое, что и при вызове <function>get_class</function> для объекта.
  </para>
  <example xml:id="language.oop5.basic.class.class.object">
   <title>Разрешение имени объекта</title>
   <programlisting role="php">
<![CDATA[
<?php
namespace NS {
    class ClassName {
    }
}
$c = new ClassName();
print $c::class;
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
NS\ClassName
]]>
    </screen>
  </example>
 </sect2>
 <sect2 xml:id="language.oop5.basic.nullsafe">
  <title>Методы и свойства Nullsafe</title>
  <para>
   Начиная с PHP 8.0.0, к свойствам и методам можно также
   обращаться с помощью оператора "nullsafe": <literal>?-></literal>.
   Оператор nullsafe работает так же, как доступ к свойству или методу, как указано выше,
   за исключением того, что если разыменование объекта выдаёт &null;, то
   будет возвращён &null;, а не выброшено исключение. Если разыменование является частью цепочки,
   остальная часть цепочки пропускается.
  </para>
  <para>
   Аналогично заключению каждого обращения в <function>is_null</function>,
   но более компактный.
  </para>
  <para>
   <example>
    <title>Оператор Nullsafe</title>
    <programlisting role="php">
<![CDATA[
<?php

// Начиная с PHP 8.0.0, эта строка:
$result = $repository?->getUser(5)?->name;

// Эквивалентна следующему блоку кода:
if (is_null($repository)) {
    $result = null;
} else {
    $user = $repository->getUser(5);
    if (is_null($user)) {
        $result = null;
    } else {
        $result = $user->name;
    }
}
?>
]]>
    </programlisting>
   </example>
  </para>
  <note>
   <para>
    Оператор nullsafe лучше всего использовать, когда null считается допустимым и ожидаемым
    значением для возвращаемого свойства или метода. Для индикации ошибки предпочтительнее
    выбрасывать исключение.
   </para>
  </note>
 </sect2>
</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
