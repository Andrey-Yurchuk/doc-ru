<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: c9b1de1c1266145d5472d0c05edea2c1bf970ff0 Maintainer: rjhdby Status: ready -->
<!-- Reviewed: no -->
<sect1 xml:id="migration56.new-features" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Новые возможности</title>

 <sect2 xml:id="migration56.new-features.const-scalar-exprs">
  <title>Константные выражения</title>

  <para>
   Теперь можно предоставить скалярное выражение,
   которое включает числовые и строковые литералы и (или) константы,
   когда раньше ожидалось статическое значение, например,
   в объявлениях констант или значениях аргументов функций по умолчанию.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

const ONE = 1;
const TWO = ONE * 2;

class C
{
    const THREE = TWO + 1;
    const ONE_THIRD = ONE / self::THREE;
    const SENTENCE = 'Значение константы THREE - '.self::THREE;

    public function f($a = ONE + self::THREE)
    {
        return $a;
    }
}

echo (new C)->f()."\n";
echo C::SENTENCE;

?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
4
Значение константы THREE — 3
]]>
   </screen>
  </informalexample>

  <para>
   Массив (<type>array</type>) также определяют через ключевое слово
   <literal>const</literal>:
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

const ARR = ['a', 'b'];

echo ARR[0];

?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
a
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration56.new-features.variadics">
  <title>Функции с переменным количеством аргументов через оператор <literal>...</literal></title>

  <para>
   <link linkend="functions.variable-arg-list">Функции с переменным количеством аргументов</link>
   теперь разрешается реализовывать через оператор <literal>...</literal>, вместо того
   чтобы полагаться на функцию <function>func_get_args</function>.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

function f($req, $opt = null, ...$params)
{
    // Переменная $params — массив, который содержит остальные аргументы
    printf(
        '$req: %d; $opt: %d; количество параметров: %d' . "\n",
        $req,
        $opt,
        count($params)
    );
}

f(1);
f(1, 2);
f(1, 2, 3);
f(1, 2, 3, 4);
f(1, 2, 3, 4, 5);

?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
$req: 1; $opt: 0; количество параметров: 0
$req: 1; $opt: 2; количество параметров: 0
$req: 1; $opt: 2; количество параметров: 1
$req: 1; $opt: 2; количество параметров: 2
$req: 1; $opt: 2; количество параметров: 3
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration56.new-features.splat">
  <title>Распаковка аргументов через оператор <literal>...</literal></title>

  <para>
   <link linkend="language.types.array">Массивы</link> и объекты, которые реализуют
   интерфейс <interfacename>Traversable</interfacename>, разрешается распаковывать
   в список аргументов при вызове функций и передаче аргументов через оператор <literal>...</literal>.
   В других языках, включая Ruby, оператор знают как splat- или spread-оператор.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

function add($a, $b, $c)
{
    return $a + $b + $c;
}

$operators = [2, 3];
echo add(1, ...$operators);

?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
6
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration56.new-features.exponentiation">
  <title>Возведение в степень через оператор <literal>**</literal></title>

  <para>
   Добавили правоассоциативный оператор <literal>**</literal>, который
   возводит в степень. Доступен также короткий синтаксис <literal>**=</literal>.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

printf("2 ** 3 ==      %d\n", 2 ** 3);
printf("2 ** 3 ** 2 == %d\n", 2 ** 3 ** 2);

$a = 2;
$a **= 3;
printf("a ==           %d\n", $a);

?>
]]>
   </programlisting>
  &example.outputs;
  <screen>
<![CDATA[
2 ** 3 ==      8
2 ** 3 ** 2 == 512
a ==           8
]]>
  </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration56.new-features.use">
  <title>Конструкции <literal>use function</literal> и <literal>use const</literal></title>

  <para>
   В дополнение к классам оператор
   <link linkend="language.namespaces.importing"><literal>use</literal></link>
   расширили для поддержки импорта функций и констант.
   Это достигается через конструкцию <literal>use function</literal> для импорта функций
   и конструкцию <literal>use const</literal> для импорта констант.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

namespace Name\Space {
    const FOO = 42;

    function f()
    {
        echo __FUNCTION__."\n";
    }
}

namespace {
    use const Name\Space\FOO;
    use function Name\Space\f;

    echo FOO."\n";
    f();
}

?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
42
Name\Space\f
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration56.new-features.phpdbg">
  <title>phpdbg</title>

  <para>
   Теперь PHP содержит интерактивный отладчик, который называется "phpdbg",
   и который реализовали как SAPI-модуль. Подробности даёт
   <link linkend="book.phpdbg">документация к модулю phpdbg</link>.
  </para>
 </sect2>

 <sect2 xml:id="migration56.new-features.default-encoding">
  <title>Кодировка по умолчанию</title>

  <para>
   Для функций <function>htmlentities</function>,
   <function>html_entity_decode</function> и <function>htmlspecialchars</function>
   добавили директиву <link linkend="ini.default-charset">default_charset</link>, которая
   устанавливает набор символов по умолчанию.
   Обратите внимание: при установке параметров кодировки
   для модулей iconv и mbstring, которые теперь устарели, они будут иметь приоритет
   над ini-параметром default_charset для функций модулей iconv и mbstring.
  </para>

  <para>
   Значение по умолчанию для настройки — <literal>UTF-8</literal>.
  </para>
 </sect2>

 <sect2 xml:id="migration56.new-features.reusable-input">
  <title>
   Переиспользование обёртки <link linkend="wrappers.php.input"><literal>php://input</literal></link>
  </title>

  <para>
   Поток <link linkend="wrappers.php.input"><literal>php://input</literal></link>
   теперь разрешается переоткрывать и считывать столько раз, сколько требуется.
   Эта работа также значительно сократила объём памяти, который требуется для обработки
   данных POST-запросов.
  </para>
 </sect2>

 <sect2 xml:id="migration56.new-features.large-file">
  <title>Загрузка больших файлов</title>

  <para>
   Теперь разрешается загружать файлы размером больше 2 ГБ.
  </para>
 </sect2>

 <sect2 xml:id="migration56.new-features.gmp">
  <title>Модуль <link linkend="book.gmp">GMP</link> поддерживает перегрузку операторов</title>

  <para>
   Объекты класса <link linkend="book.gmp">GMP</link> теперь поддерживают перегрузку
   операторов и приведение к скалярным типам. Это разрешает выразительнее использовать GMP
   в коде:
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

$a = gmp_init(42);
$b = gmp_init(17);

if (version_compare(PHP_VERSION, '5.6', '<')) {
    echo gmp_intval(gmp_add($a, $b)), PHP_EOL;
    echo gmp_intval(gmp_add($a, 17)), PHP_EOL;
    echo gmp_intval(gmp_add(42, $b)), PHP_EOL;
} else {
    echo $a + $b, PHP_EOL;
    echo $a + 17, PHP_EOL;
    echo 42 + $b, PHP_EOL;
}

?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
59
59
59
]]>
   </screen>
  </informalexample>

 </sect2>

 <sect2 xml:id="migration56.new-features.hash-equals">
  <title>Функция <function>hash_equals</function> для предотвращения атак по времени при сравнении строк</title>

  <para>
   Добавили функцию <function>hash_equals</function> для сравнения двух строк
   за постоянное время. Функция поможет уменьшит атаки по времени; например,
   во время тестирования хеширования паролей функцией <function>crypt</function>
   (при условии, что невозможно использовать функции <function>password_hash</function>
   и <function>password_verify</function>, которые не подвержены атакам по времени).
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

$expected  = crypt('12345', '$2a$07$usesomesillystringforsalt$');
$correct   = crypt('12345', '$2a$07$usesomesillystringforsalt$');
$incorrect = crypt('1234',  '$2a$07$usesomesillystringforsalt$');

var_dump(hash_equals($expected, $correct));
var_dump(hash_equals($expected, $incorrect));

?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
bool(true)
bool(false)
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration56.new-features.debuginfo">
  <title>Метод <literal>__debugInfo()</literal></title>

  <para>
   Добавили магический метод <link linkend="language.oop5.magic.debuginfo">__debugInfo()</link>,
   который разрешает объектам изменять свойства и значения, которые отображаются при выводе объекта
   через функцию <function>var_dump</function>.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

class C
{
    private $prop;

    public function __construct($val)
    {
        $this->prop = $val;
    }

    public function __debugInfo()
    {
        return [
            'propSquared' => $this->prop ** 2,
        ];
    }
}

var_dump(new C(42));

?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
object(C)#1 (1) {
  ["propSquared"]=>
  int(1764)
}
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration56.new-features.gost">
  <title>Алгоритм хеширования gost-crypto</title>

  <para>
   Добавили алгоритм хеширования <literal>gost-crypto</literal>.
   Алгоритм реализует функцию хеширования GOST, с которой работают в таблицах CryptoPro S-box,
   которые определяет секция 11.2 стандарта <link xlink:href="&url.rfc;4357">RFC 4357</link>.
  </para>
 </sect2>

 <sect2 xml:id="migration56.new-features.openssl">
  <title>Улучшение в протоколах SSL/TLS</title>

  <para>
   В поддержку протоколов SSL/TLS в PHP 5.6 внесли широкий спектр улучшений. Улучшения включают
   <link linkend="migration56.incompatible.peer-verification">включение одноранговой проверки по умолчанию</link>,
   поддержка сопоставления отпечатков сертификатов, снижение
   защита от атак повторного согласования по протоколу TLS и много новых
   <link linkend="context.ssl">параметров SSL-контекста</link>, которые помогают точнее
   контролировать параметры протокола и проверки при работе
   с зашифрованными потоками.
  </para>

  <para>
   Подробнее изменения описывает раздел руководства
   «<link linkend="migration56.openssl">Изменения OpenSSL в PHP 5.6.x</link>».
  </para>
 </sect2>

 <sect2 xml:id="migration56.new-features.postgresql">
  <title>Поддержка асинхронности в модуле <link linkend="book.pgsql">pgsql</link></title>

  <para>
   Модуль <link linkend="book.pgsql">pgsql</link> теперь поддерживает асинхронные
   соединения и запросы, чем разрешает неблокирующее взаимодействие с базами данных
   PostgreSQL. Асинхронные соединения разрешается устанавливать через константу
   <constant>PGSQL_CONNECT_ASYNC</constant>, а новые функции
   <function>pg_connect_poll</function>, <function>pg_socket</function>,
   <function>pg_consume_input</function> и <function>pg_flush</function> помогут
   обрабатывать асинхронные соединения и запросы.
  </para>
 </sect2>
</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
