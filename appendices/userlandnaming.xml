<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 0ad6aa08fb58311737ae61515d12651d7f14626e Maintainer: shein Status: ready -->
<!-- Reviewed: no -->
<appendix xml:id="userlandnaming" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Руководство по именованию</title>
 <para>
  Документ содержит советы по выбору имён для идентификаторов в пользовательском PHP-коде.
  При выборе имён для кода, который создаёт символы
  в <link linkend="features.gc.refcounting-basics">таблице символов</link>
  глобального пространства имён, руководствуются рекомендациями раздела, чтобы избежать конфликтов кода
  с будущими версиями PHP.
 </para>

 <section xml:id="userlandnaming.globalnamespace">
  <title>Глобальное пространство имён</title>
  <para>
   Обзор конструкций, которыми создаются идентификаторы в глобальном пространстве имён.
  </para>

  <itemizedlist>
   <listitem><para>функции</para></listitem>
   <listitem><para>классы</para></listitem>
   <listitem><para>интерфейсы</para></listitem>
   <listitem><para>константы, кроме констант классов</para></listitem>
   <listitem>
    <para>переменные, которые объявили вне функций и методов</para>
   </listitem>
  </itemizedlist>
 </section>

 <section xml:id="userlandnaming.rules">
  <title>Правила</title>
  <para>
   Следующий список правил даёт общее представление о правах,
   которые проект PHP оставляет за собой при выборе имён для новых внутренних идентификаторов.
   Полное руководство по добавлению или изменению кода содержит официальный
   <link xlink:href="&url.userlandnaming.cs;">Стандарт кодирования</link>:
  </para>

  <itemizedlist>
   <listitem>
    <para>
     PHP владеет пространством имён верхнего уровня, но старается находить
     хорошие описательные имена и избегать очевидных коллизий.
    </para>
   </listitem>
   <listitem>
    <para>
     Названия функций содержат подчёркивания между словами, тогда как названия классов
     составляют в стиле <literal>camelCase</literal> и <literal>PascalCase</literal>.
    </para>
   </listitem>
   <listitem>
    <para>
     PHP добавляет префикс к глобальным именам, которые принадлежат модулю
     с названием этого модуля. В прошлом из этого правила делали
     делали много исключений. Приведём примеры названий:
    </para>

    <itemizedlist>
     <listitem><para><function>curl_close</function></para></listitem>
     <listitem><para><function>mysql_query</function></para></listitem>
     <listitem><para>PREG_SPLIT_DELIM_CAPTURE</para></listitem>
     <listitem><para>new DOMDocument()</para></listitem>
     <listitem>
      <para>
       <function>strpos</function> (пример исключения, которое допустили в прошлом)
      </para>
     </listitem>
     <listitem><para>new SplFileObject()</para></listitem>
    </itemizedlist>
   </listitem>
   <listitem>
    <para>
     Однако итераторы и исключения просто получают постфиксы
     "<literal>Iterator</literal>" и "<literal>Exception</literal>".
     Примеры:
    </para>
    <itemizedlist>
     <listitem><para><classname>ArrayIterator</classname></para></listitem>
     <listitem><para><classname>LogicException</classname></para></listitem>
    </itemizedlist>
   </listitem>
   <listitem>
    <para>
     PHP резервирует символы, которые начинаются с двух подчёркиваний <literal>__</literal>,
     как магические. Рекомендуется не создавать идентификаторы, которые начинаются
     с последовательности символов <literal>__</literal>, если только с целью использовать документированную
     магическую функциональность. Примеры:
    </para>
    <itemizedlist>
     <listitem><para><link linkend="object.get">__get()</link></para></listitem>
     <listitem><para><function>__autoload</function></para></listitem>
    </itemizedlist>
   </listitem>
  </itemizedlist>
 </section>

 <section xml:id="userlandnaming.tips">
  <title>Советы</title>
  <para>
   Для написания кода с прицелом на будущее рекомендуют не замусоривать
   глобальное пространство имён переменными, функциями и классами. Такой подход помогает
   избегать конфликтов со сторонними библиотеками и будущими дополнениями к языку.
  </para>

  <para>
   Названия функций и классов определяют в выделенном
   <link linkend="language.namespaces">пространстве имён</link>,
   чтобы избежать конфликтов имён.
  </para>
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

namespace MyProject;

function my_function()
{
    return true;
}

\MyProject\my_function();

?>
]]>
   </programlisting>
  </informalexample>
  <para>
   По-прежнему придётся отслеживать действующие пространства имён,
   но как только разработчик определяется с пространством имён, которое будет использовать,
   он добавляет в него функции и классы, не думая о конфликтах имён.
  </para>
  <para>
   Рекомендуется ограничивать количество переменных, которые добавляются
   в глобальную область видимости, чтобы предотвратить конфликты имён со сторонним кодом.
  </para>
  <note>
   <title>Область видимости переменных</title>
   <para>
    Из-за правил <link linkend="language.variables.scope">области видимости</link> языка PHP,
    переменные, которые определили внутри функций и методов, не находятся в глобальной
    области действия переменных и поэтому не конфликтуют с другими переменными,
    которые определили в глобальной области действия переменных.
   </para>
  </note>
 </section>

</appendix><!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
