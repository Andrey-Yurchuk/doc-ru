<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: d987f5fea44af3e2b2740bebc9700903cdfcf1f6 Maintainer: rjhdby Status: ready -->
<!-- Reviewed: no -->
<sect1 xml:id="migration71.new-features" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Новые возможности</title>

 <sect2 xml:id="migration71.new-features.nullable-types">
  <title>Обнуляемые типы</title>

  <para>
   Типы параметров и значений возврата функций стали обнуляемыми.
   Тип становится обнуляемым, если перед названием типа указали вопросительный знак.
   Знак вопроса перед названием типа указывает, что параметр принимает, или функция возвращает,
   значение заданного типа или значение &null;.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

function testReturnA(): ?string
{
    return 'elePHPant';
}

var_dump(testReturnA());

function testReturnB(): ?string
{
    return null;
}

var_dump(testReturnB());

function test(?string $name)
{
    var_dump($name);
}

test('elePHPant');
test(null);
test();

?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
string(9) "elePHPant"
NULL
string(9) "elePHPant"
NULL
Fatal error: Uncaught ArgumentCountError: Too few arguments to function test(), 0 passed in...
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration71.new-features.void-functions">
  <title>Функции без возврата значения</title>

  <para>
   Для значений возврата добавили тип <type>void</type>. В функциях
   с типом возврата void потребуется либо пропустить инструкцию return,
   либо указать пустую инструкцию return, без значения. Из void-функций
   нельзя возвращать значение &null;.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

function swap(&$left, &$right): void
{
    if ($left === $right) {
        return;
    }

    $tmp = $left;
    $left = $right;
    $right = $tmp;
}

$a = 1;
$b = 2;
var_dump(swap($a, $b), $a, $b);

?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
null
int(2)
int(1)
]]>
   </screen>
  </informalexample>

  <para>
   При попытке получить возврат void-функции значение вычисляется как &null;, без выдачи предупреждения.
   Причина такого поведения состоит в том, что предупреждения ограничили бы работу общих функций
   высшего порядка с void-функциями.
  </para>
 </sect2>

 <sect2 xml:id="migration71.new-features.symmetric-array-destructuring">
  <title>Симметричная деструктуризация массива</title>

  <para>
   Короткий синтаксис массивов <literal>[]</literal> теперь доступен для деструктуризации массивов
   и присваивания значений, в том числе в циклах <literal>foreach</literal>.
   Короткий синтаксис появился как альтернатива
   языковой конструкции <function>list</function>, которая по-прежнему поддерживается.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

$data = [
    [1, 'Tom'],
    [2, 'Fred'],
];

// Деструктуризация массива в стиле языковой конструкции list()
list($id1, $name1) = $data[0];

// Деструктуризация массива в стиле короткого синтаксиса массивов []
[$id1, $name1] = $data[0];

// Деструктуризация через list()
foreach ($data as list($id, $name)) {
    // В этом месте применяем логику работы с переменными $id и $name
}

// Деструктуризация через короткий синтаксис []
foreach ($data as [$id, $name]) {
    // В этом месте применяем логику работы с переменными $id и $name
}

?>
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration71.new-features.class-constant-visibility">
  <title>Видимость констант класса</title>

  <para>
   Константы классов теперь поддерживают определение области видимости.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

class ConstDemo
{
    const PUBLIC_CONST_A = 1;
    public const PUBLIC_CONST_B = 2;
    protected const PROTECTED_CONST = 3;
    private const PRIVATE_CONST = 4;
}

?>
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration71.new-features.iterable-pseudo-type">
  <title>Псевдотип <type>iterable</type></title>

  <para>
   Семейство псевдотипов, к которым также относится тип <type>callable</type>,
   пополнилось новым псевдотипом с названием <type>iterable</type>. Новый псевдотип доступен и как тип параметров,
   и как тип значений возврата, которые принимают массивы или объекты,
   которые реализуют интерфейс <classname>Traversable</classname>.
   В вопросах подтипирования, типам параметров дочерних классов доступно расширение
   типа <type>array</type> или <classname>Traversable</classname> в объявлениях родительского класса
   до типа <type>iterable</type>. В объявлениях типа возврата дочерним классам разрешается сужать
   тип возврата родительского метода с <type>iterable</type> до <type>array</type> или <classname>Traversable</classname>.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

function iterator(iterable $iter)
{
    foreach ($iter as $val) {
        //
    }
}
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration71.new-features.mulit-catch-exception-handling">
  <title>Обработка набора исключений в одном блоке catch</title>

  <para>
   Блоки catch научились обрабатывать набор исключений, которые
   указывают через символ вертикальной черты <literal>|</literal>. Это приносит пользу,
   когда исключения разных иерархий классов требуется обрабатывать одинаково.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

try {
    // Какой-то код
} catch (FirstException | SecondException $e) {
    // Обрабатываем одно или другое исключение
}
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration71.new-features.support-for-keys-in-list">
  <title>Поддержка ключей в языковой конструкции <function>list</function></title>

  <para>
   Языковая конструкция <function>list</function> и её новый
   короткий синтаксис <literal>[]</literal> теперь поддерживают ключи.
   Это помогает деструктурировать
   массивы с нечисловыми или непоследовательными ключами.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

$data = [
    ["id" => 1, "name" => 'Tom'],
    ["id" => 2, "name" => 'Fred'],
];

// Деструктуризация массива в стиле языковой конструкции list()
list("id" => $id1, "name" => $name1) = $data[0];

// Деструктуризация массива в стиле короткого синтаксиса массивов []
["id" => $id1, "name" => $name1] = $data[0];

// Деструктуризация в стиле list()
foreach ($data as list("id" => $id, "name" => $name)) {
    // Применяем логику обработки переменных $id и $name
}

// Деструктуризация в стиле короткого синтаксиса []
foreach ($data as ["id" => $id, "name" => $name]) {
    // Применяем логику обработки переменных $id и $name
}

?>
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration71.new-features.support-for-negative-string-offsets">
  <title>Поддержка отрицательных смещений в строках</title>

  <para>
   <link linkend="book.strings">В функции для работы со строками</link>, которые поддерживают смещения,
   и <link linkend="language.types.string.substr">в работу с символами строки по индексу</link>
   через короткий синтаксис массива <literal>[]</literal> или фигурные скобки <literal>{}</literal>
   добавили поддержку отрицательных смещений в строках.
   В функциях и при доступе к символам строки по индексу отрицательные смещения интерпретируются как смещения относительно конца строки.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

var_dump("abcdef"[-2]);
var_dump(strpos("aabbcc", "b", -3));

?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
string (1) "e"
int(3)
]]>
   </screen>
  </informalexample>

  <para>
   Отрицательные смещения в строках и массивах теперь также
   поддерживаются в простом синтаксисе разбора переменных внутри строк.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

$string = 'bar';
echo "Последний символ в строке '$string' — '$string[-1]'.\n";

?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Последний символ в строке 'bar' — 'r'.
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration71.new-features.support-for-aead-in-ext-openssl">
  <title>Поддержка режима AEAD в модуле OpenSSL</title>

  <para>
   За счёт расширения функций <function>openssl_encrypt</function>
   и <function>openssl_decrypt</function> дополнительными параметрами
   добавили поддержку AEAD-режимов GCM и CCM.
  </para>
 </sect2>

 <sect2 xml:id="migration71.new-features.convert-callables-to-closures">
  <title>
   Преобразование значений с типом callable в тип <classname>Closure</classname> методом <methodname>Closure::fromCallable</methodname>
  </title>

  <para>
   В класс <classname>Closure</classname> добавили новый статический метод,
   который легко преобразовывает значения с типом <type>callable</type> в объекты
   класса <classname>Closure</classname>.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

class Test
{
    public function exposeFunction()
    {
        return Closure::fromCallable([$this, 'privateFunction']);
    }

    private function privateFunction($param)
    {
        var_dump($param);
    }
}

$privFunc = (new Test)->exposeFunction();
$privFunc('значение');

?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
string(16) "значение"
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration71.new-features.asynchronous-signal-handling">
  <title>Асинхронная обработка сигналов</title>

  <para>
   Для асинхронной обработки сигналов в ядро PHP добавили функцию <function>pcntl_async_signals</function>.
   Новая функция не использует механизм тиков, который вызывает избыточные накладные расходы.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

pcntl_async_signals(true); // Включает асинхронные сигналы

pcntl_signal(SIGHUP,  function($sig) {
    echo "SIGHUP\n";
});

posix_kill(posix_getpid(), SIGHUP);

?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
SIGHUP
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration71.new-features.http2-server-push-support-in-ext-curl">
  <title>Поддержка механизма HTTP/2 Server Push в модуле cURL</title>

  <para>
   В модуль cURL добавили поддержку механизма Server Push. Для работы механизма требуется библиотека cURL версия 7.46 и выше.
   Поддержка заблаговременной отправки данных работает в функции <function>curl_multi_setopt</function> с новой
   константой <constant>CURLMOPT_PUSHFUNCTION</constant>. В модуль также добавили константы
   <constant>CURL_PUSH_OK</constant> и <constant>CURL_PUSH_DENY</constant>,
   чтобы одобрить или отклонить выполнение Server Push в клиентской callback-функции.
  </para>
 </sect2>

  <sect2 xml:id="migration71.new-features.stream-context-options">
  <title>Контекстные опции потока</title>

  <para>
   В контекст потока добавили параметр <link linkend="context.socket.tcp_nodelay">tcp_nodelay</link>.
  </para>
 </sect2>
</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
