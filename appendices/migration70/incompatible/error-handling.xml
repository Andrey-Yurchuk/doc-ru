<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 2485376b5b3d6b40e5c0d4e198ab5ff2a142425c Maintainer: rjhdby Status: ready -->
<!-- Reviewed: no -->
<sect2 xml:id="migration70.incompatible.error-handling">
 <title>Изменения в обработке ошибок и исключений</title>

 <para>
  В PHP 7 многие фатальные и поправимые фатальные ошибки
  переделали в исключения. Эти исключения наследуют
  класс <classname>Error</classname>, который, в свою
  очередь, реализует интерфейс
  <classname>Throwable</classname>
  (новый базовый интерфейс, который наследуют исключения).
 </para>

 <para>
  Поэтому пользовательские обработчики ошибок
  не вызовутся, если вместо вызова ошибки
  выбросится исключение (порождая новые фатальные ошибки
  из-за неперехваченных исключений класса
  <classname>Error</classname>).
 </para>

 <para>
  Более подробное описание работы ошибок в PHP 7
  даёт страница
  <link linkend="language.errors.php7">ошибки PHP 7</link>.
  Это руководство только перечисляет изменения, которые
  приводят к обратной несовместимости.
 </para>

 <sect3 xml:id="migration70.incompatible.error-handling.set-exception-handler">
  <title>
   Функция <function>set_exception_handler</function> больше
   не гарантирует получение объекта класса
   <classname>Exception</classname>
  </title>

  <para>
   Код, который реализует регистрацию обработчика исключений
   функцией <function>set_exception_handler</function>
   через декларацию типа
   <classname>Exception</classname> вызовет фатальную
   ошибку, если выбросится исключение
   <classname>Error</classname>.
  </para>

  <para>
   Потребуется убрать объявление класса из обработчика,
   если требуется работа обработчика в PHP 5 и 7. Достаточно
   изменить тип <classname>Exception</classname> на тип
   <classname>Throwable</classname>, если код
   планируется использовать только в PHP 7.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

// Только PHP 5. В PHP 7 при исключении другого типа вызывает фатальную ошибку
function handler(Exception $e) { /* ... */ }
set_exception_handler('handler');

// Будет работать PHP 5 и 7
function handler($e) { /* ... */ }

// Только PHP 7
function handler(Throwable $e) { /* ... */ }

?>
]]>
   </programlisting>
  </informalexample>
 </sect3>

 <sect3 xml:id="migration70.incompatible.error-handling.constructors">
  <title>Встроенные конструкторы вызывают исключения при ошибке</title>

  <para>
   Раньше отдельные внутренние классы возвращали
   &null; или бесполезный объект, когда конструктор терпел неудачу.
   Теперь встроенные классы в таких случаях выбрасывают
   исключение <classname>Exception</classname>,
   так же, как это уже делают пользовательские классы.
  </para>
 </sect3>

 <sect3 xml:id="migration70.incompatible.error-handling.parse">
  <title>Ошибки разбора бросают исключение класса <classname>ParseError</classname></title>

  <para>
   Ошибки разбора бросают исключение класса <classname>ParseError</classname>.
   Обработка ошибок <function>eval</function> должна
   включать в себя блок  &catch;, который будет ловить эту ошибку.
  </para>
 </sect3>

 <sect3 xml:id="migration70.incompatible.error-handling.strict">
  <title>Изменение строгости уведомлений E_STRICT</title>

  <para>
   Сообщения уровня <constant>E_STRICT</constant>
   переквалифицировали по другим уровням.
   Константу <constant>E_STRICT</constant> сохранили, поэтому
   установка <literal>error_reporting(E_ALL|E_STRICT)</literal> не вызовет
   ошибок.
  </para>
  <para>
   <table>
    <title>Изменение строгости сообщений <constant>E_STRICT</constant></title>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>Ситуация</entry>
       <entry>Новый уровень или поведение</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>Установка ресурса как индекса</entry>
       <entry><constant>E_NOTICE</constant></entry>
      </row>
      <row>
       <entry>Абстрактные статические методы</entry>
       <entry>Сообщение убрали, ошибка не возникает</entry>
      </row>
      <row>
       <entry>«Переопределение» конструктора</entry>
       <entry>Сообщение убрали, ошибка не возникает</entry>
      </row>
      <row>
       <entry>Несоблюдение сигнатуры при наследовании</entry>
       <entry><constant>E_WARNING</constant></entry>
      </row>
      <row>
       <entry>Одинаковые (совместимые) свойства в двух разных трейтах</entry>
       <entry>Сообщение убрали, ошибка не возникает</entry>
      </row>
      <row>
       <entry>Нестатический доступ к статическому свойству</entry>
       <entry><constant>E_NOTICE</constant></entry>
      </row>
      <row>
       <entry>Только переменные присваиваются по ссылке</entry>
       <entry><constant>E_NOTICE</constant></entry>
      </row>
      <row>
       <entry>Только переменные передаются по ссылке</entry>
       <entry><constant>E_NOTICE</constant></entry>
      </row>
      <row>
       <entry>Вызов нестатического метода статически</entry>
       <entry><constant>E_DEPRECATED</constant></entry>
      </row>
     </tbody>
    </tgroup>
   </table>
  </para>
 </sect3>
</sect2>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
